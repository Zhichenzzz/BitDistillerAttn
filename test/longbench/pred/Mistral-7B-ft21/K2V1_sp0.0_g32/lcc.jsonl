{"pred": "\n# def get_graph_score(self, A, Y, Z, w=None, mode='branching', root='R'):\n\nThis function is used to calculate the graph score of a given graph. The graph score is calculated by using the function get_graph_score.\n\nThe", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "        # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\nNext line of code:\n        # Open the copy file for writing\n        b = Sndfile(fd, 'w', format=Format('wav', _DTYPE_TO_", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n                m_Participants[i].CloseAllGumps( types, defs );\n\n                // next line of code:\n\n                m_Participants[i].CloseAllGumps( types, defs );\n\nNext line of code:\n\n               ", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\n#TAB FIELDS\n\n#TAB FIELDS\n\n#TAB FIELDS\n\n#TAB FIELDS\n\n#TAB FIELDS\n\n#TAB FIELDS\n\n#TAB FIELDS\n\n#TAB FIELDS\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\n#for a in (\"post_interval\", \"answer_timeout\", \"percent_anagrams_letters_min\", \"percent_trivia\",\n                  \"amount\", \"anagrams_letters_min\", \"anagrams_letters_max\",\n                  \"", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                    mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\nSend(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.SendMessage(\"", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "\n\n\t00:00:00, 00:00:00, 00:00:00, 00:00:00, 00:00:00, 00:00:00, 0", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "            for (X509Certificate cert : chain) {\n                s.print(cert);\n            }\nNext line of code:\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * CertificateRequestMsg ... send by CLIENT\n*\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "\n\tpublic static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {\n\t\n\t{\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "\n\n        # return self.handler(environ, start_response)\n\n\nNext line of code:\n\n\nNext line of code:\n\nreturn self.handler(environ, start_response)\n\nNext line of code:\n\n\nNext line of code:\n\nreturn self.", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "            sp = new JESpace (name, path);\nNext line of code:\n            sp.open ();\nNext line of code:\n            spaceRegistrar.put (name, sp);\n            return sp;\n        }\n        return sp;\n    }\n    public static synchronized", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\n        mark = \"setRepeated('%s')\" % status_id\nNext line of code:\n\n        self.webview.execute_javascript(mark)\n    def mark_status_as_unrepeated(self, status_id):\nNext line of code:\n\n", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "//\ta.Union (b);\n//\n// note: can't be tested with PermissionState.Unrestricted\n//\n// note: can't be tested with PermissionState.Unrestricted\n//\n// note: can't be tested with PermissionState.", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "\n# CompositeX509KeyManager and CompositeX509TrustManager allow for mixing together Java built-in managers\n# with new managers to support Python ssl.\n#\n# Ported to Python from http://codyaray.com/2013/0", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\n        DomainInfo domainInfo = manager.getDomainInfo(domain);\n\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n    /**\n     * Forwards to the domain_admin page.\n     *\n     * @struts.action validate=\"false\" path=\"/", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "\t\t\tjumpID = Convert.ToInt (store.GetValue (iter, columnBool2));\n\t\n\t\n\t0.000000000099999999999999999999999", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "        String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i].isResource()) {\n                argValues[i] = getMessage(defaultMessages, locale, args[i", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\n            self.__datastream_transport, self.__datastream_protocol,\n            self.__datastream_fd, self.__encoder, self.__player_state_changed,\n            self.__player_started, self.__player_finished, self.__playing, self__current_", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\n\tDataManager.loadToData();\n\nNext line of code:\n\nDataManager.save();\n\nNext line of code:\n\nDataManager.flushData();\n\nNext line of code:\n\nDataManager.saveTimedData();\n\nNext line of code:\n\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "                if ( m_Owner.SpellTarget is IPoint3D)\n                {\n                    m_Owner.SpellTarget = m_Owner.Caster.Map.GetMobilesInRange( new Point3D( m_Owner.SpellTarget.X, m_Owner.", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t@Override\n\tpublic void createFieldEditors() {\n\t\taddField(new TextFieldEditor(TEXT_FILE_CACHE_LENGHT_KEY,\n\t0, 100, getField", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n\t\tfor(IField field : fields) {\n\nNext line of code:\n\n\tfinal String name = field.getName().toString();\n\nNext line of code:\n\n0\n\nNext line of code:\n\n0\n\nNext line of code:\n\n0\n\n", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\n// LAMESPEC: msdn talks that only View contorls are allowed, for others controls HttpException should be thrown.\n// but actually, aspx praser adds LiteralControl controls.\n//\n// LAMESPEC: LAMS:\n//\n// LAMESPE", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "    if __name__ == '__main__':\n        main()", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "\n                // SkillGroup3 replace SkillGroup3\n\n                // SkillGroup4 replace SkillGroup4\nNext line of code:\n\n                // SkillGroup5 replace SkillGroup5\nNext line of code:\n\n                // SkillGroup6 replace Sk", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "\t\tstateBeansList = StatusBL.loadByLabel(objectID);\n\n\t1. The lookup entries are not limited by the user interface controls\n\t2. The lookup entries are not limited by the user interface controls\n\t3. The lookup entries are not limited by the user interface controls\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "\n    @functools.wraps(addslash, \"r'/foo/*'\")\n    @functools.wraps(removeslash, \"r'/foo/*'\")\n\nNext line of code:\n\n    @functools.wraps(removes", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "            foreach ( ArgumentSyntax argumentSyntax in argumentSyntaxs ) {\n                if ( toReplace.Contains( argumentSyntaxs, argumentSyntaxs.Where( x => x.ParameterName.Token.Value.StringValue.StartsWith( argumentSyntaxs[0].ParameterName.Token.Value.String", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "        for type, arch_pretty in variations.items():\n            builds.append({'os': 'os_desktop',\n                       'os_pretty': 'Desktop',\n                       'download_link': download_firefox(build, small=small, icon=icon,", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "        task = new ListenableFutureTask<>(callable);\n\n        task = new ListenableFutureTask<>(callable);\n\nNext line of code:\n        task.setResult(bitmapReference);\n\nNext line of code:\n        task.setResult(bitmapReference);\n\nNext line", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\n// if (cell.getNumUsagesIn() == 0)\n\nis not correct.  It should be:\n\n// if (cell.getNumUsagesIn() == 0)\n\nNext line of code:\n\n// if (cell.getNumUsagesIn()", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "        split_test = self.get_item_from_modulestore(self.split_test_usage_key, True)\n        self.assertEqual(split_test.user_partition_id, 'first_partition')\n        # Set to second group configuration.\nNext line of", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "                ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            base.Render(writer);\n        }\n        #region IScriptControl Members\n        public IEnumerable<ScriptDescriptor> GetScriptDescriptors()\n        {", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "            for (int k = 1; k < parms.Length; ++k) {\n                PdfIndirectReference font = (PdfIndirectReference)parms[k];\n                if (longTag.ContainsKey(font.GetName())) {\n                    Pdf", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\n                // Command history down\n\n                // Command history down\nNext line of code:\n\n                // Command history down\nNext line of code:\n\n                // Command history down\nNext line of code:\n\n                // Command history down\nNext line of code:\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "\tfor (IJRecognitionListener listener : recognitionListeners) {\n\nNext line of code:\n\tlistener.onRecognition(timestamp, sequenceTitles);\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "\n# Testing the delta of a document\n\n# Testing the delta of a document\n\n# Testing the delta of a document\n\n# Testing the delta of a document\n\n# Testing the delta of a document\n\n# Testing the delta of a document\n\n# Testing", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "        resbrains = pdt.searchResults(query)\nNext line of code:\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObjectValues()\n            if contobj.isDiscussable() and can", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\n# TODO: table for added tags with removal support\n# less than ideal button duplication between classes\nclass NodeManageTagsForm(NodeView):\n    tag_category = BootstrapSelect('tag_cat')\n    tag = BootstrapSelect('tag_add')\n    # TODO: table", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\n\tcompound.setInteger(\"DamageCooldown\", damageCooldown);\n\nThis line of code is used to set the value of the \"DamageCooldown\" NBT tag to the value of the \"DamageCooldown\" variable.\n\nNext line of code:", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "    i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'private',\n        'provider': 'example.com',\n        'tags\": 'test',\n        \"itype\": \"fqdn\",", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "\n# Make a list of data lists to hold the data for each column.\ndata_lists = [[] for i in range(header['Number of field cols'])]\nNext line of code:\n\n# Make a list of data lists to hold the data for each column.\ndata_lists", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "\n        return super.toString() + \" \" + probability + \" \" + scopes;\n\n        return super.toString() + \" \" + probability + \" \" + scopes;\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "\n# TODO (forman, 20160707): add sliders for zmin, zmax\n\n# TODO (forman, 20160707): add sliders for zmin, zmax\n\n# TODO (forman, 20", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "\n\treturn read(key, computed);\n\nThis line of code is used to convert the computed value to an E type.\n\nNext line of code:\n\nNext line of code:\n\nThis line of code is used to convert the computed value to an E type.\n\nNext line of", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "\n            return _range.contains(codePoint) ? offset : -1;\n         }\nNext line of code:\n\n            return _range.contains(codePoint) ? offset : -1 : -1;\nNext line of code:\n\n            return _range.contains(codePoint", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "                if (path.IsNotNullOrWhiteSpaceBasic() && !ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n                else\n                {\n                    _tempIgnoredPaths.AddOrUpdate(path);\n", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\n\t\tpublic sbyte m_X\n\nis a duplicate of the previous line of code:\n\nNext line of code:\n\npublic int ID\n\nis a duplicate of the previous line of code:\n\nNext line of code:\n\npublic sbyte m_Y\n\nis a", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "\nif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'notify':\n    notify()\nelif prnum == 'donate':\n    donate", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "    if not data_dict:\n        return True\n    model = context['model']\n    group_blobs = data_dict.get('groups', [])\n    groups = set()\n    for group_blob in group_blobs:\n        # group_blob might be a dict", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\n\tDialogResult=DialogResult.Cancel;\n\n\treturn;\n\t}\n\tPayPeriods.Edit(PayPeriodCur);\n\tDialogResult=DialogResult.OK;\n\t}\n\tprivate void butCancel_Click(object sender, System.EventArgs e) {\nNext line", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "        // We will need to update the system catalogs with this new information\n//        catalog.execute(\"add / clusters cluster\");\n//        catalog.execute(\"add /clusters[cluster] databases database\");\n//        catalog.execute(\"add /clusters[cluster] databases database\");\n", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\n//                    // get channel_uri: check first whether estate\n//                    // settings allow voice, then whether parcel allows\n//                    // if all do retrieve or obtain the parcel\n//                    voice channel\n//                    channel_uri = String.Empty;\n//                   ", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\n      // if there is an existing studyFormName, check if it matches the existing studyFormName\n      // if there is no existing studyFormName, then return ValidationResults.REQUIRED_FAIL;\n      // if there is no existing studyFormName, then check if there is an existing study", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "    # This is a hack to make the tests work on Travis CI.\n    # The tests are not run on the Travis CI server, but on the Travis CI server.\n    # The Travis CI server is a continuous integration server.\n    # The Travis C", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\n                // setting label according to outcome\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of code", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "            int [] ret = new int[A.Dimensions.NumberOfDimensions];\n            A.GetValueSeq(seqindex,ref ret);\n            return ret; \nNext line of code:\n            int [] ret = new int[A.Dimensions.NumberOfDimensions];\n", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "            // Trados 2007 TP supports only one language direction, regardless file- or -server based\n            return new SearchResults[] { new SearchResults() { LanguageDirection = this.languageDirection } };\n        }\n        #endregion // Methods\n        #region Fields\n       ", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "\n# TODO: arguably, we should support masked data properly in the\n# interpolation routine.  In the legacy code, that is unfortunately just not the case.\n# TODO: arguably, we should support masked data properly in the\n# interpolation routine.  In the legacy", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "\n\t\t0x00000000000000000000000000000000000000000000000009999999999", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "            // \n000000000000000000000000000000000000000000000000000000000000", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "  plotName = pD[ 'plotName' ]\n  #Get plotname\n  plotName = str( plotName )\n  #Get plotname\n  plotName = str( plotName )\n  #Get plotname\n  plotName = str( plotName )\n  #Get", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\n            this.DummySolutionExplorer = new DummySolutionExplorer();\n            this.DummySolutionExplorer.Dock = System.Windows.FormsUI.Docking;\n            this.DummySolutionExplorer.Docking = System", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "\t\tdcb.BaudRate = baud_rate;\n\n\t0x000000000000000;\n\nNext line of code:\n\tdcb.Parity = parity;\n\n0x0000000", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "            _transmissionConfigItems[\"max_idletime\"] = 10;\n            PrepareClientToReturnCompletedItem(false, ratio: 1.0);\n            var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "            if (currPacket == null)\n            {\n                return;\n            }\n            Clipboard.SetText(currPacket.Tag);\n        }\n        private void toolStripButtonPaste_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "                return new Rectangle(0, 0, fontX, fontY);\n            }\n        }\n        \n        /** Gets the barcode and the text, if\n        *any* and the text, if\n        *any* and the text, if\n        *any* and", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "\n# CourseFixtureFixture\n\nclass CourseFixtureFixture(CourseFixture):\n    \"\"\"\n    Fixture for ensuring that a course exists.\n    WARNING: This fixture is NOT idempotent.  To avoid conflicts\n    between tests, you should use unique course ident", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\n    def getGLUTFontPointer( self ):\n        \"\"\"Retrieve OpenGL font pointer from current context\n        \n        \"\"\"\n        from OpenGL import wrapper, error\n        if not self.GLUT:\n            return None\n        context = self.GetCurrentContext()\n        from Open", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n            // Set the rally points for new production buildings.\n\n            if (Info.BuildingQueues.Count > 0)\n            {\nNext line of code:\n\n            // Set the rally points for new production buildings.\n\n            var newBuildings = Info.BuildingQue", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\n# print_color('red or yellow')\n\nNext line of code:\n\n# print_color('red or yellow')\n\nNext line of code:\n\n# print_color('red or yellow')\n\nNext line of code:\n\n# print_color('red or yellow')", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken);\n                }\nNext line of code:\n                if (session.LogicSettings.VerboseRecycling)\n                {\n                    session.Event", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n        for plugname, plug in self.loaded_plugins:\n            plugruncount += 1\n            plugruncount += 1\n\nNext line of code:\n\n        for plugname, plug in self.loaded_plugins:\n            plugruncount += 1\n            plugrun", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "            baos.write(emptyStreams.toByteArray());\n\n            final DataOutput out = new DataOutputWrapper();\nNext line of code:\n            out.write(baos.toByteArray());\n\nNext line of code:\n            out.write(emptyStreams.to", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n\tfor(String splitNumber : splitNumber) {\n\t\tchance /= 100;\nNext line of code:\n\n\tif(chance < chance) {\nNext line of code:\n\n\treturn 0;\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "        if (currentSession != null && currentSession.isOpened()) {\nNext line of code:\n        GraphUser user = currentSession.getUser();\nNext line of code:\n        userInfoSession = currentSession.getSession();\nNext line of code:\n        if (userInfo", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\n# -*- coding: utf-8 -*-\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "\n    def test_user_with_cobrand_moderator(self):\n        user = self.make_user('moderator')\n        user.is_superuser = True\n        user.save()\n        page = self.get_page(self.user.get", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "\n\n        f=open(config_file, 'w')\n        f.write('# SERSIC FUNCTION PARAMETERS\\n')\n        f.writelines(['F) ', str(SersicFunc, ParamDict, No), \\\n                    '\t# Sersic function", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "        form = ReportUserForm(request.POST)\n        if form.is_valid():\n            message = form.cleaned_data['message']\n\n            report = ReportUser.objects.create(\n                to_user = user,\n                from_user = request.user", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "\tfor (Emotion emotion : emotions){\nNext line of code:\n\tsum += emotion.strength;\nNext line of code:\n\tsum += emotion.strength;\nNext line of code:\n\tsum += emotion.strength;\nNext line of code:\n0\nNext", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "\n# If the config directory doesn't exist, create it\nif not os.path.exists(config_directory):\n    try:\n        os.makedirs(config_directory)\n    # Download both cert files from the api host\n    types = ['key', 'cert']\n", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "                new_positional_tags_list.append(flag)\n                new_positional_tags_list.append(regex)\nNext line of code:\n                new_positional_tags_list.append(flag)\nNext line of code:\n                new_", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            e.printStackTrace();\nNext line of code:\n            parent.mirthClient.importMessage(channelId, message);\nNext line of code:\n            return true;\nNext line of code:\n            setVisible(false);\n            return true;\n        } catch (MessageWriterException", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "    return ArrayUtils.toPrimitive(results);\n    // next line of code:\n    return ArrayUtils.toPrimitive(results);\n  }\n  /**\n   * Loads a comma-separated list of integers from Properties.  The list cannot include any whitespace.\n  ", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\nNext line of code:\n                this.AddRes(index, typeof(SwitchItem), 10734", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "    # This is a hack to make the form work with the LaunchpadFormView.\n    # The LaunchpadFormView does not have a 'next_url' method.  So we need to\n    add a hack to make it work.\n    # The hack is to add a '", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "                return new object[0];\n\n                return new object[0];\n            }\n        }\n    }\n}", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "        x_along_axis = axis_proj[0] * x[1] + axis_proj[1]\n    else:\nNext line of code:\n        x_along_axis = axis_proj[0] * x[1] + axis_proj", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "\n// try\n// {\n//     form.RightToLeft = RightToLeft.Yes;\n//     form.RightToLeftLayout = true;\n// Next line of code:\n\n// try\n// {\n//     form.RightToLeft = RightToLeft.Yes;\n//", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "\n    def _get_g(self):\n        return _app_ctx_stack.top.g\n\nThis is a function that is used to get the current application context.  The\n`Next line of code` is used to get the current application context.  The\n`Next line of", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "\n            var arr = (JArray)obj.Properties[0].Value;\n            for(int i=0;i<18; i++)\n            {\n                Assert.That(arr.Items.Count, Is.EqualTo(1));\n                arr = (JArray)", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "\n\nif __name__ == '__main__':\n    unittest.main()", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "# OBD_PID1C(OBD_Packet):\n# This line of code:\n# OBD_PID1C(OBD_Packet):\n# This line of code:\n# OBD_PID1C(OBD_Packet):\n# This line of code", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "                    alphaLevel = rampDown ? 255 : 0;\n\nNext line of code:\n                    inRamp = rampDown ? 255 : 0;\n\nNext line of code:\n                    repaint();\n                }\n                long current =", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "\n        return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_internal, m_query, m_anchor, m_type, m_internal);\n\nNext line of code:\n\n        return new CmsLink(m_structure", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                for (int w = 0; w < width; w++) {\nNext line of code:\n                edges.add(new T2<String,String>)(new T2<String,String>)(edges.get(h).getTopic(),edges.get(h).get", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "                    i += ((b & 0x08) << 2);\n\nNext line of code:\n                    i += ((b & 0x04) << 1);\n\nNext line of code:\nNext line of code:\n                    i += ((b & ", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "\n    response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ###################################------------------------------------------------------------------------------------------------------------------------------------------------", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "\n// Container child BlinkStickClient.CpuEditorWidget.Gtk.Container+ContainerChild\n\n// Container child BlinkStickClient.CpuEditorWidget.Gtk.Container+ContainerChild\n\n// Container child BlinkStickClient.CpuEditorWidget.Gtk.", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "\n\t\treturn performDownload();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "                    vertices[x] = new Vector3f(vertices[x], 0, 0, 0);\n\n                else {\nNext line of code:\n                    vertices[x] = new Vector3f(vertices[x], 0, 0, 0", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "\n            this.AutoSaveEditBoxGroup.Controls.Add(this.btnSetFile);\n            this.AutoSaveEditBoxGroup.Controls.Add(this.txtAutosave);\n            this.AutoSaveEditBoxGroup.Controls.Add(this.lblAutosaveFile);\n", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "\n//\n//\n// System.Web.UI.WebControls.FontUnit.cs\n//\n//\n// System.Web.UI.WebControls.FontUnit.cs\n//\n// System.Web.UI.WebControls.FontUnit.cs\n//\n// System.Web.UI", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "                adminUser = Transactions.find(new User(owningAccount.getOwnerCanonicalId()));\n\nThis line of code is used to get the user that created the object.\n\nNext line of code:\n\n            osgObject.setOwnerCanonicalId(owningAccount.", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "                    lastUser = r[\"CreatedBy\"].ToString();\n\n// next line of code:\n            Users.Add(lastUser);\n        }\n            // send emails for each user\n            foreach (string user in Users)\n            {\nNext line of code:\n            SendEmailForUser", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\nif (value instanceof SortObject)\n\nis commented out. \n\nNext line of code:\n\nif (value instanceof SortObject)\n\nis commented out.\n\nNext line of code:\n\nif (value instanceof SortObject)\n\nis commented out.\n\nNext line of", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "\n# new\n\nds = dclab.new_dataset(ddict)\nds.config[\"setup\"][\"flow rate\"] = 0.16\nds.config[\"setup\"][\"channel width\"] = 30\nds.config[\"setup\"][\"temperature\"] = 23.0", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n\nanswers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\n    def __init__(self):\n    \"\"\"An object to store a payload requirement with info about its reasons.\n    For each requirement multiple reasons together with their strength\n    can be stored in this object using the add_reason method.\n    A reason should be just a string with description (ie for", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\n            OpenGL.glDeleteFrameBuffer(frameBuffer);\n\nis not in OpenRA, but in OpenRA.\n\nNext line of code:\n\n            OpenGL.glDeleteTexture(texture);\n\nis not in OpenRA, but in OpenRA.\n\nNext line of code", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "    #SouthernHemisphere; //1 for southern hemisphere, 0 for northern hemisphere\n    x = easting - 500000.0 #remove 500,000 meter offset used for longitude\n    y = northing\n", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        if (showDateData.equals(\"true\") || showDateData.equals(\"search\", \"search\", \"\")) {\nNext line of code:\n        result.add(\"date created\");\nNext line of code:\n        result.add(\"date last modified\");\nNext line of code:\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\n    public class Food\n    {\n        public Food( int amount )\n        {\n            this.Weight = amount;\n            this.FillFactor = 0;\n        }\n    }\n\nNext line of code:\n\n    public class Food\n    {\n        public Food(", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                temp >>= MAXIMUM_NO_OF_DIGITS;\n\n//Coding error, should never happen as far as I can see\n        if (arr[i] < 0)\n        {\n            arr[i] = (byte) 0;\nNext line", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "\t\t00002000000000000000000000000000999999999999999999999999999999", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "            // TODO: 1.  The event should be raised when the selected folder changes.\n            // 2. The event should be raised when the selected folder changes.\n            // 3. The event should be raised when the selected folder changes.\n            // 4. The event should be raised", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "\n# This is a test suite for the parser engine.\nmake_test_suite('test_parser', 'testsuite', 'test_model', 'test_model')\nrun_test_suite('test_parser', 'test_parser', 'test_model', 'test_model')", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "//\tmb.SetBody(TypeInitializer.Initializer.GetInitializer(this, mb);\n//\n//\tpublic override TypeInitializer GetTypeInitializer()\n//\t{\n//\treturn new TypeInitializer(this, this.DefineTypeInitializer());\n//\n//", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "            value = createHTMLView(c, text);\nNext line of code:\n            c.setClientProperty(BasicHTML.propertyKey, value);\nNext line of code:\n            c.setClientProperty(htmlDisable, htmlDisabled);\nNext line of code:\n            c.set", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "            if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "                        if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\tyield return;\n\t\t\n\tyield return;\n\t\t\n\tyield return;\n\t\n\tyield return;\n\t\nNext line of code:\n\tyield return;\n\t\nNext line of code:\n\tyield return;\n\t\nNext", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "\n        invocationQueue.removeFirst();\n\nThis line of code is not correct. It should be:\n\nNext line of code:\n\ninvocationQueue.removeFirst();\n\nThis line of code is correct. It should be:\n\nNext line of code:\n\ninvocationQueue", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "            // if there are no validation errors, save data\n            if (VerificationResultCollection.Count == 0)\n            {\n                // if there are no validation errors, save data\n                }\n            else\n            {\n                // if there are validation errors, display a warning", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "\n//\t0010000000000000000000000000000000000000099999999999999999999", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\n\n                // widen to short\n                path.Clear();\n                path.Add(compiledWindow);\n                env.EplToModelCompileDeploy(\"create index MyInfraWIndex2 on MyInfraW(f2, f1)\", path)\n", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n        final LocalTripleStore expected = new LocalTripleStore(args[0]);\n        final LocalTripleStore actual = new LocalTripleStore(args[0]);\n        \nNext line of code:\n\n        log(\"expected: \" + expected);\n        log(\"actual: \"", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\n\t\tget {\nNext line of code:\n\n\treturn dataDir;\nNext line of code:\n\n\treturn dataDir;\nNext line of code:\n\n\treturn dataDir;\nNext line of code:\n\n\treturn dataDir;\nNext line of code:\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n                from.SendGump(new InternalGump(from as PlayerMobile, this));\n\nNext line of code:\n\n                from.SendGump(new InternalGump(from as PlayerMobile, this));\n\nNext line of code:\n\n                from.Send", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "    s = create(filename, contents=content)\n    assert not s.name_is_non_test\n    assert s.name_is_testharness\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\n        if self._dynamic_error_algorithm == \"iterative\":\n            return self._project_cov_mat(\n                self.x_data_error, self.y_data_error, self.x_model, self.parameter_values)\n\n        else:\n           ", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "\n    if not res['OK']:\n      gLogger.error( \"Failed to obtain transformation problematics\", res['Message'] )\n      return res\nNext line of code:\n\n    if not res['Value']:\n      res = self.transClient.setTransformationParameter(", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\n\treturn get(x, y, width, height, 0.0, 0.0, fill, anchor);\n\nNext line of code:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "                self.pytest_con = py_test_base.PytestBase(py_test_base, pytest_con, sprout_appliances)\nNext line of code:\n                self.pytest_con.py_test_base(py_test_base", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r3 =\n            new ImmutabilityTemplateCollector().visit(r1, r2);\n            return r3;\n        }\n    }\n    /**\n     * A", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "        // The following is enough since the validation is mocked out anyway. Just want to make sure the flow in CDA is correct.\n        // Full test for the scenarios is done in the inherited class.\n        final ImportVmTemplateParameters parameters =\n                new ImportVmTemplateParameters(Guid", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "    'BibxxxMixin',\n    'BibrecBibxxxMixin',\nNext line of code:\n    'models',\nNext line of code:\n    'models',\nNext line of code:\n    'models',\nNext line of code:\n    'models',", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "\t\t\tmapping.SqlLoader = new HbmSqlLoader(namedQueryReference);\n\t\t\tmapping.SqlLoader.NamedQueryReference = namedQueryReference;\n\tNext line of code:\n\tmapping.SqlLoader.Load(namedQueryReference);\n\nNext line of code:\n\t", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "Add(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n// Page 2:\nNext line of code:\nAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\n      object.ReferenceEquals(prototype.ChannelId, null);\n\nThis line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n\nNext line of code:\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                if (phi) {\n                    ValuePhiNode result = ValuePhiNode.create(merge);\n                result.setStamp(merge);\n                result.setLocationIdentity(key);\n                result.setValue(value);\n                result.setPhi(", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "\n\t\t} catch (URISyntaxException e) {\n\n\t// FIXME what about /downloads/ /friends/ etc?\n\t// Allow access to Library for searching, form passwords are used for actions such as adding bookmarks\n\tif(action.equals(\"/library/\"))", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "        Height = GetBestHeight();\n        Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //----------------------------------------------------------------\n    protected override void OnFontChanged(EventArgs e)\n    {\n      if (m_autoHeight)\n      {\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "\n# Phase 4.  This processes each unique or distinct call_signs ie each group of flights for a call_sign\n# SELECT DISTINCT call_signs FROM flight_log\n# rows = cursor.fetchall()\n# for call_sign in rows\n# for i", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "\n        self.module.remove(username, domain)\n\nis commented out because it is not used in DummyBackend.\n\nNext line of code:\n\n        self.module.remove(username, domain)\n\nNext line of code:\n\n        self.module.remove(username", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n# CallbackModule.v2_playbook_on_play_start\n\nThis is the callback module that is called when Ansible is running a playbook.\n\nThe callback module is called when Ansible is running a playbook.\n\nThe callback module is called when Ans", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "                stream.Read (buffer, 0, buffer);\n\n                // Adding file content as blob/byte[] into args.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n    /*\n     * Loads a file and appends as", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n        # check_single_build and check_single_build_legacy differ in two things:\n    #   * the callback used\n    #   * the expected result\n    @defer.inlineCallbacks\n    def check_single_build_deferred(self, buildResult, verified", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "\n            int size = SizeHeightToFitWithFitToFitWithMin (min);\n\n\nNext line of code:\n\n            return size;\n\n\nNext line of code:\n\n            return SizeHeightToFitWithFitToFitWithMin (min);\n", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "            if (bugAnnotation.getCategory() != null) {\n                assert false;\n            }\nNext line of code:\n            if (bugInstance.getPrimarySourceLineAnnotation() != null) {\n                assert false;\n            }\nNext line of code:\n            if (", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\n// null safe get of disassembledValues\n\n            for (int j = 0; j < disassembledValues.Length; j++)\n            {\n                object propValue = disassembledValues[j];\n                if (InitializeLazyProperty(fieldName, entity,", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "            _engine.Memory.Map.Cartridge.Mapper16 = _engine.Memory.Map.Cartridge.Mapper16;\n            _engine.Memory.Map.Cartridge.Mapper16.latch1 = _engine.Memory.Map.Cartridge.Mapper", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\n# TODO: this entire approach is pointless and broken because when multiple processes\n# append to the same file, the result is broken corruption.\ndef update_zpool_active_log():\n    \"\"\"\n    Update log file showing which ZFS filesystems are mounted, which is used by the", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
