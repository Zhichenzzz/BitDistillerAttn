{"pred": "\n    def _get_edge_data(self, graph, u, v, key, data):\n        if u in self.graph.nodes():\n            return self.graph.get_edge_data(u, v, data)\n        else:\n            return None\n\n    def", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "\t\tif ( m_Participants[i].IsOneVsOne() )\n\t0.0.000000000000099999999999999999999999999", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\n    # TODO: Check the return value of the read/write functions\n    #\n    # Test the read/write functions for the different formats\n    #\n    # Test the read/write functions for the different formats\n    #\n    # Test the read/write functions for the different formats\n", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "\n    def _get_question_from_answer(self, answer):\n        #print(answer)\n        #print(answer)\n        #print(answer)\n        #print(answer)\n        #print(answer)\n        #print(answer)\n        #print(answer", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "\n    public static void main(String[] args) {\n        try {\n            // TODO: 1st line of main() should be a comment\n            // (see the comment in the code)\n            //\n            // TODO: 2nd line of main() should be a comment\n           ", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "\n            if (mob.Location == 1)\n            {\n                if (mob.Location == 1)\n                {\n                    mob.Location = 1;\n                    mob.Location = 1;\n                }\n            }\n            else\n            {\n", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "            throw new SpaceError(\"No space for \" + name);\n        }\n        return sp;\n    }\n    public static void main (String[] args) {\n        try {\n            // Create a new space\n            JESpace space = new JESpace(\"test\", \"test\",", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "    # return WSDL response\n    return self.server.wsdl(environ, start_response)\n\ndef do_get(self, environ, start_response):\n    # return WSDL response\n    return self.server.wsdl(environ, start_response)", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "\t//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "    # https://github.com/racker/python/bin/\n    # https://github.com/racker/python/bin/\n    # https://github.com/racker/python/bin/\n    # https://github.com/racker/python/bin/\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "\t0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "\n    # Create a new encoder\n    encoder = self.create_encoder(\n        data_handler=self.data_handler,\n        error_handler=self.error_handler,\n        event_loop=self.__event_loop,\n        settings=self.settings.fl", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\n    // Get the field's value\n    String fieldValue = field.getValue();\n    // Get the message\n    String msg = getMessage(fieldValue, (ValidatorAction) field.getAction());\n    // Get the field's arguments\n    String[] args = field.getArgs", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\n                if ( from.IsValidTarget( from ) )\n                {\n                    m_Owner.Caster.DoBeneficial( from );\n                }\n            }\n        }\n    }\n}", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n    for(Map.Entry<String,List<InstanceKey>> entry : name2Name.entrySet()) { \n        final String fieldName = entry.getKey();\n        final List<InstanceKey> named = entry.getValues();\n        field2Name.put(entry.getKey(),", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "        \"\"\"Finalize the loaded states of all :class:`.Session`\n        \"\"\"\n        for state in self.binds:\n            if state.bind():\n                state.bind(state.base_mapper)\n        for t in self.binds:\n            if state.", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "            if (mod >= 151 && mod <= 155)\n            {\n                // = GetNameForAttribute(AosWeaponAttribute.HitLowerAttack);\n                // = GetNameForAttribute(AosWeaponAttribute.HitLowerAttack);\n              ", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "    \"\"\"\n    def _has_stream_request_body(self):\n        if not self._stream_request_body:\n            raise TypeError(\"expected subclass of RequestHandler, got %r,\n                # but not @gen.coroutine).\n    return self._stream_", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\n    def _download(self, lat1, lat2, lon1, lon2):\n        \"\"\"\n        Download the data from the given latitude and longitude.\n        \"\"\"\n        if len(self.div_map) != 0:\n            return self.div_map[", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "        self.assert_publish_state(self.problem_usageKey, PublishState.public)\n        self.assert_publish_state(self.problem_usageKey, PublishState.private())\n        self.assert_publish_state(self.problem_usageKey, Publish", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "    # Get the build for the platform\n    build = builds[0]\n    if build.get('os_android', 'android'):\n        build = build['os_android']\n    if build.get('os_android', 'android'):\n        build = build['os_android',", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t00:00:00.000000000000000000009999999999999999999999999999999999", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "            var result = new List<string>();\n            for (int index = 0; index < argumentSyntaxes.Count(); index++) {\n                var argument = argumentSyntaxes[index].GetValue();\n                result.Add( argument.ToString());\n            }\n            return result;", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "            for (int k = 0; k < longTag.Length; ++k) {\n                if (longTag.Get(k) == 0) {\n                    if (longTag.Get(k) == 0) {\n                        tmp.Add(longTag.", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "\n    public static void main(String[] args) {\n      EmojiProvider provider = new EmojiProvider(new Context());\n      provider.getEmoji(provider.getEmoji(0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "# TODO: Add support for more than one policy\nclass NodeManagePolicies(CFMENavigateStep):\n    VIEW = NodeManagePoliciesForm\n    prerequisite = NavigateToSibling('Details')\n    def step(self, *args, **kwargs):", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "                base.RenderControl(writer);\n            }\n            else\n            {\n                if (Enabled)\n                {\n                    writer.Write(\"<img src='\" + ImageUrl + \"?random=\" + Random.Next(0, 10000000", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n    return \"Effect\";\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "\ndef _plot_waveform(self, ind, ref_ind):\n        \"\"\"\n        Draw waveform 2D plot.\n        :param ind: Index of waveform\n        :param ref_ind: Reference index\n        :param cmap: Color map\n        :param alpha:", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "\n# Testing the delta_recursive_deltas\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "                if (rootFolder.IsDirectory)\n                {\n                    _scanDebouncer.Execute(rootFolder, true);\n                }\n                else\n                {\n                    _scanDebouncer.Execute(rootFolder, false);\n                }", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t000000000000000000000000000000000000000000000999999999999999999", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "\n\n    def get_newcomments(self):\n        if self.request.has_key('comcynapsecynincontextUID'):\n            uid = self.request['comcynapsecynincontextUID]\n        else:\n            uid = self.request['comc", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "\n//                    m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": voice not enabled for parcel,\n//                      scene.RegionInfo.RegionName", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "    # If the user is an admin, then we can create a group\n    if user.is_admin():\n        return {'success': True}\n    # If the user is not an admin, then we can create a group\n    return {'success': False, 'msg': _('User %", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "            var result = new SearchResults();\n            foreach (var segment in segments)\n            {\n                result.Add(segment.GetHashCode());\n            }\n            return result;\n        }\n        #endregion // Search\n        #region Fields\n        private int count;\n       ", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "        # Read the next line.\n        next(file_handle)\n        # Create a data array to hold the data for each column.\n        data_arrays = _read_data_arrays(file_handle,\n                                           header['Number of field cols'] + 1", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "\n        // check if the studyFormName is the same as the one in the sample\n        if (accessionNumber.equals(sample.getSampleNumber())) {\n            return true;\n        }\n        // check if the studyFormName is the same as the one in the sample\n        if", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\n// assigning confidences\nfor (int i = 0; i < numberOfLabels; i++) {\n\n// assigning confidences\nfor (int j = 0; j < numberOfLabels; j++) {\n\n// assigning confidences\nfor (int i", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "\n    public static void main(String[] args)\n    {\n        CatsReferralPendingEmergencyNonEDIListVo collection = new CatsReferralPendingEmergencyNonEDIAdmissionListVoCollection(new int[] { 1, 2, 3,", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "\n//    public static int[] ind2sub(ILArray<int16>   A, int seqindex) {  \n//    if (object.Equals(A,null) || A.IsEmpty)\n//        return new int[0]; \n//        int [] ret = new", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "   return offset + 1;\n            }\n   else\n   if (Character.IS_OTHER_PUNCTUATION_MARK) {\n      return -1;\n    }\n    return -1;\n  }\n  static class PropZ extends AbstractCharNode {\n     ", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t//\n\t// 1. Create a new instance of the AI module.\n\t//\n// 2. Create a new instance of the AI module.\n//\n// 3. Create a new instance of the AI module.\n//\n// 4. Create a new instance of the AI", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\t0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n2", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "\n    self.login(self.user)\n    self.check_can_see_edit_page(self.user)\n    self.check_can_see_edit_page(self.user, 'cobrand')\n    self.check_can_see_edit_page", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "  return S_ERROR( \"Missing plot name!\" )\n  #Get plotname\n  if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n  #Get plotname\n  if not 'typeName' in pD:\n    return", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\ndef updateStatus(self):\n\tself[\"status\"] = self.getStatus()\n\tself[\"status\"] = self[\"status\"]\n\tself[\"status\"] = self[\"status\"]\n\tself[\"status\"] = self[\"status\"]\n\tself[\"status\"] = self[\"status\"]\n", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"http://www.voltdb.org/voltdb/plan/plan/generate\");\n            String url = url.getURL();\n            String[] args = url.getParameters();", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "    return results;\n  }\n  /**\n   * Load a comma-separated list of strings from Properties.  The list cannot include any whitespace.\n   */\n  public static String[] getStringArray(Properties props, String key) {\n    String[] result = new String[", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "\t\n\t//\n\t//\n\t//\n\t//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "            if (currPacket.FrameModified)\n            {\n                toolStripButtonCopy.Enabled = true;\n            }\n            toolStripButtonCopy.Text = currPacket.FrameModified.ToString();\n            toolStripButtonCopy.Visible = true;\n        }\n        private void toolStrip", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "    #print \"{}\".format(result)\n    #print \"Result is\", result\n    #print \"Result is\", result\n    #print \"Result is\", result\n    #print \"Result is\", result\n    #print \"Result is\", result\n    #print \"Result is\", result", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\n    public class RefCountedSet<TK, int>\n    {\n        private bool _hasNullEntry = false;\n        private int _numValues = 0;\n        private Dictionary<TK, int> _refSet;\n        private int _numValues;\n        private", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "                return fCode;\n            }\n        }\n        \n        /** Returns the height of the barcode.\n        */    \n        public int GetHeight() {\n            return barHeight;\n        }\n        \n        /** Returns the width of the barcode.\n        */    \n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "    def __init__( self, func, dll,\n        resultType = None, argTypes = (),\n        doc = None, argNames = (),\n        extension = None,\n        deprecated = False,\n    ):\n        \"\"\"Create a base function for given name\n        \n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n    def test_tri_polar_interpolation_cube(self):\n        # Test a simple, axis-aligned trajectory.\n        test_cube = traj_interpolate(\n            self.cube,\n            [\n                {\"grid_longitude\",", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "                    break;\n                }\n                if (inRamp)\n                {\n                    if (alphaLevel > 0)\n                    {\n                        alphaLevel -= 0.01f;\n                    }\n                    if (alphaLevel < 0)", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "\nimport numpy as np\nimport matplotlib as plt\nfrom scipy.io.mpl import load_wav\nfrom scipy.io.mpl import get_timbre_pitches_loudness\nfrom scipy.io.mpl import get_raw_", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n    if (session.LogicSettings.RandomRecycleCount > 0)\n    {\n        var rnd = rnd.Next(-1 * session.LogicSettings.RandomRecycleValue + session.LogicSettings.RandomRecycleValue + 1);\n        if (r", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "            this.treeView1.ImageIndex = 1;\n            this.treeView1.Name = \"\";\n            this.treeView1.Text = \"Dummy Solution Explorer\";\n            this.treeView1.ImageIndex = 1;\n            this.treeView1.Text", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "            }\n            lo[0] = i;\n        }\n    };\n    /**\nanswers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n            //@\n", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n            // \n            // lblTimeOut\n            // \n            this.lblTimeOut.AutoSize = true;\n            this.lblTimeOut.Location = new System.Drawing.Point(178, 128);\n            this.lblTimeOut.Name =", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "    f=open(config_file, 'w')\n    f.write('# IMAGE FILLS\\n')\n    f.write(' ', str(ParamDict[i]))\n    f.writelines(['A) ', str(ParamDict[i][1], '0'))\n   ", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\nclass IResourceFossil(IResourceMinimalFossil):\n    def getId(self):\n        \"\"\" Material Id \"\"\"\n    def getTitle(self):\n        \"\"\" Material Title \"\"\"\n    def getDescription(self):\n        \"\"\" Material Description \"\"\"\n    def getResourceList", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "\n    def _course_location(self):\n        return self._course_location\n\n    def _course_location(self):\n        return self._course_location\n\n    def _course_location(self):\n        return self._course_location\n\n    def _course_location", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\n    public static void main(String[] args) throws Exception {\n        try {\n            QueryDispatcher dispatcher = new QueryDispatcher(new AxiomScripting.Application(), \"axiom.scripting.rhino.QueryDispatcher\");\n            dispatcher.setName(\"axiom", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "\n# \"else\":\n#    return 1, \"Meter not found\"\n\n# In order to delete the meter we need its id\ndef delete_meter(module, name, apiid, apikey):\n    meter_id = get_meter_id(module, name", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "\tfor (int i = 0; i < emotions.length; i++) {\n\tif (emotions[i][0].equals(currentEmotion.name())) {\n\tsum += emotions[i][0].floatValue();\n\t}\n\treturn sum;\n    }\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "    if phi1 > 0:\n        if phi1 > 0:\n            return 'E'\n        else:\n            return 'W'\n    else:\n        if phi1 > 0:\n            return 'S'\n        else:\n            return 'N", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "        self.ui_log.info(\"Running plugins ...\")\n        for plugin, plug in self.loaded_plugins:\n            if not plugin.get_enabled():\n                self.ui_log.info(\" %s %s\" % (plugin,\n                reason, \"plugins", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "            e.printStackTrace();\n        }\n        }\n        importButton.setEnabled(true);\n        importButton.setEnabled(false);\n        importButton.setEnabled(true);\n        importButton.setEnabled(false);\n        importButton.setEnabled(true);\n        import", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\n    def __init__(self):\n        self.form_name = \"Product Add Series\"\n        self.form_name = \"Product Add Series\"\n        self.form_name = \"Product Add Series\"\n        self.form_name = \"Product Add Series\"\n        self.", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\n    public static void main(String[] args) {\n        // This is a sample application that uses the Facebook SDK to\n        // manage the login process.\n        //\n        // The sample application is a simple application that uses the Facebook SDK to\n        // manage the login process.\n", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "                temp = temp >> 8;\n            }\n            return arr;\n        }\n    }\n    /**\n     * @return the number of bytes required to write the number\n     */\n    public int getSize()\n    {\n        return (int) (size + 1", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "\n# Testing the get_property()\n\ndef test_get_property(self):\n        # read and parse sample\n        self.build = BuildJob(constants.TEST_SAMPLE_TIMESTAMP_FILE)\n        # test dict\n        self.assertDictEqual({\n           ", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "            return new object[0];\n            return new object[0];\n            return new object[0];\n            return new object[0];\n            return new object[0];\n            return new object[0];\n            return new object[0];\n            return new object[0];\n", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "\n    self.listen()\n    self.listen()\n    self.listen()\n    self.listen()\n    self.listen()\n    self.listen()\n    self.listen()\n    self.listen()\n    self.listen()\n    self.listen()\n    self.", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\n#if (KPTrl.IsTranslated)\n\t{\n#if (m_props.RightToLeft)\n\t{\n#if (m_props.RightToLeft)\n\t{\n#if (m_props.RightToLeft)\n#if (m", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "\n    def __exit__(self):\n        # This is a hack to make sure that the request context is not\n        # destroyed when the application is stopped.\n        if self.app is not None:\n            self.app.pop_app_ctx()\n\ndef _get_g(", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "    def __init__(self, config):\n        self.config = config\n        self.config_file_args = {}\n        self.post_processors = {}\n        self.result_file_name = 'results.txt'\n        self.pickle_file_name = '", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "            if (resourceEntityForRelease(resourceEntity, release)) {\n                return resourceEntityForRelease;\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getConsumedRelatedResourcesByResourceTypeDefinition(ResourceTypeDefinition resourceTypeDefinition, Set", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "\n# This is a test\n\n# This is a test\n\n# This is a test\n\n# This is a test\n\n# This is a test\n\n# This is a test\n\n# This is a test\n\n# This is a test\n\n# This is a test\n\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\n    def _get_season(self, season):\n        if season:\n            return season\n        else:\n            return None\n    def _get_episode(self, season):\n        if season:\n            return season\n        else:\n            return None\n    def _", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\n    this.AddCraft(typeof( SummonFamiliarScroll ), Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk, Reg.NoxCrystal, Reg.PigIron );\n    this.AddSpell( typeof( SummonF", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\t000000000000000000000000000000000000000000000000000002222222222", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\n    # All the pub/sub consumers.\n    #\n    # All the pub/sub consumers.\n    #\n    # All the pub/sub consumers.\n    #\n    # All the pub/sub consumers.\n    #\n    # All the pub/sub consumers.\n   ", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "                for (int i = 0; i < width; i++) {\n                    if (edges[i].get(0).equalsIgnoreCase(\"\")) {\n                        break;\n                    }\n                    if (edges[i].get(1).equalsIgnoreCase(\"\")) {", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "    # Compute angles\n    theta = np.arctan(dx / (src_radius + det_radius))\n    theta_lower = theta * (theta - n_half_rot * np.pi) / (2 * np.pi)\n    theta_upper", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "        \n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "\n    def _get_model_errors(self, x_model, y_model):\n        return self._data_container.get_model_errors(x_model, y_model)\n    def _get_model_errors_inference(self, x_model, y_", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "\n    # Get the data\n    i1 = iso.get_default()\n    data = i1.get(col1=\"volume\",\n                        col2=\"deform\",\n                        channel_width=25,\n                        flow_rate=0.04,\n", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "  // Get the owner of the bucket\n  // \n  // Get the owner of the bucket\n  // \n  // Get the owner of the bucket\n  // \n  // Get the owner of the bucket\n  // \n  // Get the owner of the bucket\n  // ", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "\n    def test_check_for_alert_sets_with_no_matching_zone_and_subscriptions(self):\n        history = [{'name': 'Sub for 1a',\n                     'threshold':'0.05',\n                     'region':'us", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\n    public static void main(String[] args) {\n        try {\n            doTest(isImportNameValid(name));\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n    private static void testDoNotValidateName(", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "\n    public static void main(String[] args) {\n        CmsLinkInfo info = new CmsLinkInfo(\n            CmsUUID.getUUID(\n                \"http://www.opencms.org/cms/cms.html\"),\n            \"http://www.", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "\nanswers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "            _selectedFolderChanged += new EventHandler(this.SelectedFolderChanged);\n        }\n        public event EventHandler SelectedFolderChanged\n        {\n            _selectedFolderChanged += new EventHandler(this.SelectedFolderChanged);\n        }\n        public event EventHandler SelectedFolderChanged\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "\n    public static void Main() {\n        // TODO: Implement this method\n        // TODO: Implement this method\n        // TODO: Implement this method\n        // TODO: Implement this method\n        // TODO: Implement this method\n        // TODO: Implement this method\n        // TODO: Implement this method", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "\n    public String getDefaultType() {\n        return m_defaultType;\n    }\n    /**\n     * Returns the default type of the document.\n     *\n     * @return the default type of the document\n     */\n    public String getDefaultType() {\n        return m", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\n// This is a workaround for the fact that the compiler does not allow us to use the 'new' operator on a generic type parameter.\n\n// This is a workaround for the fact that the compiler does not allow us to use the 'new' operator on a generic type parameter.\n\n//", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "        int height = GetLargeTextSizeF();\n        if (height > 0)\n        {\n          e.Graphics.FillRectangle(new Rectangle(new Point(LEFT_MARGIN + imgArrow1.Width + 5, TOP_MARGIN + (int)(", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "    }\n    public static void setQuadColor(QuadMesh mesh, int index) {\n        mesh.setColor(index, 0, 0, 0);\n    }\n    public static void setQuadColor(QuadMesh mesh, int index,\n            int r", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "\t//var d = new List<string>();\n\t//var d = new List<string>();\n\t//var d = new List<string>();\n//\tvar d = new List<string>();\n//\tvar d = new List<string>();\n//\tvar d = new List<string", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "                // Reading file content into buffer.\n                stream.Read (buffer, 0, stream.Length);\n\n                // Converting buffer into a byte array.\n                var bytes = new byte [buffer.Length];\n                for (int i = 0; i", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "\n    // get the email address of the user\n    string email = \"\";\n    if (r[\"EmailAddress\"] != null)\n    {\n        email = r[\"EmailAddress\"];\n    }\n    else\n    {\n        email = \"Unknown\";\n    }\n    // get the", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "            // get data from the user\n            PcConferenceRow ARow = FMainDS.PcConference.Rows.Find(new object[] { FPartnerKey, Discounts[i, 3]);\n            // get the name of the venue\n            string VenueName =", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "            bugInstance.getBugCategory();\n            if (bugInstance.getBugCategory() == BugCategory.BUG_NOT_FOUND) {\n                if (bugInstance.getBugCategory() == BugCategory.BUG_NOT_FOUND) {\n                    System.out", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\n    def __init__(self, requirements):\n        self._apply_called_for_all_requirements(requirements)\n        self._apply_called_for_all_requirements(requirements)\n        self._apply_called_for_all_requirements(requirements)", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "            if (Menu.GetBool(\"KillSteal\") && R.IsReady())\n            {\n                var target = R.GetSelectedTarget();\n                if (target.Check(R.Range))\n                {\n                    SpellManager.Predict(R, target", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\n// From Banshee.Base.Application\n//\n//    public string DataDirectory {\n//        get {\n//            return dataDir;\n//        }\n//    }\n//\n//    public string GetDataDirectory ()\n//    {\n//        return dataDir;\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n        # 12, 36, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "\npublic class CheeseWheel : Food\n{\n\t[Constructable]\n\tpublic CheeseWheel() : base( 1 )\n\t{\n\t0.1;\n\tpublic CheeseWheel( int amount ) : base( amount, 0x9B7 )\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\n            // create index\n            var index = new RegressionPath();\n            var stmtTextCreate = namedWindow\n            : \"create window MyInfraCIIndex on (f1, f2, f3, f4) select TheString, IntPrimitive, '>'||TheString||s", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "\n    def test_wrong_field_name_inside_model(self):\n        \"\"\"JSONAlchemy - wrong field name inside model\"\"\"\n        tmp_file_4 = tempfile.NamedTemporaryFile()\n        config_4 = '''\n        title:\n            creator:", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_worker\n    assert not s.name_is_window\n    assert not s.", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\n    def __init__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n    \n    def __add__(self, other):\n        try:\n            other = float(other)\n        except:\n            return", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "            return;\n        }\n        if (text.length() == 0) {\n            return;\n        }\n        if (text.length() > 0) {\n            if (text.charAt(0) == ' ') {\n                return;\n            }\n           ", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\n    def check_pr(self, pr):\n        if not self.args['pr']:\n            print(\"You must specify a project\")\n            return\n        if not self.args['pr']:\n            print(\"You must specify a project\")\n            return\n        if not self", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "\n    public static void main(String[] args) {\n        try {\n            ImsVideoCallProvider provider = new ImsVideoCallProvider();\n            provider.setCallback(new ImsVideoCallBack());\n            provider.setCamera(new Camera());\n            provider.setPreviewSurface(", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "    return;\n    }\n    private static void pushInvocation(MethodInvocation methodInvocation) {\n        if (methodInvocation.getCaller() == null) {\n            return;\n        }\n        methodInvocation.setCaller(methodInvocation);\n    }\n", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "\n    @classmethod\n    def __init__(self):\n        self.db = db\n        self.db.connect()\n        self.db.autocommit = True\n        self.db.autocommit = True\n        self.db.autocommit = True\n        self", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "\n    public static void main(String[] args) {\n        // TODO: This code is not thread-safe, as it uses a static variable to store the value of the variable.\n        // This code is not thread-safe, as it uses a static variable to store the value of the variable.", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "\n            if (from.Map == Map.TerMur)\n            {\n                User.SendLocalizedMessage( 1019044, \"\", 0x22 );\n            }\n            else\n            {\n                User.SendLocalizedMessage( ", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "\n    def __init__(self, fpath=None):\n        \"\"\"\n        Convenience method that return the list of translated entries.\n        \"\"\"\n        _BaseFile.__init__(self, fpath)\n        _list = []\n        for entry in self.translated_entries():", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "    if username in self.domains:\n        self.module.set(username, 'sessions', set(self.module.get(username, domain)))\n    def remove_email(self, username, domain):\n    if username in self.domains:\n        self.module.", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\n\t\n\t\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\n\t//\n\t//\n\t//\n\t//\n\n\t//\n\t//\n\n\n\n\n\n\n", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "  if res['OK']:\n    return S_OK()\n  else:\n    gLogger.error( \"Failed to perform full integrity check for transformation %s\" % transID )\n  return S_OK()\n  ### ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\n  def test_empty_string(self):\n    self.assert_(self.empty_string == 'empty string')\n \n  def test_empty_string(self):\n    self.assert_(self.empty_string == 'empty string')\n \n  def test_empty", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "        #   'succeeded', \"succeeded\"]\n        #   'failed', \"failed\"]\n        #   'succeeded', \"succeeded\"]\n        #   'failed', \"failed\"]\n        #   \"succeeded\", \"suc", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "\nclass MATERIAL_PT_strandard(MaterialButtonsPanel, Panel):\n    bl_label = \"Standing\"\n    COMPAT_ENGINES = {'BLENDER_RENDERER', 'BLENDER_GAME_SURFACE_RENDER_", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "        return new ImmutabilityTemplateCollector();\n    }\n    /**\n     * A Helmutation Template for resolving immutability type variables\n     */\n    private class ImmutabilityTemplateCollector {\n        public ImmutabilityTemplateCollector() {\n            return new Immutability", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "            m_jTabbedPane1.setSelectedIndex(0);\n            m_jTabbedPane1.setTitle(\"Inspector\");\n            m_jTabbedPane1.setLocation(new java.awt.BorderLayout(0, 50));\n            m_jTab", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "            _vram_1 = _engine.MemoryMap.Map.CurrentMapper;\n            _vram_2 = _engine.MemoryMap.Map.CurrentMapper.CurrentMapper2;\n            _vram_3 = _engine.MemoryMap.Map.CurrentMapper.CurrentMapper.Current", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "//________________________________________________\n//________________________________________________----------------\n//________________________________________________------------------------------------------------________________\n//________________________________________________----------------________________----------------________________________________________________________________----------------________________----------------________________________________________________________________----------------________________----------------________________________________----------------________________________________----------------________________________________----------------________________________________----------------________________----------------________________________________----------------________________----------------________________----------------________________----------------", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "# Load the configuration file and load the pygments module\nload_pygments()\n\n# Load the configuration file and load the pygments module\nload_pygments()\n\n# Load the configuration file and load the pygments module\nload_pygments()\n\n#", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "\n    # Get the list of all announcements\n    announcements = Announcement.objects.all()\n    # Get the list of all the tags\n    tags = set(AnnouncementTag.objects.all())\n    # Get the list of all the tags that are not in the list", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "    print(f\"{time.time()}\")\n    print(f\"{time.time()}\")\n    print(f\"{time.time()}\")\n    print(f\"{time.time()}\")\n    print(f\"{time.time()}\")\n    print(f", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "#\n#    cursor.execute('''SELECT sdate, stime, edite, max_altitude, registration from flight_log WHERE src_callsign=?', (i,))\n#    print \"Row is: \", i, \" and has duration: \", duration,\n#    print", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "\n\"I'm not sure what you mean by that, but I'm sure it's not a good thing.\"\n\nBreak;\n\ncase \"shop_farm\":\n\nMsg(\"The farm is a place where you can buy food and other things.\"\n\nMsg(\"You can buy", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\n    // If the response code is 200, it's a success.\n\n    // If the response code is 404, it's a 404.\n\n    // If the response code is 500, it's a 500", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "\n    def __init__(self, task_data, host_data):\n        self.task_data = task_data\n        self.host_data = host_data.host_data\n        self.name = task_data.name\n        self.path = task_data.path", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "\n    def _get_inputs (self):\n        \"\"\"Get the list of files that would be installed if this command were actually run.\n        \"\"\"\n        inputs = []\n        for file in self.get_outputs():\n            if file.endswith('.py') and file.endsw", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\n    # Check if the file exists\n    if not os.path.exists(file_path):\n        raise AssertionError(\"File: \" + file_path + \" does not exist\")\n    # Check if the file is a file\n    if not os.path.is_file(", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\ndef _exec_job(self, job):\n    #print >> sys.stderr(\"job_id %s, job_log_number %s\" % (job['job_id'], job['job_log_number]))\n    if job['job_state'] == 'running':\n", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "            var obj = (object)item;\n            var type = obj.GetType();\n            if (type == typeof(Game.SFX.Interfaces.IHero))\n            {\n                var hero = (Game.SFX.Interfaces.IHero)obj;\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n// if (disassembledValues[0] != null)\n// we have a lazy property\n// and we have a second-level cache\n// we need to check if the second-level cache is a different one\n// and if it is, we need to check if the second-level cache", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "\n// If we have a harvestable cell, deliver it.\n// If we have a harvestable cell, deliver it.\n// If we have a harvestable cell, deliver it.\n// If we have a harvestable cell, deliver it.\n// If we have a harvestable cell, deliver it", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "\n            var model = new DelegateViewModel();\n            model.Id = id;\n            model.Name = \"New Delegate\";\n            model.Save();\n            return View(\"Form\",model);\n        }\n        // Add a relationship (DelegateEvent) between existing Deleg", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "\n    def handle_download(self, url):\n        res = self.load(url)\n        if res.status == 200:\n            self.logDebug(\"Download succeeded\")\n            self.logDebug(\"Downloaded %s\" % res.url)\n        else:", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "        return new EventBuilder(Event.newBuilder().setSeverity(Event.Severity.SEVERE));\n    }\n    @Override\n    public Event.Builder newEvent() {\n        return new EventBuilder(Event.newBuilder().setSeverity(Event.Sever", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "\n    # make sure the tftpboot is running\n    if not self.tftpboot_running():\n        self.logger.info(\"tftpboot not running\")\n        self.logger.info(\"rendering tftpboot images\")\n        self.pxe_build", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "            return new DicomAttributeSL(tag, bb);\n        /// <summary>\n        /// The Signed Integer VR.\n        /// </summary>\n        public static readonly DicomVr SIGNED = new DicomVr(\"SIGNED\", true, false,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "        self.failUnless(cdata.test_be(self.ZERO(4), 0))\n        self.failUnless(cdata.test_be(self.BEONE(4), 1))\n        self.failUnless(cdata.test_be(self", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "            if (stateIndex == 0)\n            {\n                goto EndLoop;\n            }\n            if (stateIndex == 1)\n            {\n                goto EndLoop;\n            }\n            if (stateIndex == 2)\n            {\n                goto EndLoop", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "\ndef add_stats_to_results(results):\n    for app_result_set in results:\n        stats = get_stats(results, app_result_set,\n                       first_repetition=None, last_repetition=None)\n        add_stats_", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "\n\tpublic static void on_button_delete_type_clicked (object o, EventArgs args)\n\t{\n\t}\n\n\tprotected virtual void on_button_delete_clicked (object o, EventArgs args)\n\t{\n\t}\n\n\tprotected virtual void on", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "\n\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "\n#\n\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "    public static void main(String[] args) {\n        final int arrayLength = 10;\n        final int array = new int[arrayLength];\n        for (int i = 0; i < arrayLength; i++) {\n            array[i] = i;\n        }", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "    \"\"\"\n    def test_empty(self):\n        \"\"\"\n        Check that empty tuple is not equal to the tuple which is\n        considered equal to the tuple which is passed to the function.\n        \"\"\"\n        self.assertFalse(EmptyTuple(emptyTuple()))\n    def test_empty", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\ndef _log_parse(args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    \"\"\"\n    # Accepts a string and returns a list of strings\n    string = str(string)\n    if not string:", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "  # Test the KNN classifier on sparse patterns\n  knn = KNNClassifier(k=3)\n  v = numpy.zeros((6, 2))\n  v[0] = [1.0, 0.0]\n  v[1] =", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "      i19 = i19 + 1;\n      i19 = i19 + 1;\n      i19 = i19 + 1;\n      i19 = i19 + 1;\n      i19 = i19 + 1;", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\nclass QDialog(QWidget):\n    def __init__(self):\n        self.setObjectName(\"QDialog\")\n        self.setObjectName(\"QDialog\")\n        self.setObjectName(\"QDialog\")\n        self.setObjectName(\"QDialog\")\n        self.", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...\n\n\t// ...", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "\n    #endregion\n    #region Lissan\n    Spells.Add(\n        new SpellData\n        {\n            ChampionName = \"Lissan\",\n            SpellName = \"LissanQ\",\n            Slot = SpellSlot.E,\n            Type =", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "        proc = subprocess.Popen(\n            ['/bin/somefile', 'b', 's', 'in', 'b', 's.m.desc'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\n    //if (player.isClientSide()) {\n    //    return 1;\n    //    return 2;\n    }\n    public int getShootingSpeed() {\n        //if (player.isClientSide()) {\n    //    return 1;\n   ", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "\nclass Object3DAspects(qt.QWidget):\n    def __init__(self, parent = None):\n        qt.QWidget.__init__(self, parent)\n        self.l = qt.QLineSlider(self,\n                        qt.QLineSlider", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "                  if (valueChoices.contains(value))\n                  {\n                     chosenObj = value;\n                  }\n                }\n            }\n            return result;\n        }\n    }\n    /**\n    * Returns the converted value that matches the input.\n   ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "                // 1. calculate the CRC\n                // 2. calculate the CRC\n                // 3. calculate the CRC\n                // 4. calculate the CRC\n                // 5. calculate the CRC\n                // 6. calculate the CRC\n                // ", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\n//create a new order\n//create a new order\n//create a new order\n//create a new order\n//create a new order\n//create a new order\n//create a new order\n//create a new order\n//create a new order\n//create a new order\n//create a", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "            return null;\n        }\n        return controller.getHyperlinkDetector();\n    }\n    public IHyperlinkDetector getHyperlinkDetector(\n        ISourceViewer sourceViewer) {\n        CeylonParseController controller = \n                getParse", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "\n    public class PermissionDeniedException extends PermissionDeniedException {\n        public PermissionDeniedException(PermissionDeniedException.class);\n    }\n\n    @Test\n    public void remove_all_aces() throws PermissionDeniedException {\n        SecurityManager mockSecurityManager", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\n    public static void Main( string[] args )\n    {\n        int x = 0, y = 0;\n        int x1 = 0, y1 = 0;\n        int x2 = 0, y2 = 0;\n        int x3 = ", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "\nclass XDRStruct(object):\n    __slots__ = ['vlan', 'mac_hi', 'mac_lo']\n    def __init__(self, vlan=None, mac_hi=None, mac_lo=None):\n        self.vlan = vlan\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "            if(type == PortalType.ActivitySummary) {\n                // TODO: This code is not complete\n                //TODO: This code is not complete\n                //TODO: This code is not complete\n                //TODO: This code is not complete\n                //T", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "//\n//\tpublic class ClientOperation\n//\t{\n//\tinternal class ClientOperationCollection :\n//\tSynchronizedCollection<IClientMessageFormatter>\n//\t{\n//\tpublic string Name {\n//\t\tget { return name; }\n//\tset {\n//\tThrow", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "    return json.dumps(\n        [\n            {\n                \"id\": item['id\"],\n                \"title\": item['title\"],\n                \"start\": item[\"range_start_unix\"],\n                \"end\": item[\"range_end_unix\"],\n", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "\n```\nVector3 primaryVector = new Vector3 (0, 0, 0);\nVector3 vector = new Vector3 (0, 0, 0);\nVector3 vector = new Vector3 (0, 0, 0);\nVector3 vector = new Vector3 (", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "\n    def _get_user_contact(self):\n        return self.request.POST.get(\"contact_id\", \".\")\n\n    def _get_contact_email(self, user):\n        return user.email\n\n    def _get_user_name(self, user", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "\n        //\n        // create a new thread to process the incoming data\n        //\n        Thread worker = new Thread(new Thread(\n            m_workerSocketList[i],\n            m_workerSocketList[i].EndReceive(),\n            m_workerSocketList[i].Begin", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "            // We need to check if the matrix is singular.\n            if (matrix.IsSingular())\n            {\n                throw new ArgumentException(\"Matrix is singular\");\n            }\n            // We need to check if the matrix is positive definite.\n            if (matrix.IsPositive", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "  print '  return new %s(%s)' % (bind_count, exec_count, optional_comma,\n  #  print '  ReturnType %s(%s%s) = 0;' % (bind_count, exec_count, optional_comma,\n ", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\n    # The following code is a workaround for the fact that the sample_counts\n    # are not necessarily in the correct order.\n    # This is a hack, but it works.\n    #\n    # The following code is a workaround for the fact that the sample_counts", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "\n\n        \n         final IBindingSet bs = new IBindingSet();\n         bs.addChild(new VarNode(\"subj\"), new VarNode(\"score\") );\n\n         final IBindingSet whereClause = new IBindingSet();\n         whereClause.addChild(new Statement", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\n  public static void Main(string[] args) {\n    // TODO: obtain from options or custom attributes\n    //\n    // TODO: compute an appropriate hash function\n    //\n    //\n    // TODO: compute an appropriate hash function\n    //\n    //\n    // TODO: compute", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "\n    def __init__(self, stream_id, flags=None, length=0):\n        self.stream_id = stream_id\n        self.length = length\n        self.frame_type = None\n        self.raw_flags = set(self.defined_flags)\n", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "\t\n\treturn new Apfloat(0, 1);\n\n\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "//\tm_maxSlope = m_maxSlope;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "\n\t        return _rootCause.ToString();\n    }\n    }\n    public override string ToString()\n    {\n        if (_rootCause != null)\n        {\n            return _rootCause.ToString();\n        }\n        else\n        {\n            return \"", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "\tNBTTagCompound nbtttagcompound = nbttagcompound.getCompoundTag(\"display\");\n\tif (nbttagcompound != null)\n\t{\n\t0\n\t}\n\t\n\treturn this.setColor(0x3333", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "            var b = cluster.BoundaryBox;\n            if (b.Width != 0 && b.Height != 0)\n                throw new ArgumentException(\"Invalid cluster\");\n        }\n        /// <summary>\n        /// Checks if the cluster is valid.\n        /// </summary", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "        // If the initializer is a reference to a field, then we need to\n        // check if the field is a field of a class that is not an\n        // @Unique.\n        // If it is not, then we need to check if the field is a field of a\n        //", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "//\t    public class FunctionItem\n//    {\n//        public string DocName { get; }\n//        public string MethodHeader { get; }\n//        public string ReturnType { get; }\n//        public string Type { get; }\n//        public string ReturnType { get;", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\n    # Test the case where the Rsync is not in the system\n    assert not command.invocation.read_list([\n        'synchronize', 'r', 'a', 'b',\n        'src', 'dst'],\n        shell=False, env=None,\n       ", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "            int max1 = max(max, min);\n            if (max1 < min) {\n              return true;\n            }\n            int min = min;\n            int max = max;\n            int start = min;\n            int end = max;\n            int start2 = start", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t// DbgManager_Dll.DbgManager_Dll_Main\n\t// DbgManager_Dll.DbgManager_Dll_Main\n\t// DbgManager_Dll.DbgManager_Dll_Main\n\t// DbgManager_Dll.D", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "  ##########################\n  # Create a list of all the bodies\n  # Create a list of all the bodies\n  # Create a list of all the bodies\n  # Create a list of all the bodies\n  # Create a list of all the bodies\n  # Create a list of all the", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "    from community.models import Community\n    from community.models import CommunityPage\n    from community.models import PermissionGroups\n    from community.models import Group\n    from community.models import CommunityPage\n    from community.models import PermissionGroups\n    from community.models import Community\n    from", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "    def get_required_module(self):\n        return self.get_module(self.get_module_descriptors())\n    def get_module(self, module_name):\n        for module in self.get_modules():\n            if module.get('name') == module_", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "    # This is a workaround for the case when the input is a scalar\n    # and the scalar is not a scalar.\n    if not has_scalar_constant(node.op.set_instruction):\n        return\n    # This is a workaround for the case when the input is", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "    # 1.\n    # 2.\n    # 3.\n    # 4.\n    # 5.\n    # 6.\n    # 7.\n    # 8.\n    # 9.\n    # 10.\n    # ", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "\n//        if(player.isSneaking()) {\n//            return true;\n//        }\n//        return false;\n//        if(player.isSneaking()) {\n//            return true;\n//        return false;\n//        return true;\n//    }", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "    run_sql(\"DROP TABLE bibrec_bibdoc_newdatamodel\")\n    run_sql(\"DROP TABLE bibrec_bibdoc_newdatamodel\")\n    run_sql(\"DROP TABLE bibrec_bibdoc_newdat", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\n    def _listen(self, target, value, collection_adpter):\n        \"\"\"Receive a 'collection dispose' event.\n        This event is triggered for a collection-based attribute, which\n        is the result of a :class:`.collection.linker` that will be", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "    for (int i = 0; i < exceptionDates.size(); i++) {\n      exDateList.add(exDateList.get(i));\n    }\n    return exDateList;\n  }\n  private static void generateExceptionDates(final EventDetail event)", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\n    def _get_axes_filtered_data(self):\n        axes = self.get_axes_filtered_data()\n        return axes\n    def _get_vlabels(self, data):\n        axes = self.get_axes_filter", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "            String containerName = (container == null) ? GlobalConstants.DEFAULT.ToString() : container;\n            // Derive the privilege this user has on the current container\n            String userName = request.getUserPrincipal().getName();\n            if (DaylightWebUtil.getContainerPrivilege", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "\n    public static void main(String[] args) {\n        OMEData ome = new OMEData();\n        ome.init();\n        List<String> l = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "\n        // The data is already in the correct order, so we can just return it.\n\n        // The data is already in the correct order, so we can just return it.\n\n        // The data is already in the correct order, so we can just return it.\n\n        // The", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\n        public static void Main()\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "            if (this.getBelongingStrength(component, c) > this.getIntrinsicCohesion(component, c)) {\n                intrinsicCohesion = this.getIntrinsicCohesion(component, c);\n            }\n            if (intr", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "\n    obj.b = b\n    src1 = off1, b, off1, a, b(49)\n    obj.b = b\n    src1 = off1, b, off3, b, a(49)\n    obj.b = b\n    src", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\n    }\n\n    public static void main(String[] args)\n    {\n        WorldSettings worldSettings = new WorldSettings(1, \"world\", 1, true, false, WorldType.SURVIVAL, false, WorldType.CREATIVE, false, false, WorldType", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\n    def __init__(self, results, progress_cb, error):\n        self.results = results\n        self.progress_cb = progress_cb\n        self.error = error\n        self.results = []\n        for result in results:\n            if result[\"id\"] == \"", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "\n    public class ImageHelper\n    {\n        private static final long serialVersionUID = 1L;\n        private final int width = 1024;\n        private int height = 600;\n        private int imageSize = 600;\n        private int image", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "\n    def make_vocabulary(self,\n                             project_uuid,\n                             predicate_uri):\n        \"\"\" makes a vocabulary from\n            a given project's annotation\n            with a given predicate\n        \"\"\"\n        old_pred_uri = LinkAnnotation.", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "\n    public static void main(String[] args) {\n        try {\n            main(args);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\n// This range contains the bulk of the CJK set.\n//\n// The following code is a workaround for a bug in the Mono implementation of\n// the \"extra\" character.\n//\n// The bug is that the \"extra\" character is not a valid UTF-16 code", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "\n    if (ragdoll) {\n        return;\n    }\n    if (delay > 0f) {\n        delay = delay;\n    }\n    if (delay > 0f) {\n        return;\n    }\n    if (delay > 0f)", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "\n// 1.\n// 2.\n// 3.\n// 4.\n// 5.\n// 6.\n// 7.\n// 8.\n// 9.\n// 10.\n// 11.\n// 12.\n", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "        int i = 0;\n        for (int j = 0; j < num; j++)\n        {\n            out[i] = (byte)(num % 256 + '0');\n            i++;\n        }\n        return out;\n    }\n    //", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "\n# This code is part of OpenFisca.\n#\n# This code is part of OpenFisca.\n#\n# This code is part of OpenFisca.\n#\n# This code is part of OpenFisca.\n#\n# This code is part of Open", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "        // this.photonList = new List<string>();\n        for (int i = 0; i < additionalRpcs.Length; i++)\n        {\n            this.photonList.Add(additionalRpcs[i]);\n        }\n        this.photon", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "\n        # Find the symmetry of the k-point.\n        self.symmetry = self.symmetry.reduce(self.n_ks)\n        self.n_c = self.symmetry.reduce(self.n_ks)\n        self.n_c = self.n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "\t000000000000000000000000000000000000000009999999999999999999999", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\n# The following code is used to create a new user in the database.\n# The user is created with the username and password that the user provided.\n# The user is created with the username and password that the user provided.\n# The user is created with the username and password that the user provided.", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "    \"\"\"\n    def __init__(self, config={}):\n        self.grid_polygon = None\n        self.node_ids = []\n        self.link_node_set = None\n        self.free_points = []\n        self.interface_id = None\n       ", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "\n    def callOpenFile(self):\n        import openFile\n        openFile.open(self.currentDir + \"/\" + self.clickedFileOrDir)\n        self.currentDir = self.currentDir + \"/\" + self.clickedFileOrDir)\n        self.", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "\n    public static void main(String[] args)\n    {\n        PatternMatch matcher = new PatternMatcher();\n        Matcher.match( \"PatternNode\", \"Node\",\n            \"PatternNode\", \"Node\",\n            \"PatternNode\", \"Node\",\n            \"PatternNode\", \"", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\n  public static void main(String[] args) {\n    try {\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      //", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "\n                // TODO:\n                // 1.\n                // 2.\n                // 3.\n                // 4.\n                // 5.\n                // 6.\n                // 7.\n                // 8.\n              ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "    if (leftToRight)\n    {\n      //TODO: check if last command was also line and move the head\n      //TODO: check if last command is also line and move the head\n      //TODO: check if last command was also line and move the head\n      //", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "                else\n                {\n                    Marshal.FreeHGlobal(m_ptr);\n                }\n            }\n        }\n    }\n\ninternal class WinTrust\n    {\n        public static void Main(string[] args)\n        {\n            if (args.Length", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n// 1.1.0.0.0\n\n// 1.1.0.0.0\n\n// 1.1.0.0.0\n\n// 1.1.0.0.0\n\n// 1.1.0.0.0", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "    for x in self.inputs[0]:\n        if x.endswith('%') and x.endswith('%') and x.endswith('%') and x.endswith('%') and x.endswith('%') and x.endswith('", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "    # Test the \"unpublished\" method\n    self.store.unpublish(item)\n    self.store.unpublish(item)\n    self.store.unpublish(item)\n    self.store.unpublish(item)\n    self.store.unpublish(item)", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "\t0 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "    return mkrange(dict)\n\ndef mkrlog(data):\n    return mkrange(data)\n\ndef mkrlog(data):\n    return mkrange(data)\n\ndef mkrlog(data):\n    return mkrange(data)\n\n", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\n            if not self.editable_entry(column.name):\n                return\n            if not self.is_valid_column(column.name):\n                if not self.is_valid_column(column.name):\n                    return\n            if not self.is_", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "\n    # Get the ntp_auth_conf\n    ntp_auth_conf = self.module.get_ntp_auth_conf()\n    if ntp_auth_conf['authentication'] == 'enable':\n        if ntp_auth_conf['authentication_mode", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "\n    if not check_mode:\n        return\n    if not check_mode:\n        return\n    if not check_mode:\n        return\n    if not check_mode:\n        return\n    if not check_mode:\n        return\n    if not check_mode:\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "\n    public static void main(String[] args) throws SAXException {\n        final String source = \"org.orbeon.xform.common.DigestContentHandler\";\n        final String[] args = new String[2];\n        args[0] = source;\n        args[", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n       ", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "            object sample = GetSample(api, actionName, parameterNames, sampleDirection,\n                SampleObjectFactory.CreateSample(sample,\n                Type.GetType(sample),\n                SampleObjectFactory.GetSample(sample,\n                Type.GetType(sample,\n              ", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "\n            // Ensure the new location list is now set on the bean\n            bean.setPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, new LocationList());\n            // Ensure the new location list is now set on the bean\n            bean.setPropertyValue(LegacyConfigPost", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "            [PreserveSig]\n            int GetEvent(\n                [In] MFEventFlag dwFlags,\n                [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent ppEvent,\n                [In, MarshalAs(UnmanagedType.Interface)] out IM", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "    def _get_element_by_name(self, name):\n        if not self.id_cache:\n            return None\n        for node in self.childNodes:\n            if node.nodeType == Node.ELEMENT_NODE:\n                if node.ownerDocument.is", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\n        # Find the expected results\n        expected_data = self.gen_expected_data()\n        # Find the expected results for the body\n        expected_body = self.body_type.get('body')\n        # Find the expected results for the text\n        expected_text = self", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "\n\tprivate static void\n\tdecodeKeyLocator(int expectedType, TlvTypeDecoder decoder)\n\t{\n\t000000000000000000000000000000001100", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "\n\t//\n\t//\n\t//\n\t//\n\t//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "\n# Get the URL of the API\ndef get_url(api_path):\n    \"\"\"Get the URL of the API\n    :param api_path: The path to the API\n    :type api_path: str\n    :returns: The URL of the API\n    :rtype", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\n    def _reaction_weight(reaction: \"Reaction\") -> List[float]:\n        return _reaction_weight(reaction, inputs=[\"carbon\", \"carbon_source\", \"carbon_yield\", \"carbon_yield\", \"carbon_y", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "    if self.ip_to_port(dstip):\n        self.send_packet(dstip, packet)\n        return\n    def send_packet(self, packet):\n        if self.ip_to_port(packet.srcip):\n            self.send_packet(", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "            // 1.1.1.1.\n            // 1.1.1.1.\n            // 1.1.1.1.\n            // 1.1.1.1.\n            // 1.1.11.1\n            // 1", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "\n  // \n  // \n  // \n  // \n  // \n  // \n  // \n  // \n  // \n  // \n  // \n  // \n  // \n  // \n  // \n  // ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "//    public static final int getHalfTradePeriod() {\n//        return getTradePeriodDate().getTime() + 1;\n//    }\n    public static int getHalfTradePeriod() {\n//    public static int getHalfTradePeriod() {\n//", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\n\tstatic Node LeadingAny(Node p) {\n\t\n\tif (p == null) return null;\n\t\n\tNode a = new Node(Node.any);\n\ta.set(p);\n\t\n\treturn a;\n}\n\n//\n//\n//\n", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\n//Item item = (Item)session.Load(typeof(Item), 1);\n\n//Assert.AreEqual(item.Parent, 2);\n\n//Item child = item.Children[0];\n\n//Assert.AreEqual(child.Id, 2);\n\n//", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "    def __init__(self, description, currency, fields):\n        self.description = description\n        self.currency = currency\n        self.fields = fields\n        self.in_chargeback = self.in_chargeback\n        self.save_button = Button(title='Save')\n", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\nWriteData(buff, 0, new byte[] {0x02, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x00, 0x0", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\nself.scan_ter.system.injection = self.scan_ter.system.injection\n\nself.scan_ter.system.injection = self.scan_ter.system.injection\n\nself.scan_ter.system.injection = self.scan_ter.", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "\n            // 1 + _indx\n            // 1 + _indx\n            // 1 + _indx\n            // 1 + _indx\n            // 1 + _indx\n            // 1 + _indx\n            // 1 + _indx\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "            //  If the socket is not connected, create a new one.\n            if (socketId == 0) {\n                socketId = new Integer(0);\n            }\n            //  If the socket is not connected, create a new one.\n            socketId = new Integer(", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "        self.assertRaises(Exception, types.Interface, 'a')\n        self.assertEqual(types.Interface('a'), 'a')\n        self.assertRaises(types.Interface('a'), 'a')\n        self.assertRaises(types.Interface('a'), 'a", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\n    // 1: 1234567890123456789015\n    // 2: 1234567890123456789015\n    // 3:", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\n    @api.multi\n    def _compute_timesheet_state(self):\n        if self.user_id:\n            return self.user_id.attendance_state\n        else:\n            return self.user_id.attendance_state\n    @api.multi", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                // 0x1005\n                // 0x1005\n                // 0x1005\n                // 0x1005\n                // 0x1005\n                // 0x100", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "\n    public static IEnumerable<StructTypeInfo> GetTypeInfo( string typeName ) {\n        return GetTypeInfo( typeName );\n    }\n    private static IEnumerable<StructTypeInfo> GetTypeInfo( string typeName ) {\n        return GetTypeInfo( typeName );\n    }", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\n    def on_window_state_changed(self, window, event):\n        \"\"\"Handle window state change\"\"\"\n        if event.window == self.window():\n            self.window_state_changed(window, event)\n        else:\n            self.window_state_changed(", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        ///", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "\n```\npublic class TypeDefinition {\n    public static void Main (string[] args) {\n        if (args.Length == 0)\n            return;\n        TypeDefinition typeDefinition = new TypeDefinition (args[0]);\n        if (typeDefinition.IsValid ()) {\n", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "    # This is a hack to make the code work on Python 2.\n    # The original code is:\n    #   self.connection.set_read_timeout(10)\n    #   self.connection.set_read_timeout(10)\n    #   self.", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\n// This code is generated in a separate file.\n\n// This code is generated in a separate file:\n\n// This code is generated in a separate file:\n\n// This code is generated in a separate file:\n\n// This code is generated in a separate file:\n\n// This code", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\ndef _get_window_from_notebook (window):\n    if not window:\n        return None\n    window = window.get_window()\n    return window\n\ndef _get_window_from_notebook (window):\n    if not window:\n        return None\n", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"predanswers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\n    public String getPersistenceUnitName() {\n        return this.persistenceUnitName;\n    }\n\n    public String getPersistenceProviderClassName() {\n        return this.persistenceProviderClassName;\n    }\n\n    public DataSource getDataSource() {\n        return this.jta", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "    return false;\n  }  \n  protected boolean isReadOnly()\n  {\n    return false;\n  }  \n \n  protected boolean isReadOnly()\n  {\n    return false;\n  }  \n \n  protected boolean isReadOnly()\n  {\n    return false", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "// \n// butSubjects\n// \n// butSubjects.Add(this.butSubjects);\n// \n// butSubjects.Add(this.butSubjects);\n// \n// butSubjects.Add(this.butSubjects);\n// \n// but", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "\n    public static void main(String[] args)\n    {\n        // TODO: This is a very basic example, and is not meant to be used in a production environment\n        //\n        // TODO: This is not a complete example, and is not meant to be used in a production environment\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\n    public static int getMaxCdrSerializedSize(int current_align) {\n        int current_align = current_align;\n        int sum = 0;\n        int current_sum = 0;\n       \n        //\n        //\n        //\n        //\n       ", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "\n0x10, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\n    def do_execute(self, name):\n        if not name:\n            return None\n        if not os.path.isdir(name):\n            return None\n        if not os.path.isfile(name):\n            return None\n        if not os.path.is", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "\n    if (java != null)\n    {\n      return java.GetVersion();\n    }\n    else\n    {\n      return \"Unknown\";\n    }\n  }\n  private static void Main(String[] args)\n  {\n    if (args.Length == 0", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "            if(rankCounts[peptideLength] < MIN_EMPTY_PEP_LEN_FACTOR)\n                return;\n            double minLikelihood = min(MIN_EMPTY_PEP_LEN_FACTOR, rankCounts[peptideLength]);\n            double", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "\n    def _from_json_spec(cls, modifier_json, modifier):\n        modifier.add_threshold = modifier.add_threshold\n        modifier.falloff_type = modifier.falloff_type\n        modifier.mask_tex_map_object", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\ndef main():\n    parser = argparse.ArgumentParser(description=\"Packet capturing tool\")\n    parser.add_argument(\"--num\", \"-num\", help=\"Capture packets from interface\")\n    parser.add_argument(\"--read\", \"-r\", help=\"Read from .pcap file", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "        val = vertex.getNearestNeighbor(3);\n        assertNotNull(nearestNeighbor);\n        assertFalse(nearestNeighbor.isNull());\n        assertFalse(nearestNeighbor.isNull());\n        assertFalse(nearestNeighbor.isNull());\n       ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "\n            'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'to': \"orm['main.Scan\"]\"}),\n            'created_at': ('django.db.models.fields.DateTimeField', [], {'", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "            // \n            // \n            this.label5.AutoSize = true;\n            this.label5.ForeColor = System.Drawing.Color.Black;\n            this.label5.Location = new System.Drawing.Point(117, 138);\n           ", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "\n    // This function is referenced by processImports()\n    private static void processImport(SDOType theImport) {\n        if (theImport.getSchema() != null) {\n            return;\n        }\n        Iterator iter = theImport.getSchema().iterator();\n", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "\n    # If the number of days is greater than 0, then the number of days is set to 8 hours.\n    if len(ids) > 0:\n        diff_days = self.get_number_of_days(ids, 'draft')\n        if diff_days", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "\n            return this.ToString();\n        }\n    }\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\n    public IBusinessObjectCollection SelectedBusinessObjects\n    {\n        get { return this.BusinessObjects; }\n    }\n    public IBusinessObjectCollection SelectedBusinessObjects\n    {\n        get { return this.BusinessObjects; }\n    }\n   ", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\nvalueObject.setCareContext(domainObject.getCareContext());\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "                // Stash.SetStashDiffs(new[] {\n                // Stash.SetStashDiffs(new[] {\n                // Stash.SetStashDiffs(new[] {\n                // Stash.SetStashDiffs(new[] {\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "\n// 1. Keep all positives, discard all negatives: p'=p, n'=0\n// 2. Lower the estimated precision to 0, simply estP' = 0, estN =\n// 3. Analogous for the negatively predicting rule", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "\n    public boolean equals(final Object o) {\n        if (o == null) {\n            return false;\n        }\n        return this.host.equals(o.host) && this.port == o.port && this.realm.equals(o.realm) && this", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "    job.finish_assign_items()\n    job.finish_assign_items()\n    assert job.has_assign_items(lattice_buffer_id, output_buffer_id) == 2\n    assert job.has_assign_item(\n        dest_elem_type", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "        }\n        public int EndAddInt(int a, int b, System.AsyncCallback callback, object asyncState)\n        {\n            return this.EndInvoke(\"AddInt\", new object[] {\n                a,\n                b});\n        }\n        public int EndAddInt", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "        self.putb(13, ['SEND_CID', '0x%01' % self.arg])\n        self.state = 'GET RESPONSE R1')\n        self.read_buf = self.read_buf[2:]\n        self.", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "    // (, line 214\n    // <, line 215\n    // call R2, line 214\n    if (r_R2) {\n      return false;\n    }\n    // (, line 216\n    // <,", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "                if (msg_size == 0)\n                {\n                    System.out.println(\"No data available\");\n                }\n                else\n                {\n                    if (msg_size == 1)\n                    {\n                        System.out.println", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "\n    def _get_subject_ordered(self, short_name):\n        for extension_idx in range(0, self.cert.get_extension_count()):\n            extension = self.cert.get_extension(extension_idx)\n            if extension.get_short_name", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\n\t    if (still_there) {\n        if (v) {\n            print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "    # Get the number of bytes required to represent the interval.\n    n_bytes = len(X.begin) // 2\n    if n_bytes > 0:\n        return n_bytes\n    else:\n        return 1\n\ndef get_intervals_for_sur", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t}\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "\n    def _edi_get_pricelist(self, cr, uid, partner_id, currency):\n        # TODO: refactor into common place for purchase/sale, e.g. into product/sale.py\n        partner_model = self.pool.get('", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "//        return new SecureHttpContext(http://localhost:8080, 443, \"https://openhab.org/rest/api\",\n//                \"https://openhab.org/rest/api/1.0/\",\n//               \"https://openhab", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "                return;\n            }\n            if (permissions.size() == 1)\n            {\n                return;\n            }\n            for (PermissionEntry permissionEntry : permissions)\n            {\n                if (permissionEntry.getPermission().equals(permissionEntry))\n               ", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "\n    def test_match_parent(self, context, device):\n        enumerator = context.list_devices().match_parent(device)\n        assert enumerator.parent is not None\n        assert enumerator.parent.name == 'input'\n    def test_match_match_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "    # self.app.exploration_fairy_card_update(params)\n    # self.app.exploration_fairy_card_update(params)\n    # self.app.exploration_fairy_card_update(params)\n    # self.app.expl", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "def get_whole_fraction(srcname, freq, stime, etime):\n    # The data set.\n    dsets = {\n        '614': \"W102 W110 W142 W157 W392\",\n", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "            // TODO: This is a hack to make the game more fun.\n            // TODO: This is a hack to make the game more fun.\n            // TODO: This is a hack to make the game more fun.\n            // TODO: This is a hack to make the game more fun.\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "        for (int i = 0; i < devices.size(); i++){\n            String modelName = devices.get(i);\n            String modelNumber = devices.get(i);\n            String recordPath = devices.get(i);\n            if (recordPath != null){\n              ", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "\n  // 1. Migration jobs\n  // 2. UI blocking\n  // 3. Migration jobs\n  // 4. UI blocking\n  // 5. Migration jobs\n  // 6. UI blocking\n  // 7. Migration jobs\n  // ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "      if (split.length > 0) {\n        for (int i = 0; i < split.length; i++) {\n          if (split[i].equals(tokens[i])) {\n            entries.add(split[i]);\n            break;\n        }\n     ", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "    def _find_include(self, include, path):\n        try:\n            sub_path = self.find_path(include)\n            return sub_path\n        else:\n            return None\n    def _find_include(self, include, path):\n        try:\n", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "\n    def __init__(self, keys, features):\n        self.keys = keys\n        self.features = features\n    def features_at_point(self, keys, features):\n        \"\"\"Return an iterable which yields instances of Feature for the specified point and features.\n\n        Optional", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "\n    def __init__(self, want, have=None):\n        self.want = want\n        self.have = have\n\n    def __repr__(self):\n        return self.name\n\n    def __str__(self):\n        return self.name\n\n    def __", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "\n```\ndef _get_input_value(self):\n    if self.inputs.get('name', 'provisioning_key'):\n        return self.inputs.get('provisioning_key')\n    else:\n        return None\n\ndef _get_input_value", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "\n    public static void main(String[] args) throws Exception {\n        // create a new instance of the event manager\n        IEventManager manager = new EventManager();\n        // create a new instance of the event listener\n        IEventListener listener = new EventListener();\n        // set the event listener", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "\n    def test_update_thread_no_body(self, mock_request):\n        self._test_request_data(mock_request, {\"body\": \"foo\"},\n            \"course_id\": unicode(self.course_id),\n            \"title\": \"foo\"},\n", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "    if not env.get('PDB', 0):\n        raise SCons.Errors.UserError(\"An executable should have exactly one target with the suffix: %s\" % env.get_string(for_signature, 'PDB'))\n    extras = []\n    for i", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "\n    public static void main(String[] args) {\n        try {\n            // 1. Create a new instance of the class\n            WorkspaceAction action = new WorkspaceAction(\"Test\");\n            // 2. Create a new instance of the progress monitor\n            IProgressMonitor monitor =", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "\n    assert f('12:30..+5', last) == (d(2014,1,31,  1,55), d(2014,1,31,  12,30))\n    assert f('12:3", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "            //Spawning {0} spawns\n            //Spawning {1} spawns\n            //Spawning {2} spawns\n            //Spawning {3} spawns\n            //Spawning {4} spawns\n            //Spawning {5} spawn", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "\n    def _check_guest_up_timeout(session, timeout):\n        error_context.context(\n            \"Check guest's up_timeout\", logging.info)\n        session = self._get_session()\n        if session.is_alive():\n            return\n", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "            this.owner.getDecorator().onSendRequestBefore(r, destination);\n            return res;\n        } catch (RemoteException e) {\n            logger.error(\"**ERROR** Unable to send request : \" + e);\n            throw e;\n        }\n    }", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\n// 1. Create a new instance of the class\n\n// 2. Create a new instance of the class\n\n// 3. Create a new instance of the class\n\n// 4. Create a new instance of the class\n\n// 5. Create a new instance of the class", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "\n// This is a test class for the System.ActivatorTest class.\n//\n// The test class is a simple class that contains a single field, a string field, and a method that returns a string.\n//\n// The test class is a simple class that contains a single field, a string", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "\nclass _build_regex(self, pattern):\n    if not self.pattern in self.pattern:\n        return self.pattern\n    else:\n        return self.pattern\nclass _build_regex(self, pattern):\n    if not self.pattern in self.pattern:\n       ", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "\n    def test_action_set(self, app, action):\n        # Create a new appversion\n        app = AppVersion.objects.get(pk=app.id)\n        # Create a new action\n        action = Action.objects.get(pk=action)\n        #", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "\nfrom amoco.formatter import Formatter\nfrom amoco.formatter import Style\nfrom amoco.formatter import Word\nfrom amoco.formatter import Word\nfrom amoco.formatter import Word\nfrom amoco.formatter import Word\nfrom amoco.formatter import Word", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "\n    public static void changeLeader(Player player) {\n        PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupUpdateEvent(group, player));\n        }\n    }\n    /**\n     *", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\n    public void setParent(Tag parent) {\n\tparent.setParent(this);\n    }\n    public void setParent(Tag parent) {\n\tparent.setParent(this);\n    }\n\n    public void setParent(Tag parent) {\n        parent.setParent", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\n    public static void Main(string[] args)\n    {\n        // TODO:\n        // TODO:\n        // TODO:\n        // TODO:\n        // TODO:\n        // TODO:\n        // TODO:\n        // TODO:\n        // TODO:\n        // TODO:", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\n                    m_Key[i] = new ExodusActivation();\n                    m_Key[i].SetPosition( m_Key[i]);\n                    m_Key[i].SetActive( true );\n                    m_Key[i].SetActivated( true );", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n    public static void main(String[] args) {\n        // Get the version number\n        int versionNumber = getVersionNumber(args[0]);\n        // Get the alignment pattern\n        int alignmentPattern = getAlignmentForDimension(versionNumber);\n        // Get the ECBlocks\n        E", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\nanswers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\n// 1:\n//  // Get the number of LEDs in the queue\n//  int LED_Count = Lights.Count;\n//\n//  // Get the number of LEDs in the current frame\n//  int CurrentFrameCount = Lights.Count;\n//\n//", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "# This is a sample Python script that demonstrates how to use the\n# Django template system to generate a static HTML page.\n#\n# The first argument is the name of the template to use.\n# The second argument is the name of the template to use.\n# The third argument is the", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "            if (dc.state == 0) {\n                // If the state is 0, then the call is not a normal call, but a special call.\n                // If the state is 0, then the call is a normal call, but the call is a special call.\n", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\n    public static void main(String[] args) {\n        try {\n            // TODO: Add some code to initialize the state\n            ManualTestResult result = new ManualTestResult(new NabuccoProperty(\"ManualTestResult\",\n                \"state\", \"manual\",", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "            for (int x = 0; x < xSizeP; x++)\n            {\n                // Get the color for this pixel\n                Color32 color = colorMapArray[x][y];\n                // Get the color for the pixel\n                Color32 color =", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "\n\t0\n\n\t\n\t\n\t//\n\t\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "            return null;\n        }\n        out.writeObject(found);\n        out.flush();\n        out.close();\n        return found;\n    }\n    private void processRMI(InputStream ins, OutputStream outs, String name)\n        throws IOException\n    {\n        Object", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n            /* Draw the score */\n            drawgfx(bitmap, Machine.gfx[5],\n                    23,\n                    0,\n             pixel_x, pixel_y,\n             Machine.visible_area, TRANSPARENCY_NONE, 0);\n            pixel", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "\nvar result = new List<Obj_AI_Base>();\n            result.Add(new Obj_AI_Minion());\n            result.Add(new Obj_AI_Minion());\n            result.Add(new Obj_AI_Minion());\n            result.Add(", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "        List<Node> path = new LinkedList<>();\n        path.add(x);\n        path.add(y);\n        for (int i = 0; i < path.size() - 2; i++) {\n            Node n = path.get(i);\n            if", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                    if (pop.Length == 0)\n                    return null;\n                }\n                if (pop.Length == 0)\n                    return null;\n                if (pop.Length == 0)\n                    return null;\n                if (pop.", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "\n    public static void main(String[] args) {\n        // TODO: remove the @SuppressWarnings annotation\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n        //\n", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                    if (mobiles[i].IsAlive())\n                    {\n                    m_Item.DoDamage(mobiles[i]);\n                }\n            }\n            m_Item.OnAfterDelete();\n        }\n        public static void Main(string[] args)", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\n\tpublic static void Main(string[] args)\n\t{\n\t\tvar server = new Server(args);\n\t}\n\n\tpublic static void Main(string[] args, int port)\n\t{\n\tvar server = new Server(port);\n\n\tserver.OnMessage(", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "\n  public static void main(String[] args) {\n    // 1. Create a new instance of the OrganizationController class\n    OrganizationController controller = new OrganizationController();\n    // 2. Create a new instance of the OrganizationController class\n    OrganizationController controller = new OrganizationController();\n   ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n    public static void main(String[] args) {\n        NetworkManager.g(new NetManager(\"localhost\", 1234, 5000, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "      return name;\n    }\n    else {\n      String name = new String();\n      for (Recipient recipient : recipients) {\n        name = name + \" (\" + recipient.toShortString() + \")\"\n      }\n      return name;\n    }\n    return", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "\n    # read the metadata from the j_list and put it in a dictionary\n    metadata_dict = {}\n    for j_index, d_value in enumerate(j_list):\n        # check to see if we have missing periods in the metadata\n        if d_value == '", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "\n    def __init__(self, url_base):\n        self._url_base = url_base\n        self._data = defaultdict(set(self._data[\"reftest\"]))\n        self._reftest_nodes_by_url = {}\n        self._reft", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "    def __init__(self, context):\n        self.context = context\n        self.config = {}\n        self.config[\"tools\"] = {}\n        self.config[\"tools\"].setdefault(\"rust-snapshot-build\",\n            path.join(self.context.topdir, \"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "\n    public class WrappedNetworkLayer<T, R> : IDataAdapter\n    {\n        private class WrapperServerDataAdapter : IDataAdapter\n        {\n            private WrappedNetworkLayer<T, R> _networkLayer;\n            private string _description;\n            public Wrapper", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "\n    // 1. Create a new script\n    // 2. Create a new script with the same name\n    // 3. Create a new script with the same name and the same content\n    // 4. Create a new script with the same name and the same content\n    // ", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "\n  # transform_grad = self.transform_gradients(grad)\n  # transformed_grad = np.reshape(transform_grad, (-1,3),-1,3)\n  # return transformed_grad\n  #\n  # transform_grad = self.transform_grad", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "        pf.setDepth(depth);\n        //EXCLUSION_RE\n        pf.setExclusionRegexp(\"^(.*?[^a-zA-Z0-9]+)\n        //INCLUSION_RE\n        pf.setInclusionRegex", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "        }\n        public void OnUpdate()\n        {\n            if (CanCast())\n            {\n                Cast();\n            }\n        }\n        public void OnUpdate()\n        {\n            if (CanCast())\n            {\n                Cast();\n            }\n        }", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\n    public static LNode Inner(this LNode self, Symbol name)\n    {\n        return self.WithAttributes(name, out _____);\n    }\n    public static LNode Inner(this LNode, Symbol name)\n    {\n        return self.WithAttributes(", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "    # This is a hack to work around a bug in the python-installer.\n    # The bug is that it doesn't always run the installer.\n    # This is a workaround to work around the bug.\n    if __name__ == '__main__':\n        import", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "\n\tpublic static void main(String[] args)\n\t{\n\t\tif(args.length == 0)\n\t\t{\n\t\t\treturn;\n\t0\n\t}\n\n\tpublic static void main(String[] args)\n\t{\n\t0\n0\n0", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "    assert Sum(x, (x, a, b)) == 2\n    assert Sum(x, (x, a, b)) == 2\n    assert Sum(x, (x, a, b)) == 2\n    assert Sum(x, (x, a, b))", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "        f = Form(self.env['test_testing_utilities.parent'], view='test_testing_utilities.o2m_parent')\n        f.subs.new().save()\n        f.subs.new().save()\n        f.subs.new().", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "                this._newStartingIndex = -1;\n                this._oldStartingIndex = -1;\n            }\n            this._newStartingIndex = newIndex;\n            this._oldStartingIndex = newIndex;\n        }\n        private void InitializeMoveOrReplace(", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "\t// 1. Get the string from the lua stack\n\tString a1 = l.GetValue();\n\t// 2. Get the string from the lua stack\n\tString a2 = l.GetValue();\n\t// 3. Get the string from the lua stack\n", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "                    c.Campus = Token2Csv().ToInt();\n                    break;\n            }\n        }\n        private void SetComparisonType(Condition g, TokenType.CompareType)\n        {\n            if (g.ComparisonType == CompareType.AllFalse)\n              ", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "            return;\n        }\n    }\n    public void testObjectToXMLDocument() throws Exception {\n        Object objectToWrite = getWriteControlObject();\n        XMLDescriptor desc = null;\n        if (objectToWrite instanceof XMLRoot) {\n            XMLRoot xmlRoot = (XMLRoot", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"predanswers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "\n\tprivate void setPosition(Position position) {\n\n\t//\n\n\tprivate void setTitle(String title) {\n\n\tlabelTitle.setText(title);\n\n\t\n\n\t//\n\n\tprivate void setTitle(String title) {\n\n\tlabelTitle.setText(", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            __intp.Free(ptr_of_this_method);\n            return __ret;\n        }\n        static StackObject* ToString_6(ILIntepreter __int", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\n    def _generate_x(self, m):\n        \"\"\"\n        Generate a random x (in the range 0 < x < 256)\n        \"\"\"\n        self.transport.host_key = self.gss_host\n        self.transport.host_key =", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "\n    def _sum(self, code, from_date, to_date=None):\n        if to_date is None:\n            to_date = datetime.now().strftime('%Y-%m-%d')\n        result = self.cr.execute(\"SELECT sum(amount", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "\n# Test that the Channel Animator can be set to a different step increment value\n    def test_channelIncrement(self):\n        driver = self.driver\n        # Open a test image so we have something to animate\n        Util.load_image( self, driver, \"aH", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "\n    @Override\n    public Dimension getMaximumSize() {\n        Dimension d = new Dimension();\n        font = getFont();\n        return d;\n    }\n    \n    @Override\n    public Dimension getPreferredSize() {\n        Dimension d = new", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "            treeModel.removeAllChildren();\n            treeModel.insertNode(new DatabaseNode(overallNodeName, connectionData.getConnection()))\n        }\n    }\n    /**\n     * Sets the folder.\n     *\n     * @param connection the connection\n     * @param folder", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "\t00:00:00.000000000000000000000000000000000000000000000000000000", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "#print 'Marr, DV, Rho_c, Rho_m, Mf, DV, Rho_c, Rho_m, Mf, DV, Rho_c, Rho_m, Mf, DV, Rho_c, Rho", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "            if (contact.getPagingOrder() == PagingOrder.NORMAL) {\n                contact.setAllMessagesCount(Integer.valueOf(count));\n            } else {\n                contact.setAllMessagesCount(Integer.valueOf(count));\n            }\n        }\n        return", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "    #print \"p0\",p1,p2,p3,p4,p5,p0,p1,p2,p3,p4,p5,p0,p1,p2,p3,p4,p5,p0,p1,", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "\n    def _getitem(self, index):\n        return self.GetBinContent(index)\n    def _setitem(self, index, value):\n        self.SetBinContent(index, value)\n    def _setitem(self, index, value):\n        self.", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\n'''\n\n'''\n\n'''\n\nif __name__ == '__main__':\n\tprint \"Loading model...\"\n\tprint \"Loading data...\"\n\tprint \"Loading model...\"\n\tprint \"Loading model...\"\n\tprint \"Loading model...\"\nprint \"Loading model...\"\nprint \"", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "    yield \"file_header\", \"File header\", \"File header, size in bytes\"\n    yield \"file_size\", \"File size\", \"Size of the file in bytes\")\n    yield \"file_comment\", \"File comment, maximum 256 characters\"\n    yield \"file_", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\n            if '.' in d.localName:\n                d['.l'] = d.get('.' + d.localName)\n            elif '.' in d.localName:\n                d['.l'] = d.get('.' + d.localName)\n           ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "\n    def _get_path_info(self, path):\n        \"\"\"Return the path info for the given path.\"\"\"\n        if path.endswith('/'):\n            return path\n        elif path.endswith('/.html):\n            return path\n        elif path.endswith", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // \n        // ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "            if (res.IsBroken)\n                return EnhanceResult.Broken;\n            if (res.IsBroken)\n            {\n                if (res.IsBroken)\n                {\n                    if (res.IsBroken)\n                    {", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "    if not has_access(request.user, 'staff'):\n        return HttpResponse(json.dumps({'result': 'You do not have access to this page.'})\n    return HttpResponse(json.dumps({'result': 'You do not have access to this page.'})", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "\n    public class FrmSetup : Form\n    {\n        private String strConfigFile;\n        private String CONFIGPATH;\n        private Boolean isConfigFilePresent;\n        private Boolean isConfigFile;\n        private Boolean isConfigFile;\n        private String strConfigFile;\n        private String", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "        # Function 1-A\n        new_area_extent = (varanswers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "    }\n    public RenderingStream addTriangle(final Matrix.Vector3f[] vertices,\n                                   final int x1,\n                                   final int y1,\n                                   int x2,\n                                   final int y2,\n                                   final int r", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "\n\tpublic static void Main(string[] args)\n\t{\n\t\tPlayTime time1 = new PlayTime(args[0]);\n\t0\n\t0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "\n                    if (idlePool[i].Connection.IsExpired())\n                    {\n                    oldDrivers.Add(idlePool[i].Connection);\n\n                    // if we have a connection that is older than the one we are\n                    // trying to remove, then", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "\n# This is a function that is used to generate a list of reactions\n# from a list of reactions.\n# The list of reactions is a list of :class:`~cobra.core.Reaction` objects\n# The list of reactions is a list of :class:`~cobra", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "#Quest.giveItems(QUEST_NUMBER)\n#Quest.giveItems(QUEST_NUMBER,QUEST_NAME,QUEST_DESCRIPTION)\n#Quest.giveItems(QUEST_NUMBER,QUEST_NAME,QUEST_DESCRIPTION)\n#Quest.", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "            return new ShaderProgram(\n                new ShaderProgram(\n                    new VertexInfo(PrimitiveType.Triangles,\n                    new Vector3(0, 0, 0),\n                    new Vector3(0, 0, 0),\n                    new Vector", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "            if (PartnerInterestRow.GetField<int>(FPartnerInterestRow.ColumnNumber))\n            {\n                HighestNumber = Math.Max(HighestNumber, PartnerInterestRow.GetField<int>(FPartnerInterestRow.ColumnNumber));\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\n\tpublic static TumourGroupListVoCollection buildFromBeanCollection(java.util.Collection beans)\n\t{\n\t\n\tTumourGroupListVoCollection coll = new TumourGroupListVoCollection();\n\n\tfor(int i = 0; i < beans.length", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "\n\n\t\n\tfor (int i = 0; i < length; ++i)\n\t{\n\t\n\t\tif (scores[i] < 0)\n\t0\n\t\n\t\n0\n0\n0\n0\n0\n0\n0\n0\n0", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
