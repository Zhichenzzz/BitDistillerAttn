{"pred": "    private final transient JKademliaRoutingTable routingTable;\n    private final transient JsonSerializer serializer;\n    private final transient Timer timer;\n    private final transient TimerTask task;\n    private final transient TimerTask task;\n    private final transient", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mSpectaculumView);\n        mImmersiveSensorNavigation.setEffectEventListener(this);\n        mImmersiveSensorNavigation.setEffectEventListener(this);\n        mImmersiveSensorNavigation.setImmers", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n    rounds = 1\n\n    @classmethod\n    def eval(cls, x):\n        return tuple([", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "\n    public EffectManager(Activity activity, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mSpectaculumView = spectaculum;\n        mImmersiveSensorNavigation = new ImmersiveSensorNavigation(activity);\n        mParameterListView =", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "        new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event, Consumer<Event> callback) {\n        if (event != null) {\n            this.event", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器\n     */\n    private ArrayList<RunnerTaskListener> taskListeners = new ArrayList<>();\n\n    /**\n     * 任务监听器管理器\n     */\n    private", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tProblems problems = new Problems(args.dryRun(), args.solutionContext());\n\t\t\tif (args.dryRun()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (args.dryRun()) {\n", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "            //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //save private and public Key to storage\n            rsa.saveRSAKeys", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    SignSessionData signSessionData = new SignSessionData(ACCOUNT_NAME, APP_ID_SIGN, SERVER_CHALLENGE_SIGN);\n    SignSessionData signSessionData = new SignSessionData(ACCOUNT_NAME, APP_ID_SIGN, SERVER_", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            self.acctA = RadiusAccounting(self.global_config, self.cId, self.cGUID, self.remote_ip, self.uaA.state, self.uaA.state)\n            self.acctA.start_accounting(self.ua", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "    __bytearray__ = sdproperty\n    def __bytearray__(self):\n        return bytearray(self.bytes)\n\n    def __bytes__(self):\n        return self.bytes\n\n    def __bytes__(self):\n        return self.bytes\n\n    def __str__(", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "          if num_children == 1:\n            cstr_node.rhs = convert_ast_constraint(children[0])\n          else:\n            cstr_node.lhs = convert_ast_constraint(children[0])\n            if num_children == 2:\n             ", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                intent.setData(Uri.parse(url));\n                intent.setType(\"video/*\");\n                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_LAUNCHING);\n                activity.startActivity(intent);\n            }", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "        String message = \"N/A\";\n        String email = \"N/A\";\n        String name = \"N/A\";\n        String avatarUrl = \"N/A\";\n        String login = AppSettings.getUserLogin();\n\n        PostLocationDataBody postLocationDataBody", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "        self.assert_valid_args(\n            InterLayerPipeline,\n            InterLayerPipeline,\n            InterLayerPipeline,\n            InterLayerPipeline,\n            InterLayerPipeline,\n            InterLayerPipeline,\n            InterLayerPipeline,\n            InterLayerPipeline,\n            InterLayerPipeline,\n", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "\n    def __new__(cls, *args, **kwargs):\n        nonlocal init_called\n        init_called = True\n        return super().__new__(cls, *args, **kwargs)\n\n    engine.bind(User)\n    engine.bind(User)\n    engine", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n\n@method(infix('!', bp=72))\ndef evaluate_simple_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_focus_select(", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n                ", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "    private static final ButterKnife.Action<View> SHOW = (view, index) -> view.setVisibility(View.VISIBLE);\n    private static final ButterKnife.Action<View> HIDE = (view, index) -> view.setVisibility(View.G", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                writeResponse(CREATE_MBEAN, correlationId);\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MB", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "\n        await wild.monitor_task\n        await wild.monitor_task\n        await wild.monitor_task\n        await wild.monitor_task\n        await wild.monitor_task\n        await wild.monitor_task\n        await wild.monitor_task\n        await wild.monitor_task", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "    data = SNLIData(c['data_path'], vocab=vocab)\n    # Load data\n    # Load data\n    data = SNLIData(c['data_path'])\n    # Load data\n    # Load data\n    data = SNLIData", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (speed_mps, )\n  assert", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n            }", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "        assert self.redis.exists(self.redlock.key)\n        assert self.redis.exists(self.redlock.key)\n        assert self.redlock.extend()\n        assert self.redis.exists(self.redlock.key)\n        assert self", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "        return ConeSettings(self._sptr, \"Sound\")\n\n    @property\n    def threed_cone_orientation(self):\n        \"\"\"The direction the 3D projection cone is facing.\n\n        :type: VECTOR\n        \"\"\"\n        return VECT", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "    @calg.setter\n    def calg(self, value):\n        self._calg = value\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.setter\n    def data(self, value):\n        self", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        #cellSize = findCellSize(imgshape, centers, detectCellShapeParameter = detectCellShapeParameter, verbose = verbose, out = out, **parameter);\n        #cellSize = findCellSize(imgshape, centers, detectCellShapeParameter = detectCellShapeParameter, verbose", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume);\n        } else if (accur", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "\n    @Parameter(names = Arguments.DATA_DECODER, description = \"Decoder used to display znode's data byte array\")\n    public String dataDecoder = \"UnicodeDecoder\"\n\n    @Parameter(names = Arguments.DATA_DECODER, description = \"Decoder used", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                if (query.queryType == RequestType.TIMESERIES) {\n                    Either<String, Tuple2<List<String>, List<String>>> timeSeriesRes = coordinator.aboutTimeSeries(stmnt.dataSource, reqHeaders);\n                    if (timeSeries", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    UsageEncryption.OWNER,\n                    OperationMode.CBC,\n                    EncryptionAlgorithmCoded.AES256,\n                    AlgorithmParameterName.KYA,\n                    AlgorithmParameterValue=message.dialog.client.key,\n", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (env.combExpRegNum[i] > 0) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                } // USE_SUBEXP_CALL\n            } // USE_CEC\n        } //", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),\n    url(r'^get-pipeline-job-template$', get_pipeline_job_template,\n        name=\"ajax-get-pipeline-job-", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "        if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientBadMethodCallException(\n                storage_type + ' is not a valid storage type', []\n            )\n        return self\n\n\n", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "    public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(String description,\n            CheckedConsumer<$Argument2> givenStep) {\n        return andArgument(description, givenStep);\n    }\n\n    @Override", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    try {\n      return process.await().toString();\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(RealDeviceImpl.this, e);\n    }\n  }\n\n  /**\n   * Waits for the device to become responsive again.", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (null != textColor) {\n\t\t\tif (null != textColor) {\n\t\t\t\tif (textColor == null) {\n\t\t\t\t\ttextColor = textColor;\n\t\t\t}\n\t\t}\n\t\t}\n\t\t}", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage msg = XmlUtil.fromXml(xml, Message.class);\n\t\tif (msg == null) {\n\t\t\tlog.warn(\"Cannot parse weixin message: \" + xml);\n\t\t\treturn null;\n\t\t}\n\t\tif (msg", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "    # 下载日志\n    download_logs_thread = threading.Thread(target=download_logs_thread, args=(adb, download_dir))\n    download_logs_thread.start()\n    # 运行 apk 文件\n    install_and_", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    @channel_checks.raid_report_enabled()\n    @command(pass_context=True, category='Bot Info', aliases=[\"raid-city\", \"rc\"])\n    @command(pass_context=True, category='Bot Info', aliases=[\"raid-city\",", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"25/11/2015\"),", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor(config_file, work_dir=os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            IntentHelper.toShare(mActivity, picture.getPics()[0], picture.getComment_ID(),\n                                    picture.getComment_author(), picture.getComment_ID(),\n                                    picture.getComment_author(), picture.getComment_author(),\n                ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                ResponseSyncAdapter.class,\n                OhmletsActivity.class,\n                OhmletsActivity.class,\n                OhmletsActivity.class,\n                OhmletsActivity.class,\n                OhmletsActivity.class,\n                Ohmlets", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "        if context.axis == 'attribute':\n            if isinstance(item, (AttributeNode, TypedAttribute)):\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if context.item is not None and context.", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "      'no_members': Counter,\n    }\n\n  def __init__(self, next_provider, sink_properties, global_properties):\n    self._properties = global_properties\n    self._next_sink_provider = next_provider\n    self._sink_properties", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "        StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"statement\", se.getQuery());\n        assertEquals(\"statement\", se.getQuery());\n        assertEquals(\"statement\", se.getQuery());\n        assertEquals(\"statement\", se.getQuery());\n        assertEquals(\"statement\", se.", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        nc.send_message_with_protocol(OK, protocol)\n        self.assertEqual(protocol.send_string.call_count, 1)\n\n    def test_send_message_with_protocol(self):\n        \"\"\"\n        Ensures that the message is translated", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionSuccess() {\n        StatementExecution se = new StatementExecution();\n        se", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "\n            # Send the ADR request\n            log.info(\"Sending ADR MAC Command\")\n            self._sendADRRequest(device)\n\n        self.adrprocessing = False\n\n    def _createLinkADRRequest(self, device):\n        \"\"\"Creates a LinkAD", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    p.start()\n                while True:\n                    try:\n                        done, no_", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "        ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getInstance().unregister(this);\n    }\n\n    @Override\n    public void onFragmentObservable(Chat chat)", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "        if (mPublicRoomsListListList != null) {\n            mPublicRoomsListList.clear();\n            mPublicRoomsListList.clear();\n            mPublicRoomsListListList.clear();\n        }\n        mPublicRoomsListListList.clear();\n", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "            ref_time = self.img_handle.ref_time\n\n        else:\n\n            # Get time from config\n            ref_time = self.config.ref_time\n\n        # Save reference time\n        json_dict['ref_time'] = ref_time\n\n\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "\n\n        self.guild_metadata = GuildMetadata(bot, bot.guild)\n        self.guild_config = GlobalConfigCache(bot.dbi, bot)\n        self.guild_config = GlobalConfigCache(bot.dbi, bot)\n        self", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "                    deviceGcmToken = FirebaseInstanceId.getInstance().getToken();\n                    stopGCMPush();\n                    stopHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                    break;\n                case \"Hw", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs, target_sequences,\nanswers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponse", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "        if (packet.getSubType() == PacketType.MESSAGE) {\n            onMessage(packet, client, transport);\n        } else if (packet.getSubType() == PacketType.MESSAGE) {\n            onMessage(packet, client, transport);\n        } else if", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "    public PersonalVulnsWindow() {\n        initComponents();\n        init();\n    }\n\n    private void initComponents() {\n        // JTree\n        this.vulntree = new JTree();\n        this.vulntree.setModel(new DefaultTreeModel", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "    private void createAllChartPanel(\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        createBreakdownChartPanelSingle(\n                DatasetGenerator.GC_TIME_SECONDS,\n                datasetGenerator,\n                list);\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "        lMS.addTrack(factory.createVideoTrack(\n            \"ARDAMS\",\n            appRtcClient.videoConstraints(),\n            factory.createVideoRenderer(new VideoRendererGui())));\n      }\n      lMS.addTrack(factory.createVideoRenderer(new VideoRenderer", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "\n    # create a journal instance\n    journal = DiskJournal(basedir, system_data_path)\n\n    # create a publisher instance\n    publisher = Publisher()\n\n    # create a publisher instance\n    publisher = publisher.publish\n\n    # create a snapshot manager instance\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "        assertThat(jobRequest.isPeriodic()).isFalse();\n        assertThat(jobRequest.isStarted()).isFalse();\n        assertThat(jobRequest.isStarted()).isFalse();\n        assertThat(jobRequest.isTransient()).isFalse();\n        assertThat(jobRequest.isStart", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n    private CheckBoxPreferenceHideScore preferenceHideScore;\n\n    private LoadGame loadGame;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState)", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "\n        docker_config.add_volume_mappings(\n            self.config.project_files.find_any_volume_mappings()\n        )\n        docker_config.add_extra_options(\n            self.config.project_files.find_any_extra", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "\tif (writeTML) {\r\n\t\twriteTML = true;\r\n\t}\r\n\tif (writeTML) {\r\n\t\treturn generateTML(model, testDataFactories, monitor);\r\n\t}\r\n\treturn null;\r\n\t}\r\n\r\n    @Override\r", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "    Observable<ResponseBody> response = SMTHHelper.getInstance().wService.getAllBoardsFromWWW().flatMap(new Function<ResponseBody, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull ResponseBody responseBody) throws Exception {\n        try {", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "        //bgTasksRunning.set(0);\n    }\n\n    @Override\n    public void onStop() {\n        //bgTasksRunning.getAndIncrement();\n    }\n\n    @Override\n    public void onDestroy() {\n        //bgTasksRunning.getAndDec", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "        self.assertEqual(fdm_data.time, 1234567890.001)\n        self.assertEqual(fdm_data.time, 1234567890.001)\n        self.assertEqual(fd", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "\n    def _read(self, header, data):\n        raise error(\"Not implemented\")\n\n    def _write(self, config):\n        raise error(\"Not implemented\")\n\n    def _prepare_data(self, fileobj, start, available, v2_version, v2", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "            textareaMessage.setText(httpMessage.getRes().getResponse());\n        } else {\n            textareaMessage.setText(\"\");\n        }\n        \n        if (httpMessage.getReq().hasRequest()) {\n            textareaMessage.setText(httpMessage.getReq().getRequest", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "    assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", \"BUSY\", None),\n", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "    visitBooleanOp(new VisitOrd3(n), opToOccur.get(op);\r\n\r\n    return null;\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r\n \n   * f", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "    api = DERBMDATA(args.apikey)\n    if not api.get_data(**{'Year': args.year or 2016}):\n        print(\"No data returned.\")\n        return None\n\n    fmt = StdoutFormatter(\"30s", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "                    new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new EqualizeTransformation(),\n", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\n            # Parse the error\n            exception_class = b''\n            exception_message = b''\n\n            # Parse the error\n            exception_class = b''\n            exception_message = b''\n\n            # Parse the error\n            exception_class = b''\n            exception_", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage();\n\t\t\t}\n\t\t\titem.copyFrom( proxy );\n\t\t\titems.add( item );\n\t\t}\n\t\treturn items", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "\tpublic static A a(Url url, String... children) {\n\t\treturn new A(new Attribute[]{new Attribute(\"href\", url.toString())});\n\t}\n\tpublic static A a(Url url, String... children) {\n\t\treturn new A(new Attribute[]{new Attribute", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "    key = dump_key(user)\n    assert key == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    key = {\"id\": {\"S\": \"foo\"}}\n    key = {\"id\": {\"S\": \"", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "        new Colourizer(Colourizer.Color.RED.getCode(),\n        new Colourizer(Colourizer.Color.YELLOW.getCode(),\n        new Colourizer(Colourizer.Color.BLUE.getCode(),\n        new Colourizer(Col", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "            events.append(Event(e))\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    # Provider\n    def list", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "  private final Analyzer analyzer;\r\n  private final Directory directory;\r\n  private final Set<String> fields;\r\n  private final Set<String> fieldNames;\r\n  private final Map<String, Float> boosts;\r\n  private final Set<String> boostedFields;\r\n", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "            Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n    // ParameterHolderAssertions\n    /////////////////////////////////////////////////////////////////////////////\n\n    public", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "            if (mWallpaper != null) {\r\n                if (mWallpaper.isHomescreen()) {\r\n                    if (mWallpaper.isHomescreen()) {\r\n                        if (mWallpaper.isHomescreen()) {\r\n                            if (mWallpaper.", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\t\tif args.id:\n\t\t\tfor i in args.genotype:\n\t\t\t\tif not os.path.isdir(i):\n\t\t\t\t\tos.mkdir(i)\n\t\t\t\t\tos.system('cp -r {} {}'.", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "\t\tPacketDispatcher.sendTo(new PacketConfigSync(), player);\n\t}\n\n\tpublic static void sync(EntityPlayerMP player)\n\t{\n\t\tPacketDispatcher.sendTo(new PacketConfigSync(), player);\n\t}\n\n\tpublic static void sync", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "        self.beginning_datetime = filenameToDatetime(vid_file)\n\n        # Read the beginning of the file\n        self.beginning_datetime = self.vidinfo.currentTime(dt_obj=True)\n\n        # Read the beginning of the file\n        self.", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "    ilm = ilms.Ilm(ilmvals=ILMVALS, bkgvals=BKGVALS)\n    psf = comp.ComponentCollection([p, ilm], category='psf')\n\n    # 3. background\n    bkg = comp.", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "        if post.user.username != request.user.username:\n            messages.error(request, 'You are not allowed to access this post.')\n            return redirect(reverse('ploghubapp:home_page'))\n        else:\n            return render(request, self.template_", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            yield item\n\n\n@method('processing-instruction')\ndef nud_item_sequence_type(self):\n    XPathFunction.nud(self", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "\t\t\t\t\t\tISelectionChangedListener listener = selectionListeners.getListeners().iterator().next();\n\t\t\t\t\t\tlistener.selectionChanged(new StructuredSelection(listener));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "    def keyclass(self):\n        return self._keyclass\n\n    @keyclass.register(int)\n    def keyclass(self):\n        return self._keyclass\n\n    @keyclass.register(int)\n    def keyclass(self):\n        return self._", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "\ndef handleCheckPuffleName(client, puffles, name):\r\n    if not name in puffles:\r\n        returnValue(False)\r\n\r\n    for puffle in puffles:\r\n        if puffle.name == name:\r\n            returnValue(False)\r\n\r", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    platepar.rotation_wrt_horizon = rotationWrtHorizon(platepar)\n\n    # Recompute the FOV selection radius\n    platepar.fov_radius = getFOVSelectionRadius(platepar)\n\n    # Recompute the platepar\n   ", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "    I.randomize_parameters(ptp=0.2, fourier=True, vmin=0, vmax=1)\n\n\ndef make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n    H = ps", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "            self.logger.info(\"Compiling information about alignment...\")\n            with tqdm.tqdm(total=self.num_utterances) as pbar:\n                for args in jobs:\n                    function = compile_information_func(args)\n                    for done", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "            fab.show();\n        }\n    }\n\n    @UiThread\n    protected void handleError(String error) {\n        Toast.makeText(getContext(), error, Toast.LENGTH_SHORT).show();\n        Flow.get(getContext()).goBack();\n    }", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "        ObservableRegistryEntry<ChatSettingsRemove> entry = ObservableRegistry.getInstance().getEntry(ChatSettingsRemove.class);\n        if (entry != null) {\n            entry.getObservable().register(this);\n        }\n    }\n\n    @Override\n    public void onStop()", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        }).then(new OnComplete<Void>() {\n            @Override\n            protected void doOnComplete(final Void value, final Throwable cause) throws Exception {\n                if (cause != null) {\n                    context.handleError(cause);\n                }\n           ", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "        model = Progress\n        fields = ['component', 'area', 'year', 'fiscal_year']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n\n    class Meta:\n        model = AreaType\n        fields = ['code', 'name']\n\n\n", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "    private HashMap<String, List<FilterType>> mFilterTypeList;\n    private HashMap<String, List<FilterType>> mFilterTypeList;\n    private HashMap<String, List<FilterType>> mFilterTypeList;\n    private HashMap<String, List<FilterType>> mFilter", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "            new RegisterFragment.RegistrationParam(success, email, password, message));\n    }\n}\npackage de.fau.cs.mad.yasme.android.asyncTasks.server;\nimport android.content.Context;\nimport de.fau.cs.mad.yas", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "  assert isinstance(args.gps_sv[0].getMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "    private final Router router;\n    private final SpatialOperator spatial;\n    private final Stopwatch stopwatch = new Stopwatch();\n    private final AtomicInteger id = new AtomicInteger(0);\n    private final Map<Integer, MatcherCandidate> candidates = new Concurrent", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "\n        for i in range(len(tris) / 3):\n            tris = tris[i * 3: i * 3 + 3]\n            lines.draw_triangle(tris, color=fills[i])\n\n        if self.marker_", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "        self.beg_alt = np.arcsin(np.dot(self.beg_vect, self.beg_vect))\n        self.end_vect = self.cartesian_points[-1]\n        self.end_vect = self.cart", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\t\ta = new AppData();\n\t\t\t\t\t\ta.read(data, reader);\n\t\t\t\t\t\ta.setIconPack(IconPackManager.getIconPack(contextRef.get()));\n\t\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    @Override\n    public SourceVersion getSupportedSourceVersion() {\n        return SourceVersion.latestSupported();\n    }\n\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        return new HashSet<>(Arrays.", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "\t\tFunctionSymbol s = new FunctionSymbol(currentScope, fhead.ID().getText(), fhead.args);\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "        bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class).to(GerritHttpAuthDataProvider.class);\n        bind(GerritPushExtension.class).to(G", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "    // These are the methods that visitors actually implement\n\n    /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    boolean enter(SimpleNode node);\n\n    /**\n", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n#!/usr/bin/env python\n\n\n# Segment containing JPEG meta-data\nSeg_dict = IANA_dict({\n    \n    # reserved markers\n    0x01 : ('Temporary private use in arithmetic coding', 'TEM'),\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\n                    File f = snapshots.get(i);\r\n                    long zxid = getZxidFromName(f.getName);\r\n                    if (zxidLong == zxid) {\r\n                        snapFile = f;\r\n                        break;\r\n                    }\r", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Observable.just(query)\n\t\t\t\t\t\t\t.flatMap(query -> Observable.fromCallable(() -> {\n\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "            entries = [e for e in entries if txn_matches(e, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if len([s for s in e.splits if s.account is not None and s.", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "                    Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    stringBuilder.append(\"Request: \")\r\n                            .append(request.getName)\r\n                    .append(\" Package: \")\r\n                            .append(request.getPackageName)\r\n                    .", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "    p = POS + np.random.randn(POS.shape[0], 3)\n    p = POS + np.random.randn(POS.shape[0], 3)\n    p = POS + np.random.randn(POS.shape[0", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "        if isinstance(instance, (int, float, Decimal, Duration, AbstractDateTime)) and not isinstance(instance, bool)\n        return True\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, (int,", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'themes')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "            return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if page", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n    private List<BookmarkItem>", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "                if not checkFileExistence(pattern.datafile):\n                    errmsg += \"The data file %s does not exist.\\n\"%(pattern.datafile)\n\n            # 2.2 synchronization of FulProf Parameter & Pattern\n            if mode == \"Refine", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    url(r'^$', TranStatusPackageView.as_view(), name=\"packages\"),\n    url(r'^(?P<package_name>[\\w\\-\\+]+)$', TranStatusPackageView.as_view(),\n        name=\"package-view\"),\n", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "\t\t\t\tnew FOTableColumnPostprocessorFake()};\n\t\t\n\t\t\n\t\t\t\tnew FOMailingPostprocessor()};\n\t\t\n\t\t\t\tnew FOTableColumnPostprocessorFake()()};\n\t\t\n\t\t\t\tnew FOTable", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "                        new UserLoginTask(activity, UserLoginTask.class)\n                                .execute(user.getEmail(), user.getPassword());\n                    }\n                });\n\n        // \"Cancel\" button to cancel the values\n        alert.setNegativeButton(R.string", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "            dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nf(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        dataset =", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "    tgAsDict = textgrid_io.parseTextgridStr(textgridStr, includeBlankSpaces=True)\n    tg = textgrid.Textgrid(minTimestamp=None, maxTimestamp=None)\n    tg = textgrid.Textgrid(minTimestamp=None", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "    def __init__(self, use_mp: bool = True, **kwargs):\n    def __init__(self, use_mp: bool = True, **kwargs):\n    def __init__(self, use_mp: bool = True, **kwargs):\n    def __init__(self,", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate FolderCleaner folderCleaner;\n\t\n\tprivate Validator validator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "            yield chunk_idx, bounds\n\n    def iter_chunks_with_spikes(self, n_samples):\n        \"\"\"Iterate over chunks with spikes.\"\"\"\n        for chunk_idx, bounds in self.iter_chunks(n_samples):\n            yield chunk_idx", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK),", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "                        String hash = Utils.getHash(content);\n                        FileSaver f = new FileSaver(content, lang, tweet.getUser().getName(), url, hash);\n                        String filename = f.save(logDb);\n                        if(filename != null)", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        return self.get_contacts().first()\n\n    def get_group(self):\n        return self.get_contact().group.first()\n", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "\n    def _render_descriptor_helper(self, descriptor, indent):\n        lines = []\n\n        if isinstance(descriptor, SequenceDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.name))\n            for member in descriptor.members:\n              ", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ff", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "    pipeline.apply(\"Read live projects\", new LiveProjectSource(org))\n        .apply(ParDo.named(\"Convert to Java objects\")\n            .of(new FileToState(errorTag))\n            .withOutputTags(resourceStateSuccessTag, TupleTagList.of(error", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        conditions.append(AndCondition(condition_for(\"and\", column=column)))\n    if \"or\" in operations:\n        conditions.append(OrCondition(condition_for(\"or\", column=column)))\n    if \"not\" in operations:\n        conditions.append(NotCondition(", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        self.rule = DetectSoft404(engine=self.engine)\n        self.rule = RejectStatusCode(engine=self.engine)\n\n    def test_generate_path_for_soft_404(self):\n        self.assertIn(\"http://example.", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "  def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    if self.next_sink.AsyncProcessRequest(sink_stack, msg, stream, headers):\n    self.AsyncProcessResponse(sink_stack, sink_stack, msg, stream,", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "        assert get_square_idx(0) == 0\n        assert get_square_idx(1) == 1\n        assert get_square_idx(2) == 2\n        assert get_square_idx(3) == 3\n        assert get_square_idx(", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\tprivate boolean debugImages = false;\n\t\n\tprivate boolean debugImages = false;\n\t\n\tprivate boolean debugImages = false;\n\t\n\tprivate boolean debugImages = false;\n\t\n\tprivate boolean debugImages = false;\n\t\n\tprivate boolean debugImages = false;\n", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "    private final ICompilationUnit testSuperclass;\n\n    private final GeneratorModel model;\n\n    private final GroupMethodSelectionCtrl groupMethodSelectionCtrl;\n\n    private final Testprio selectedTestprio;\n\n    private final Vector<IMethod> methods;\n\n    private", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "\n    var exitCode = javadocTool.execute(cmdLine.toArray(), input, output);\n    if (exitCode != 0) {\n      log.error(null, __ -> \"javadoc failed\");\n    }\n    return exitCode;\n  }\n", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "    if gopts.event_log:\n      git_trace2_event_log.StartEvent()\n    else:\n      git_trace2_event_log.StartEvent()\n    if gopts.event_log:\n      git_trace2_event_log.StartEvent", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "        return RespostaSAT.analisar(retorno)\n\n    def consultar_numero_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_s", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inherit", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "    Prefs providePrefs(SharedPreferences prefs) { return new Prefs(prefs); }\n\n    @Provides @Singleton\n    FileCache provideFileCache(App app, Ion ion) {\n        return new FileCache(new File(app.getExternalCache", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "        verifiers.put(VerifierProperty.LOCAL_FILES_EXIST, new LocalFilesExistVerifierImpl());\n        verifiers.put(VerifierProperty.REMOTE_FILES_EXIST, new RemoteFilesExistVerifierImpl());\n        verifiers.put", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "        assertThat(ds, totalQueryCount(5));\n        assertThat(ds, totalQueryCount(5));\n    }\n\n    @Test\n    public void testTotalCountWithMatcher() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        self.textArea.setText(self.textArea.text() + \"\\n\" + text)\n        self.textInput.setText(text)\n        self.textArea.scrollToBottom()\n\n    @QtCore.pyqtSlot()\n    def clearNewMessage(self):", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "            showProgress(false);\n            Toaster.showToast(activity, R.string.login_failed);\n        }\n    }\n\n    public void onPostLoginExecute(Boolean success) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "            (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     *", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "    return Pair(e1, e2, ty1)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Return the first projection of a pair.\n    \n    Arguments:\n    - `expr`: an expression or int or float", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "    void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(ClassicPlaybackUi classicPlaybackUi);\n    void inject(ClassicBookList classicBookList);\n    void inject(ClassicNoBooksUi classicNoBooksUi);\n    void inject(Classic", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "                throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return new SelectionChunk(informationCriterion);\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.pro", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "\t\n\t/**\n\t * \n\t */\n\tprivate final DocumentGraphEditor editor;\n\n\t/**\n\t * \n\t */\n\tprivate final SaltGraphUpdatable graphUpdatable;\n\n\t/**\n\t * \n\t */\n\tprivate final SDocumentGraph graph", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "    private List<SliceValue> sliceValues;\n    private List<SliceValue> sliceValues;\n    private List<SliceValue> sliceValues;\n    private List<SliceValue> sliceValues;\n    private List<SliceValue> sliceValues;\n    private List<SliceValue> sliceValues", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "\n            except TextGridParseError as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n            except TextGridParseError as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n            except TextGridParse", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "    request = PyramidSwaggerRequest(\n        Mock(\n            request_method='POST',\n            content_type='application/json',\n            body=b'{\"foo\": \"bar\"}'))\n    response = PyramidSwaggerResponse(\n        Mock(\n            request_", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "    '--fq, --filter-query-query QUERY-STRING When pull operations are used, '\n    'filter the instances in the result set by using a query',\n    '--fq, --filter-query-query-query-string When pull operations are used, '\n", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "        self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n\n\n\n\n\n", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected Location lastLocation;\n  protected boolean locationUpdateRequesterEnabled = false;\n  protected boolean locationUpdateRequesterEnabled = false;\n  protected boolean locationUpdateRequesterEnabled = false;\n  protected boolean locationUpdateRequesterEnabled =", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "                            logError(t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logError(t.getMessage());\n                        } else if(exceptionClass.equals(SdkClientException.class)){\n                            logError(t.", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "        print \"\\n[INFO] MobSF will perform Dynamic Analysis on VirtualBox based Android Virtual Device\"\n        refresh_avd(adb)\n    elif SETTINGS.ANDROID_DYNAMIC_ANALYZER == \"MobSF_VM\":\n       ", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "                                       join_keyword=u'\\u0906\\u0930\\u0935')\n\n    def test_full_e2e_english_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "        throw new QueryGrammarException(\"Cannot apply \" + exp.getOperator().getValue() + \" operation on a \" + exp.getLhsValue().getClass().getName() + \" expression.\");\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n     ", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "# 44018, section 10.2\n# RRC IE coding\n# 44018, section 10.3\n# RRC procedures dictionnary\n# 44018, section 10.4\n# RRC procedures", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "        CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "\t\t\tadjac = CreateAdjSet(v_lh, faces_lh, v_rh, faces_rh)\n\t\t\tadjac = adjac.add_argument(\"--vertexdist\", \n\t\t\t\thelp=\"Load supplied adjacency sets geodesic", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "\n            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlgorithm.ECD", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "    'CallName', 'ReprName', 'Pt', 'PtFunc', 'Val', 'Len', 'LenFunc', 'Repr', 'Trans', 'TransFunc', 'Dict', 'Dict', 'Type', 'Type', 'Type', 'Type', 'Type', 'Type', 'Type", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "\n    @property\n    def product_name(self):\n        return ul.get_board_name(self._board_num)\n\n    @property\n    def unique_id(self):\n        return ul.get_config_string(InfoType.EXPANSIONINFO, self", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "                        TimeEntryOvertimeAggregation.class));\n\n        timeEntriesTable.getColumn(\"overtime\").setCaption(messageBundle.getMessage(\"timeentry-all-approve.overtime\"));\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregation(\n               ", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "\n        draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if draft.status == DraftStatus.DRAFT:\n            return await Utilities.error(ctx.channel, f\"Draft {draft} is", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "        self.key_size = read_u16le(f)\n        self.index_name = decode_utf16le(f)\n\n        self.references = {}\n        for i in range(count):\n            self.references[i] = read_u", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "\n            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_CEX:\n            ex = Cex('bccbtc')\n        elif name == \"%s_BCC_ETH\" % constant.EX", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join %s') % site.name\n            template = 'accounts/invitation_email.html'\n            recipient = email\n            url =", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\telse {\n\t\t\ttextExpander = new QueryNodeExpanderFactory().createTextExpander(index);\n\t\t}\n\t\t\tresult.setTextExpander", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "            if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_children_or_self():\n            if item is not None:\n              ", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "                    MiPushClient.getInstance().init(this, getApplicationContext(), new MiPushClient.InitListener() {\n                        @Override\n                        public void onInit(int code) {\n                            if (code == MiPushClient.ClientInitResultCode.SUCCESS) {\n                              ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "    helpTestIteratorNormal(100, 10);\n    helpTestIteratorParanoid(100, 10);\n    helpTestIteratorCount(100, 10);\n    helpTestIteratorNormal(100, 10);\n    help", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "        return words_api(wordnik_api, wordnik_key, token)\n\n    @app.route('/api/word/<token>')\n    @as_json\n    def word_api_route(token):\n        return words_api(wordnik_key, token", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "    private final KadConfiguration config;\n    private final ConnectMessage connectMessage;\n    private final ConnectMessage connectMessage;\n    private final ConnectMessage connectMessage;\n    private final ConnectMessage connectMessage;\n    private final ConnectMessage connectMessage;\n    private final ConnectMessage connectMessage;\n   ", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "\tprivate Connector connector;\n\tprivate Connector connector;\n\tprivate Connector connector;\n\tprivate Connector connector;\n\tprivate Connector connector;\n\tprivate Connector connector;\n\tprivate Connector connector;\n\tprivate Connector connector;\n", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "                tablefmt = vtablefmt.TableFormat(\n                    numalign=numalign, stralign=stralign)\n            output.append(tabulate(rows, headers, tablefmt=tablefmt))\n    elif cur:\n        output.append(cur)\n    if status:", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "                    return roundEnv.getElementsAnnotatedWith(annotation);\n                })\n                .map(element -> {\n                    currentAnnotatedElement.set(element);\n                    return parserHolder.build(elementUtils, elementUtils, element);\n                })\n              ", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "        self.assertEqual(handle.kind, HANDLE_TYPE_EVENT)\n        self.assertEqual(handle.kind, HANDLE_TYPE_EVENT)\n        self.assertEqual(handle.kind, HANDLE_EVENT)\n        self.assertEqual(handle.kind, HANDLE", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "    protected PageParser pageParser;\n\n    protected PageParser pageParser;\n\n    protected PageParser pageHandler;\n\n    protected PageParser pageHandler;\n\n    protected PageParser pageParser;\n\n    protected PageParser pageParser;\n\n    protected PageParser pageHandler;\n\n   ", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root);\n        this.vms = new SpringVms(restTemplate, root);\n        this.jobs = new SpringJobs(restTemplate, root, deployments, vms);\n    }\n    \n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_SCREEN_SHOT_CODE:\n                return new BtnScreenShot();\n           ", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "            actionPopupGroup.add(ActionManager.getInstance().getAction(\"MongoEditor.AddKeyAction\"));\n            actionPopupGroup.add(ActionManager.getInstance().getAction(\"MongoEditor.AddKeyAction\"));\n            actionPopupGroup.add(ActionManager.getInstance().getAction(\"M", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "        form.getForm());\r\n\r\n        Composite composite = toolkit.createComposite(form.getFormNext line of code:\n        form.getFormNext line of code:\n        form.getFormNext line of code:\n        form.getFormNext line of code:", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "    private GuiButton addChannel;\n    private GuiButton addChannel;\n    private GuiButton addChannel;\n    private GuiButton addChannel;\n    private GuiButton addChannel;\n    private GuiButton addChannel;\n    private GuiButton addChannel;\n   ", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "        type = Type()\n        type.name = \"foo\"\n        type.format.pretty = \"bar\"\n        type.format.advanced = \"baz\"\n\n        self.assertEqual(\"bar\", type.format.pretty)\n        self.assertEqual(\"baz\",", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'write',\n        'frob': frob,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, SetStartTimeCommand.class, SetStartTimeCommand.fromCommand, this", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "    CreditPeriod activeCreditPeriod = null;\n    List<CreditPeriod> creditPeriods = new ArrayList<>();\n    List<CreditCard> creditCards = new ArrayList<>();\n    List<DailyExpense> dailyExpenses = new ArrayList<>();\n\n    //VIEW\n    Text", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif(fcp", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\nclass InventoryAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        'platform_slugs", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\n      if bytecode[k][0] == JUMP_OPCODES:\n        if bytecode[k][1] == JUMP_FALL_THROUGH:\n          cond_stack_size += 1\n        else:\n          cond_stack_size -=", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "        throw new ExceptionInInitializerError(\"chat == null);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)\r\n    View view;\r\n    ViewGroup container;\r\n    View root;\r", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "    }\n\n    // If the server response is not finished, we need to send the file again.\n    if (serverRawResponse == null) {\n      log(\"server response is: \" + serverRawResponse, null);\n      serverRawResponse = serverRawResponse;\n      serverMessage.", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "\n    def parse(self, ping_result: PingResult) -> PingStats:\n        return self.__parser.parse(ping_result=ping_result)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "    merged_assembly_points = merge_assembly_points(assembly_points=original_assembly_points,\n                                                    acyclic=args.allow_cycles,\n                                                    acyclic=args.allow_cycles,\n                                                    acyclic=", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "\t\t\t\t\tif (level.isInstalled())\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tif (!isSpaceAvailable(level.getSizeKb() * 1024)) {\n\t\t\t\t\t\t\tshowAlert(getString", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, isPrepared());\n        assertThat(qe, isPreparedOrBatchPrepared());\n        assertThat(qe, isCallable());\n        assertThat(", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/ther", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "    private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * Defines the component's active view mode.\n     */\n    protected ViewMode viewMode = ViewMode.Monthly;\n\n    /**\n     * Defines the component's active view mode.\n", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "\n        embed = Embeds.make_embed(header=\"Clembot Configuration\", header_icon=Icons.CONFIGURATION,\n                        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "        this.vms = new SpringVms(restTemplate, root, deployments);\n    }\n    \n    @Override\n    public Observable<DirectorInfo> info() {\n        return info.info();\n    }\n    \n    @Override\n    public Observable<List<Release", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "                } catch (FilesNotFoundException e) {\n                    // expected\n                }\n            }\n\t\t\t\n\t\t\tclient.deleteContainer(containerName);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                        if (home.getDimension() != null) {\r\n                            Intent intent = new Intent(mContext, IconDimensionActivity.class);\r\n                            intent.putExtra(IconDimensionActivity.EXTRA_DIMENSION, home);\r\n                            mContext.startActivity(intent);\r", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "    (signerId, keyId) -> {\n      if (signerId.equals(\"key1\")) {\n        return Lists.newArrayList(new RSAPublicKey(PRIVATE_KEY));\n      }\n      return Lists.newArrayList();\n    };\n\n   ", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "                    trackHistoryEntry = new TrackHistoryEntry(liveInfo.getTitle(), liveInfo.getTitle(), currentTime, liveInfo.getStreamUrl(), liveInfo.getAudioInfo());\n                    dao.insert(trackHistoryEntry);\n                }\n            });\n        }\n\n", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING, Default.ENCODING)\n    else:\n        encoding = encoding\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    if gopts.pager:\n      RunPager(cmd, gopts.pager_args)\n    else:\n      TerminatePager(cmd)\n\n    if cmd.manifest.IsMirror:\n      if cmd.manifest.IsMirror:\n", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "@OptionsItem(R.id.menu_add_as_favorite)\npublic void menuAddAsFavorite() {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "        return _item.playlistItemID\n        return _item.playlistItemID\n\n    def _getPlaylistItemID(self, item):\n        \"\"\" Match an item to a playlist item and return the item playlistItemID. \"\"\"\n        for _item in self.items", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "                // 设置结束执行时间\n                taskData.setFinishDate(new Date());\n                // 设置结束执行时间\n                taskData.setFinishDate(new Date());\n                // 设置结束执行", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "\n        self.__device = device\n        self.__ifb_device = self.__get_ifb_device(device)\n\n        if is_execute_tc_command(tc_command_output):\n            logger.debug(\"execute tc command: {}\".format(tc_command_output", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "        self.assertEqual(\n            _environment_to_string(\n                {u\"a\": u\"b\", u\"c\": u\"d\", u\"e\": u\"f\", u\"g\": u\"h\", u\"i\": u\"j\", u\"k\": u\"", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "        request = Entry.create(url=\"http://example.com/\", response=StaticResponse(200))\n        result = await r.perform(r)\n        self.assertEqual(result.status, 200)\n\n    @async_test()\n    def test_", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "            state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n        except AttributeError:\n            pass\n\n    def add_livings_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "        try {\r\n            if (dataLogDir == null)\r\n                dataLogDir = dataDir;\r\n        catch (Exception e)\r\n        {\r\n        }\r\n        /***/\n        /***/\n        /***/\n        /***/\n        /***/\n        /***/\n        /***/\n        /***/\n        /***/\n", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "        //用户的密码\n        stuMIMM = split[2];\n        //用户的密码\n        stuMIMM = split[3];\n        //用户的密码\n        stuMIMM = split[4];\n        //用户", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "            self.link.send_message(\"parameters\", [self.params])\n        except UncertainTimeError:\n            log.error(\"We couldn't find the root dispersion in ntpdc output.  Trying ntpdate...\"\n            self.link.send_message(\"parameters", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "        self.assertEqual(node_children(self.elem), [])\n        self.assertEqual(node_children(self.elem), [])\n        self.assertEqual(node_children(self.elem), [])\n        self.assertEqual(node_children(self.elem), [])\n", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t}\n\n\t/**\n\t * Method representing the Generate ant target :\n\t * \n\t * @param surveyName : the name of the survey\n\t * @param cleaningFolder", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "        MovieCursor movieCursorById = new MovieCursor(mContext.getContentResolver().query(MovieColumns.CONTENT_URI,null,where.sel(),where.args(),null);\n        DataTestUtilities.validateMovieCursor(\"query by id using library's syntax\", movieCursorById", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t\tmapView.setSatellite(true);\r\n\t\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutput", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mush", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def enviar_dados_venda(self, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "\n    def get_word_counts(self) -> Dict[str, int]:\n        \"\"\"\n        Calculate the word counts for each word in the corpus\n\n        Returns\n        -------\n        dict[str, int]\n            Dictionary of words and their counts\n        \"\"\"\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    # TODO: model exclusions handling\n    # TODO: better reference state handling\n    mod_srf.models['idmix'] = 0\n   ", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "    public static final String TextBlockObject = \"String\";\n\n    private static final String[] mTextBlockObject = new String[] {\n            \"String\",\n            \"String\",\n            \"String\",\n            \"String\",\n            \"String\",\n            \"String\",\n            \"String\",", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\t\t// Note: the H1 is not a child of the section, but of the body.\n\t\t// This is because the H1 is not a child of the section, but a child of the\n\t\t// body.\n\t\t// The section is a child of the body, but", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "\n    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_condition\",\n                     resource_class_", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic static Util getInstance()", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "                if(output == null) {\n                    Toast.makeText(getApplicationContext(),\"Error while cropping image\",Toast.LENGTH_SHORT).show();\n                    return;\n                }\n                if(CROP_ASPECT_RATIO == -", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "            GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        locker.doWhileLocked(new Runnable() {\n\n            public void run() {\n                dataset.addActivity(gcActivity);\n            }\n        }\n    }\n\n   ", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private Tree createTree() {\n        Tree tree = new Tree();\n        tree.setRootVisible(true);\n        tree.setShowsRootHandles(true);\n        tree.setShow", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "            '/properties':                    RestAppPropertys\n        }\n        \n        # Add the resources to the API\n        for resource, cls in self.resources.items():\n            self.api.add_resource(cls, resource=cls)\n\n        # Add the API to the application", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "    private final static GuiNewChatTC GUI = new GuiNewChatTC(Gui.getGui(), Gui.getChatManager());\n\n    private final static Map<Channel, GuiNewChatTC> CHANNELS = Maps.newHashMap();\n\n    private final static", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "    search = Search(engine=engine, model=model, index=index, key=key, filter=None, projection=\"all\")\n    search.mode = \"query\"\n    search.prepare()\n    search.prepare()\n    search.prepare()\n    search.prepare()\n   ", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "        self.settings_ini = SettingsINI(filename=settings_ini)\n        self.settings_ini = settings_ini\n        self.settings_ini = settings_ini\n        self.settings_ini = settings_ini\n        self.settings_ini = settings_ini\n        self", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "        void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface ItemClickListener {\n        /**\n         * Triggered when an item was clicked\n         *\n         * @param item\n         * The", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private Repo repo;\n    private RepoContents contents;\n   ", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "    group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet reordering", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "        self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, passwd):\n        self._pass = passwd\n        return self\n\n", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                       dim, vocab, lookup, cache=self._cache)\n            else:\n                raise NotImplementedError()\n\n        self._", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "            client.getBaseClient().send(new Packet(PacketType.NOOP), Transport.POLLING);\n            break;\n        }\n\n        case JOIN: {\n            String room = (String) packet.getData();\n            client.getBaseClient().send(new P", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "    PCollectionView<Map<GCPResource, KV<GCPResource, KV<StateSource, GCPResourceState>>> sideInput>\n    PCollection<GCPResource> projects =\n        pipeline.apply(\"Read projects from the CRM API\",\n        LiveProjectSource.read", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "    private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isConnected", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "            form.fields['perfil'].queryset = self.request.user.perfil.perfiles_permitidas.all()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request, *args, **kwargs):\n", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "        name = Column(String)\n        expiry = Column(Timestamp)\n        expiry = Column(String)\n        expiry = Column(String)\n        expiry = Column(String)\n        expiry = Column(String)\n        expiry = Column", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "    private int videoQuality;\n    private int videoQuality;\n    private int videoCount;\n    private int videoCount;\n    private int videoCount;\n    private int videoCount;\n    private int videoCount;\n    private int videoCount;\n    private int videoCount;", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.getColor());\n        descriptor.setDensity(fog.getDensity());\n        descriptor.setStart(fog.get", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t} catch (final SocketViewException e) {\n\t\t\tthrow new SocketViewException(e);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Running the benchmark\n\t *\n\t * @throws SocketViewException\n\t", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInDownRight(RotateInRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n   ", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    ci_pipeline_manager = CIPipelineManager()\n    ci_platform_manager = PlatformManager()\n    ci_platform_sync_manager = TransplatformSyncManager()\n    ci_pipeline_config_manager = PipelineConfigManager()\n    ci_pipeline_config_manager = P", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "      return\n    if root.data[0] == COMPARE_OP:\n      self._cstr = root\n      self._cstr = self.tree\n    self._cstr = self.tree\n    self._cstr = self.tree\n    self._cstr = self.", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorMoviesComponent plus(ActorMoviesComponent actorMoviesComponent);\n\n    void releaseBrowse", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tlogManager.logInfo(this, \"Building the wrapper.\");\n\t\t\treturn activateLoginIfRequested(createWrapper(serviceDiscoveryInfo,\n\t\t\t\t\tendpointType, apiKey, networkManager, dataParser));\n\t\t} catch (APIWrapperException e", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "  private ActionSupportHandler<RedirectAction>         redirectActionSupportHandler         = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<TransferAction>         transferActionSupportHandler         = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupport", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\n        else:\n            if fmt_token == 'g':\n                result = decimal_to_string(value, lang)\n            elif fmt_token == 'G':\n                result = decimal_to_string(value, lang).upper()\n            else:\n                result", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue selecc", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn Minigame.getMinigameInstance(plugin).getRound(round.toLowerCase()).addPlayer(this);\n\t}\n\n\t/**\n\t * Removes this {@link MGPlayer} from the given {@link Round round}.\n\t *\n\t * @param round the", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "\t\t\tif model_item.data.type == GeometryType.Sketch:\n\t\t\t\treturn default_flags | Qt.ItemIsEditable\n\t\t\telif model_item.data.type == GeometryType.Sketch:\n\t\t\t\treturn default_flags", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        array.items = [object1, object2, object3]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hydrate_", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "        hasJsonPath(query, hasJsonPath(\n                \"{\\\"hits\\\":{\\\"total\\\":{\\\"h\\\":{\\\"h\\\":{\\\"h\\\":{\\\"h\\\":{\\\"h\\\":{\\\"h\\\":{\\\"h\\\":{\\\"h\\\":{\\\"h\\\":{\\\"h\\\":", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "                        res = getResults(context);\n                    } catch (SQLException e) {\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>get(ContextKeys.THROWABLES).add(e);\n                        context.", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "\n        //TODO: C, this is not complete and needs to be cleaned up. for a simple example of consuming the data.\n        //TODO: AA, this is not complete and needs to be cleaned up.\n        //TODO: C, this is not complete and needs to be", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "        self.pkalg = PubKeyAlgorithm(val)\n\n    @sdproperty\n    def pktype(self):\n        return self._pktype\n\n    @pktype.register(int)\n    @pktype.register(int)\n    def pktype_int(", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "    url(r'^users/$', users_list, name='users_list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/(?P<name>.+)/edit/$', edit_user,", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "        obj.updateBuffImg()\n        obj.updateBuffImg()\n        obj.updateBuffImg()\n        obj.updateBuffImg()\n        obj.updateBuffImg()\n        obj.updateBuffImg()\n        obj.updateBuffImg()\n        obj.updateBuffImg()\n", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter writer = new GeoJSONWriter();\n\t\twriter = writer;\n\t}\n\n\tpublic void setWriter(GeoJSONWriter writer) {\n\t\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                            startMixedActivity();\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"test\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        Intent intent = new Intent(get", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "        f = derivative.XDA(d1, d2, d3)\n        assert f.diff_type == XorDiff\n        assert f.diff_type == XorDiff\n        assert f.diff_type == XorDiff\n        assert f.diff_type == Xor", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "        SASLMechanism.Challenge challenge = new SASLMechanism.Challenge(challengeData);\n        connection.notifyChallenge(challenge);\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        SAS", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "    DropDownMenu dropDownMenu;\n    DropMenuAdapter dropMenuAdapter;\n    CookBookAdapter adapter;\n    private String url;\n    private String url1;\n    private String url2;\n    private String url3;\n    private String url4;\n    private String url5", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, Node newFirst, Node newSecond);\n\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, Node newFirst, Node newSecond);\n\t\tpublic abstract Node transformMultiAlternation", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "        Bit('Cause', ReprName='Cause', Pt=4, BitLen=4, Dict=ESMCause_dict, Repr='hum'),\n        Bit('EMM', ReprName='EMM', Pt=6, BitLen=4, Dict=", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Add the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm.registerEvents(playerListener, new ArrayList<Event>());\n\t\tpm.registerEvents(blockListener, new Pl", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "    private AdapterWithHeader mAdapter;\n    private FastScroller mFastScroller;\n    private Toolbar mToolbar;\n    private Menu mMenu;\n    private MenuInflater mMenuInflater;\n    private MenuItem mMenuItem;\n    private PopupMenu m", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            mSongListAdapter.notifyDataSetChanged();\n        }\n    };\n\n    private AlbumEditorDialog.OnAlbumEditorDialogSuccessListener mOnAlbumEditorDialogListener = new AlbumEditorDialog.OnAlbumEditorDialogSuccessListener() {\n        @Override\n        public void onAl", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "    Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     * @param apiKey account api key\n    ", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "            mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mActivity, mSpectaculumView);\n            mImmersiveTouchNavigation = new ImmersiveTouchNavigation(mActivity, mSpectaculumView);\n        }\n        mSelectedEffect = effect;\n       ", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "\n    def _load_corpus_from_source(self) -> None:\n        \"\"\"\n        Load a corpus without using multiprocessing\n        \"\"\"\n        begin_time = time.time()\n        sanitize_function = None\n        if hasattr(self, \"san", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "    public void visit(LogMessage message) {\n      if (message instanceof LogMessage) {\n        LogMessage logMessage = (LogMessage) message;\n        if (logMessageParser.isInstrumentationLogMessage(message)) {\n          if (message instanceof InstrumentationLogMessage) {", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    try {\n      for (ICommentProcessor commentProcessor : commentProcessors) {\n        commentProcessorInterfaces.get(commentProcessor).run(document, proxyBuilder);\n      }\n    } catch (Exception e) {\n      throw new DocxStamperException(e);\n   ", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    erb(freq, bandwidth)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 132.639),\n      (1000, 132.639),\n      (3000", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "    @Override\n    protected void loadData(int page) {\n        adapter.clear();\n        adapter.addAllItems(result.patterns);\n        adapter.notifyDataSetChanged();\n    }\n\n    @Override\n    protected void loadData(int page) {\n        adapter.", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "\ndef check_args(args, fn_type, env):\n    args = [check(arg, env) for arg in fn_type.__args__]\n    for arg in args:\n        check_arg(arg, type_, env)\n    return args\n\n\ndef check_", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "def read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset=0):\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset=0):\ndef read", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "\n    @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags += NotationDataFlags & val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags =", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            TemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type == 0", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "        self.textInput.setText(\"\")\n        self.textInput.setFocus()\n\n    def addMessage(self, lexmsg, chumopen):\n        self.textArea.append(self.chum.pesterchum(lexmsg, self.chumopen))", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "    # TODO: add aicc_feature_factors to the feature_transforms\n    feature_transforms = feature_transforms(features)\n    feature_transforms = feature_transforms(features)\n    # TODO: add aicc_feature_factors to feature_transforms", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                   @Query(\"q\") String query,\n                                   @Query(\"limit\") int limit,\n                                   @Query(\"pos\") String pos,\n                                   @", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "\n    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (isNull(controller) || isNull(componentController) || isNull(fsmPlayer))", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t\n\t\n", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "        return Stream(self, model, position)\n\n    def transaction(self, mode, *objs, condition=None, sync=None):\n        \"\"\"Create a :class:`~bloop.transactions.Transaction` that can be used to perform\n        multiple operations atomically.\n\n", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "\n    def vertex_from_record(self, record):\n        return Vertex.from_graph(self, record._id, record)\n\n    def edge_from_record(self, record):\n        return Edge.from_graph(self, record._id, record)\n\n", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "\n        self.log.info(\"confusion matrix:\")\n        self.plot_confusion_matrix(confusion_matrix, data_set.label_map.values(),\n                                    normalize=True,\n                                    title=\"Confusion matrix\")\n\n        self.log", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SimpleNode node) {\n        return", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\n    @scoped_subgraph\n    def decoder(self) -> StandardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the shifted encoder input sequences as input, and is initialized with zero initial states.\n\n        Returns\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nall_product_slugs = []\nfor product in Product.objects.all():\n    all_product_slugs.append(product.product_slug)\n", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\", \"Mean\", \"StdDev\", \"Min\", \"Max\", \"Mean\", \"StdDev\", \"Min\", \"Max\", \"Mean\", \"StdDev\", \"Min\", \"Max", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "      for edge in visitor.edges:\n        if edge.kind == ControlFlow.E_LOOP:\n          return edge.source\n\n    def get_loop_edges(node):\n      class BwdEdges(EdgeVisitor):\n        def __init__(self):\n          EdgeVisitor", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveSIEJ(self, _):\n        site = self.GetSelectedSite()\n        DocumentDialog(self, ReleveSIEJMod", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "                    else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        RoomMember member = JsonUtils.toRoomMember(event.content);\n                        if (member.getUserId().equals(mMyUserId)) {\n                           ", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "            H += dot(crossmat(c - p), m * H_trans) + dot(I, H_rot)\n            H_trans = crosstens(H_trans)\n            H_trans = crosstens(H_trans)\n            H_trans = c", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI32ToDDI33Preprocessor ddi32ToDDI33 = new DDI", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "            _log.info('Initializing a zero prior for the parameters.')\n        else:\n            raise ValueError('prior must be a dict, PriorSpec, or None')\n        if isinstance(prior, dict):\n            if 'name' not in prior:\n                prior['name", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "        View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n        }\n\n        final QueuedProjectResult queuedProjectResult = queuedProjectResult;\n        final Pattern pattern = queuedProjectResult.getPattern();", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "      return Const.fromName(arg)\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg)\n  elif op == LOAD_ATTR:\n    return Const.fromName(arg)\n  elif op == LOAD_GLOBAL:\n    return Const.", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tpublic List<AuthorWithBooks> findAll() {\n\t\tList<AuthorWithBooks> authors = new ArrayList<>();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BOOK", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "                new MigrateCommand(),\n                new RefreshCommand());\n        logger.info(\"EconomyLite \" + PluginInfo.VERSION + \" is initialized!\");\n    }\n\n    private void initializeCurrencies() {\n        currencyEconService = new CurrencyService();", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "\tprivate final Physics physics = new Physics();\n\tprivate final FringeLayer fringe = new FringeLayer();\n\tprivate final PingPongEq pingpong = new PingPongEq();\n\tprivate final Config config = new Config();\n\n\tpublic ClientMaster()", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "\tpublic SQLBatch(Class<T> rootClass) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass);\n\t}\n\tpublic SQLBatch(Class<T>rootClass) {\n\t\tsuper();\n\t\tthis.schema = new Schema(root", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Keyword('baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_record_field():\n    inc_", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview = new TempSensorView", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "        install_and_run(adb, app_info, True)\n        \n        # 开始自动化测试\n        auto_app_test(adb, app_info)\n        \n        # 下载日志\n        download_logs(adb, download", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));\n", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer);\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer);\r\n\t\tregisterRenderer(Boolean.class, new DefaultBooleanRenderer);\r\n\t\tregisterRenderer(Integer.class, new DefaultIntegerRenderer);\r\n\t\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "    Genotype parseGenotype(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of genotypes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list of gen", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "\t\t\t\t\tself._viewWidget.part_view.selected_features = [selection[0]]\n\t\t\t\t\tself._viewWidget.part_view.selected_features = [selection[0]]\n\t\t\t\t\tself._viewWidget.part_view.selected_", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) {\n\t\tif (elt", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "    account = account_for_vimeo_id(access_token_data['oauth_uid'], person=request.user.person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "                            return new NotFoundException(cause);\n                        case 405:\n                            return new APIIncorrectException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return cause;\n", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "    url(r'^new$', staff_member_required(AddCIPipeline.as_view(), login_url=LOGIN_URL), name=\"add-ci-pipeline\"),\n    url(r'^(?P<pipeline_id>[0-9a-f-", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                pointing_dir, pointing_mag = xyToRaDecPP(platepar, x_mean, y_mean, ht, indicate_limit=True, elev_limit=ele", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "        self.assertEqual(list(etree_iter_paths(root)),\n                         ['/a/b1/c1', '/a/b1/c1', '/a/b1/c1',\n                          '/a/c1', '/a/c1', '/a", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "\n    @Override\r\n    public void onClick(View view) {\r\n        int id = view.getId();\r\n        int position = getAdapterPosition;\r\n        if (id == R.id.card) {\r\n            if (sIsClickable) {\r\n                sIsClickable =", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "        self.runner.add(self.rule, with_child=True)\n        self.runner.add(ContentSimhashSampling(), with_child=True)\n        self.runner.add(ContentSimhashSampling(), with_child=True)\n        self.runner.add", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    grid_params = np.zeros((options['density'], 4))\n    grid_params = np.zeros((options['density'], 4))\n    grid_params = np.zeros((options['density'], 4))\n    grid_params = np.zeros((", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "            EtsiResponse resp = this.client.sendRequest(req);\n            \n            // 5. Get the Signing Certificate\n            if (chain == null) {\n                chain = this.getCertChain(this.msisdn, apTransId);\n            }\n", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "            Board.this.rollDices();\n          }\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth() - rollBtn.getWidth()) / 2);\n    rollBtn.setY(getY() + (boardbg.", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "    cfe = CFeCancelamento(\n            chCanc=_opcao('--ch-canc'),\n            chCanc=_opcao('--ch-canc'),\n            chCanc=_opcao('--ch-canc'),\n            chCanc=_op", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a list of relatives.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a list of", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "        DeviceInfo deviceInfo = AndroidDeviceDetailsInfo.Companion.getDeviceInfo();\n        userFeedback.setDeviceInfo(deviceInfo);\n        userFeedback.setAppInfo(packageInfo);\n        feedbackView.showLoading();\n        feedbackUseCase.sendFeedback(user", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "            request[table_name] = request.get(table_name, {})\n            request[table_name] = request.get(table_name, {})\n            request[table_name] = request.get(table_name, {})\n            request[table_name] = request.", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "            RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverview;\n\tprivate List<Game> game;\n\tprivate List<TeamLeaders> teamLeaders;\n\tprivate List<TeamLeadersResponse> teamLeaders;\n\tprivate List<TeamRosterResponse> teamRoster;\n\t", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "    def ativar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.ativar_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: sat", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "        xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"/\" />'\n        self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), '/')\n        document =", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                print(draw_art(fingerprint))\n            else:\n                print('{0} {1} {2}'.format(fingerprint, description, created_at))\n\n    async def list_vaults(self, with_art=False):\n       ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "    private final OAuth2Requester requester;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "    private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final Jobs jobs;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n       ", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "            self.logger.error(\n                f\"Error initializing training for {self.identifier}: {e}\"\n            self.logger.error(\n                f\"Error initializing training for {self.identifier}: {e}\"\n            self.logger.error(\n                f\"", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    @Subscribe\n    public void onClick(ActionPerformedEvent event) {\n        if (event.getAction() == ActionPerformedEvent.Action.CLICK) {\n            if (event.getAction() == ActionPerformedEvent.Action.CLICK) {\n                if (", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "        for (int loopcall = 0; loopcall = 0; loopcall = 0; loopcall = 0; loopcall = 0; loopcall = 0; loopcall = 0; loopcall = 0; loopcall = 0; loopcall = 0;", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "    public void sendMessage(String text)\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.CONNECTED)\n            {\n                throw new IllegalStateException(\"Fitting connection is not connected.\");\n            }\n", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "  public void init(MutableConfig config) {\n    var config = config();\n    config.set(config, \"module\", config.moduleName());\n    config.set(config, \"mainClass\", config.moduleName());\n    config.set(config, \"version\", config.", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null\");\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList nodeList = element.getElementsByTagName", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "            VotingModule.class,\n            ScoreboardModule.class,\n            BroadcastsModule.class,\n            SpectatorModule.class,\n            KitsModule.class,\n            ScoreboardModule.class,\n            FriendlyFireModule.class,\n            BroadcastsModule.", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        DownloadQueue downloadQueue = new DownloadQueue();\n        downloadQueue.start();\n        return downloadQueue;\n    }\n\n    /**\n     * Create a new download queue.\n     * @param downloadQueueSize\n     * @return {@", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\tnew APP14Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DACSegment(aJ", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "                        ExeSQL(sql)\n                        #print('update status sql: ',sql)\n                        #print('update status sql: ',sql)\n                        #print('update status sql: ',sql)\n                        #print('update status: ',ret)\n                        #print", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "        LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        properties.addLore(key);\n\n        PacketSyncLore.updateLore(entityPlayer);\n\n        entityPlayer.addChatMessage(new ChatComponentText(String.format(\"G", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "            left_foot_task = DOFTask(self.robot, self.robot.left_foot,\n                                    swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "    private static final DateTimeFormatter SUMMARY_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\n\n    private final UserDAO userDAO;\n    private final BudgetDAO budgetDAO;\n    private final BudgetTypeDAO budgetTypeDAO;\n", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "            if (sl == null) {\n                JOptionPane.showMessageDialog(null, \"Keine Sammellastschrift ausgewählt\",\n                        \"Sammellastschrift exportieren\", JOptionPane.ERROR_MESSAGE);\n            } else if (type == H", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode, search_mode=search_mode)\n        if issubclass(bvf_cipher, RelatedKeyCh):\n            problem = SearchRkCh(ch, der_mode=der_mode, search_mode", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "\n\ndef generate_pronunciations_arguments(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: Dict[str, str],\n    word_boundary_paths: Dict[str, str],\n    ali", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "\n    def test_hosts_container(self):\n        \"\"\"\n        Test HostsContainer.\n        \"\"\"\n        hc = HostsContainer(\n            hosts=[\n                LocalHost1(),\n                LocalHost2(),\n                LocalHost3(),\n                LocalHost", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "\tprivate static final Logger logger = Logger.getLogger(Util.class);\n\t\n\tprivate static final StringUtil stringUtil = StringUtil.getInstance();\n\tprivate static final MathUtil mathUtil = MathUtil.getInstance();\n\tprivate static final ClasspathUtil classpathUtil = ClasspathUtil.", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = new ArrayList<>();\n\n        Cursor cursor =  db.query", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInX", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "    private MonthGridCallback monthGridCallback;\n\n    private OnMonthChangeListener monthChangeListener;\n\n    private OnDayChangeListener dayChangeListener;\n\n    private OnMonthChangeListener monthChangeListener;\n\n    private OnMonthChangeListener monthChangeListener;\n\n    private OnDayChange", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "            if command.startswith(\"tc\"):\n                return True\n\n        return [\n            \"tc {:s} {:s} {:s} {:s} {:s} {:s} {:s} {:s} {:s} {:s}", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "        auth_data=None,\n        no_prompt=False,\n        no_prompt=False,\n        auth_data=None,\n        no_prompt=False,\n        no_prompt=False,\n        no_prompt=False,\n        no_", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "\t\t\tif isinstance(model_item.data, Drawing):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, Feature):\n\t\t\t\tdefault_flags = default_flags | Qt.", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\n    my_stream = white_noise(", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "        data.setOperation(DrumOperation.UPDATE);\n        return data;\n    }\n\n    @Test\n    void testAppendUpdate() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleDataStoreImpl<>(this.testDir + \"/cache", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "\n    self._varz.message_bytes_sent()\n    self._varz.message_bytes_sent()\n    self._varz.message_bytes_sent()\n    self._varz.message_bytes_sent()\n    self._varz.message_bytes_sent", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "      f = freq2lag(v)\n      l = lag2freq(f)\n      assert l == v\n      assert l == v\n\n  def test_freq_lag_converters_are_inverses_with_complex_inputs(self):\n    for v", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "        assertThat(out.toString(), equalTo(\n                \"ThreadDumpRuntime{threads=[ThreadDumpThread{name=remotely-observed-thread,id=1,status=RUNNABLE,stacktrace=[StackTrace{elements=[ThreadStackTraceElement{line=1,file=", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();\n        builder.setLocale(Locale.CANADA);\n        builder.setBaseName(\"translator.properties\");\n        builder.setBaseName(\"translator.properties\");\n        builder.setBaseName(\"", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "        welcomeString.setText(Utils.getUserName(getActivity()));\n        return header;\n    }\n\n    private void initializeEvents() {\n        // Initialize the events...\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(MENU_ID_IMAGE", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "    self._ping_ar = AsyncResult.Run(\n      AsyncResult.Run(\n        functools.partial(self._PingCallback, self._ping_ar, self._ping_ar)\n      )\n    self._ping_ar.set(self._ping_ar)", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "            // Everything went fine\n            Toaster.getInstance().toast(R.string.chat_created, Toast.LENGTH_LONG);\n            // Notify the fragment that the chat was created\n            ObservableRegistry.getObservable(classToNotify).notifyFragment(new CreateChatParam(success", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        LOG.info(\"response: {}\", JSON.toJSONString(response));\n\n        Assert.assertEquals(response.getResultCode(), \"SUCCESS\");\n        Assert.assertEquals(response.getResultCode(), \"SUCCESS", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "    public int readSmallIntValue(int d1) throws IOException {\n\t\tint d2 = in.read1();\n\t\tint tag = d1 & 0x07;\n\t\tif (d2 == 0x00) {\n\t\t\treturn d1", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "    if operands[0] is None:\n        return operands[1]\n    else:\n        return operands[1]\n\n\n@method('eq')\n@method('ne')\n@method('ne')\n@method('lt')\n@method('gt')\n@", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "\n    self.mgmt = management.Management(self)\n\n    self.mgmt = mgmt.Mgmt(self)\n\n    self.mgmt = mgmt.Mgmt(self)\n\n    self.mgmt = mgmt.Mgmt(self)", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n            MacOsPingParser,\n            NullPingParser,\n        )\n        for parser_class in parser_class_list:\n            if typepy.is_not_null_string(ping", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "            self._probe = probe\n        # Load the probe from the kwik database.\n        else:\n            self._probe = _load_probe()\n        # Load the probe adjacency list.\n        self._probe_adjacency_list = _load_probe_adjacency", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "        MessageTranslated messageTranslated = creator.create(KEY,\n                new MessageMapperEnum(\"key\", \"value\"),\n                new MessageMapperEnum(\"key\", \"value\"));\n\n        assertEquals(MessageTranslated.class, messageTranslated.getClass());\n        assertEquals", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "      self._cdg = ControlDependence(self)\n    return self._cdg\n\n  @property\n  def entry_node(self):\n    return self._entry_node\n\n  @property\n  def exit_node(self):\n    return self._exit_node\n", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "    @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.build", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "            draws = self.RNG.permutation(event_list)\n            draws = self.RNG.permutation(event_list)\n            draws = self.RNG.permutation(event_list)\n            draws = self.RNG.permutation(event", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n  public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (inExp.getValues().isEmpty())\n      throw new QueryGrammarException(\"Cannot apply IN with one NULL value\");\n\n    result.append", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "                        expectLastCall().andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\n        /******/\n        // set width\r\n        m.width = Integer.parseInt(m.videoSetWidth.getText());\n        // set height\r\n        m.height = Integer.parseInt(m", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "\t\t\tString[] args = { \"src/main/java/fr/insee/eno/preprocessing/DDI2XFORMSPreprocessor.java\" };\n\t\t\tGenerationService service = new GenerationService(args);\n\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "\tpublic void acceptString(final FixTag tag, final CharSequence value) {\n\t\tif (value == null) {\n\t\t\tthrow new InvalidValueException(tag, \"String value cannot be null\");\n\t\t}\n\t\t\tif (value.length() > 80", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "    with pytest.raises(InvalidModel):\n        engine.bind(String)\n\n\ndef test_bind_model(engine):\n    \"\"\"Can bind models\"\"\"\n    engine.bind(User)\n\n\ndef test_bind_model_with_index(engine):\n   ", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "        self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e\", replace_blank_name(name=u\"\\u0906\\u092a\\u0915\\u093e", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "\n        # Make sure we're looking at models\n        validate_not_abstract(model)\n\n        # Make sure we're looking at models\n        validate_not_abstract(model)\n\n        # Make sure we're looking at models\n        validate_is_model(model", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "        if name is None:\n            index = -1\n        else:\n            index = index\n        tag = TAG(self._sptr, \"Sound\")\n        if index is -1:\n            while True:\n                tag = TAG(byref(tag))\n              ", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "        ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        ObservableRegistry.getInstance().remove(this);\n    }\n\n    @Override\n    public void notifyFragment(QRData parameter) {\n        if (parameter !=", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def teste_fim_a_fim(self, dados_venda, *args, **kwargs):\n        \"\"\"Sobrepõe :meth", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "\n    ['Verify instance command references --no, returns paths, explicit ns',\n     ['references', 'TST_Person.name=\"Mike\"', '--no', '--namespace', 'root/cimv2'],\n     {'stdout': ['\"root/cimv2:", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "    column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \"#n0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "        // Load modules\n        loadModules();\n        // Load commands\n        loadCommands();\n        // Load listeners\n        loadListeners();\n    }\n\n    private void loadListeners() {\n        // Load listeners\n        loadCommands();\n        loadListeners();\n    }\n\n    private void", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page\n\t\t\t);\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::success);\n            wifiLog(\"ERROR COULDN'T CONNECT\");\n        }\n    };\n\n    @NonNull\n    private final WifiConnectionReceiver mWifiConnectionReceiver = new WifiConnectionReceiver()", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "\n        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState.class", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "        resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], 3)", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "            if request.user.userprofile.comment_karma < 0:\n                messages.error(request, 'You have negative comment karma.')\n                return redirect(reverse('ploghubapp:home_page'))\n        if request.user.userprofile.comment_", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Jobs jobs;\n    private final Errands errands;\n    private final Deployments deployments;\n    private final Vms vms;\n   ", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending gifs\n     *\n     * @param serviceIds a {@link Map} of a collection of ids for better content delivery", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "        for (PlaySession session : stack.getPlaySessionList()) {\n            session.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCard", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "    public void listenToException(final AbstractPerfidixMethodException paramException) {\n        if (paramException instanceof PerfidixMethodInvocationException) {\n            final BenchmarkMethod benchmarkMethod = ((BenchmarkMethod) paramException.getRelatedElement();\n            final", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        #if rem > 0:\n        #    self.append(Bit('%s' % self.rest_name, BitLen=rem))\n        #    self.append(Bit('%s' % self.rest_name, BitLen=rem))\n        #\n        #", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "\n\ndef segment_vad_arguments(\n    vad_path: str,\n    segmentation_options: MetaDict,\n    speaker: Speaker,\n    file: File,\n    text: str,\n    channel: str,\n) -> SegmentVadArguments:\n", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "                section.end_of_message = True\n            section.end_of_message = True\n\n        # TODO: This is a hack to fix the length of the message\n        # The length of the message is calculated by the number of bytes\n        # written to the bitwriter.\n", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "\t\t\tpublic void onResult(DefaultDataConnector connector, Object data) {\n\t\t\t\tif (data instanceof ProgramTrack) {\n\t\t\t\t\tProgramManager.getInstance().setProgramList(data, data.mTimeTable);\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "        form = ReportAbuseForm(request.POST)\n\n        if form.is_valid():\n            comments = form.cleaned_data['comments']\n\n            # Log moderation event\n            log_moderator_event(msg_type=ModerationLogMsg.RE", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/record.php\"), BEEP(true), SEND_TONES(true), EXIT_TONE(\"http://www.example.com/exit.php\"));\n\t\ttropo.hangup();", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n        public static void enableReceiveNormalMsg(boolean enable)\r\n            new EnableReceiveNormalMsgApi().enableReceiveNormalMsg(enable);\r\n        /***/\n    /***/\n    /***/\n    /***/", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "    u7 = Unit(\"Msun/pc**3\")\n    assert u7.dimensions == energy\n    assert u8.dimensions == energy\n    assert u9.dimensions == energy\n    assert u10.base_value == 1.0\n\n    # Test r", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\t\t\tappEvent.post(AppEvent.EXIT) ;\n\t\t\t\t\t\tstage.close();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                if (_isTyping != m.isTyping())\n                {\n                    addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, m));\n                }\n            }\n           ", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "    String className = adapterName(type.getQualifiedName());\n    String superclassName = bindingOf(type.getQualifiedName());\n    String injectableTypeName = injectableType(type.getQualifiedName());\n    String injectableTypeName = injectableType(type.get", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "                    public void startNewOrderActivity(Account account) {\n                        startActivity(OrderEditController.newIntent(MainActivity.this, account.getId()));\n                    }\n\n                    @Override\n                    public void startSettingsActivity() {\n                        startActivity(SettingsActivity.", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "    if is_comment_node(elem) and context.parent_map.get(elem) is None:\n        name = node_name(item)\n        return f'/comment({name})[{context.position}]'\n    elif is_element_node(elem):\n       ", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "            GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0)", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "\n    def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def drop_nan(self):\n        \"\"\"Drop all the records where the column is empty\"\"\"\n        dropnan_table", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "            Platform.runLater(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    Alert alert = new Alert(AlertType.INFORMATION, \"Error adding to queue: \" + e.getDump().getStacktrace(), Button", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "        assertThat(main.getLock(), nullValue());\n        assertThat(main.getLock(), nullValue());\n        assertThat(main.getStackTrace(), nullValue());\n        assertThat(main.getStackTrace(), nullValue());\n        assertThat(main.getStackTrace(), nullValue());\n        assertThat(main", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "        return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    @property\n    def outbox(self):\n        return Outbox(self)\n\n    @property\n    def account_id", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "                DatePicker datePicker = new DatePicker(this,\n                        new DatePicker.OnDatePickListener() {\n                    @Override\n                    public void onDatePick(Calendar date) {\n                        mTimeText.setText(date.toRecordTime());\n                       ", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "\n    public static void flushSensorDataCache(final int type, final String deviceID)\n    {\n        if(type == 1 || type == 0)\n        {\n            AccelerometerSensorCollector.flushDBCache(deviceID);\n        }\n        if(type ==", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "        self.tracerouter = Tracerouter.Tracerouter(self)\n        self.time_manager = TimeManager.TimeManager(self)\n        self.time_manager = self.time_manager\n        self.time_manager = self.time_manager\n        self.time", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "        self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_device(self, device):\n        self.__device_parser.parse(\n           ", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.d", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "        if index == -1:\n            self._call_fmod(\"FMOD_Sound_GetTag\", byref(tag), index, name)\n        else:\n            self._call_fmod(\"FMOD_Sound_GetTag\", byref(tag), index, name)\n", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_eq_thermochemical_prob", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "\n    # section 9.2.13\r\n    class LOCATION_UPDATING_ACCEPT(Layer3):\r\n    '''\r\n    ME -> Net\r\n    Dual\r\n    # content #\r\n    IE #1: IEI, IE #2: IE", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "    def validation_error(exc_type):\n        return SwaggerMappingError\n\n    def test_validation_error_decorator_transforms_SwaggerMappingError():\n        exc_type = SwaggerMappingError\n        with pytest.raises(exc_type):\n            validation", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
{"pred": "        // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tfinalize(1);\n        }\n\n        // Checking PhyML binary\n        if (!PhyMLv3A", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "    AdRetriever adRetriever;\n\n    @Mock\n    AdInterface adInterface;\n\n    @Mock\n    AdInterface vpaidClient;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLogicController componentController;\n\n", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\n\ndef test_parameters_msgtype3():\n  '''\n  Zero", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\t\t\tEXOG.append(dmy_leftvar)\n\t\t\tEXOG.append(dmy_rightvar)\n\n\t\t\tTvalues_A = glm_cosinor(dmy_rightvar,\n\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "    private SetOtherFragment setOtherFragment;\n    private ViewPager mViewPager;\n    private TabLayout mTabLayout;\n    private ViewPager mViewPager;\n    private ViewPager mViewPager;\n    private ViewPager mViewPager;\n   ", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "    // TODO(jontayler): figure out why we need to do this here.\n    // TODO(jontayler): figure out why we need to do this here.\n    // TODO(jontayler): figure out why we need to do this here.\n    // TODO(", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
