{"pred": "    private final transient KademliaRoutingTable routingTable;\n    private final transient KadConfiguration config;\n\n    /* Used to store the state of the node */\n    private final File stateFile;\n\n    /* Used to store the state of the routing table */\n    private final File routingTableFile;\n\n    /* Used to store the", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "        mImmersiveSensorNavigation = new ImmersiveSensorNavigation(activity);\n        mImmersiveSensorNavigation.attachTo(new ImmersiveEffect());\n        mImmersiveSensorNavigation.setListener(this);\n        mImmersiveTouchNavigation = new ImmersiveTouchNavigation(activity);\n        mImmersiveTouchNavigation.attachTo", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "class Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        return tuple([x + y])\n\n\nclass Cipher1(Cipher):  # noqa: D", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        eventCallbacks.put(event.getId(), event);\n        eventCallbacks.put(event.getEventId(), event);\n        eventCallbacks.put", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private ImmersiveEffect mImmersiveEffect;\n    private FlowAbsEffect mFlowAbsEffect;\n    private QrMarkerEffect mQrMarkerEffect;\n    private FlowAbsSubEffect mFlowAbsSubEffect;\n    private StackEffect mStack", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "\t\t\tPath vaultLocation = args.vaultLocation();\n\t\t\tSet<Problem> problems = integrityCheck.check(vaultLocation, passphrase, args.checkFileIntegrity());\n\t\t\tif (problems.isEmpty()) {\n\t\t\t\tprint(\"Vault is OK\");\n\t\t\t} else {\n\t\t\t\tprint(\"Vault has problems\");\n\t\t\t\tprint();\n\t\t\t\tprint(\"", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务元信息管理器\n     */\n    private TaskMetaInfoManager taskMetaInfoManager;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务配置", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n    assertEquals(new U2fSignRequest(\"U2F_V2\", SERVER_CHALLENGE_SIGN_BASE64, APP_ID_SIGN,\n        SESSION_ID), signRequest);\n  }\n\n  @Test\n", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "            DebugManager.INSTANCE.storePrivatePublicKeyToExternalStorage(rsa.getPrivKeyinBase64(), rsa.getPubKeyinBase64());\n            return true;\n        } catch (RestServiceException e) {\n            Log.e(this.getClass().getSimpleName(), e.getMessage());\n            return false;\n        }\n    }\n\n    @Override\n", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "    __typeid__ = 1\n    def __bytearray__(self):\n        return bytearray([self.tag, self.length, self.uri])\n\n    def parse(self, packet):\n        self.tag = 1\n        super(URI, self).parse(packet)\n        self.uri = packet.read(self.length).decode('", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        VideoFragment fragment = new VideoFragment();\n        fragment.setArgs(args);\n        activity.replaceFragment(fragment);\n", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "            self.acctA = RadiusAccounting(self.global_config, self.cId)\n            self.acctA.setParams(self.username, self.cli, self.cld, self.cGUID, self.cId, self.remote_ip, self.rDone)\n        self.state = CCStateARComplete\n        if self.uaA", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "            if num_children == 0:\n              cstr_node.lhs = Const.fromValue(None)\n            else:\n              cstr_node.lhs = convert_ast_constraint(children[0])\n              process_children(cstr_node.lhs, children[0])\n\n            if num_children == 2:\n              cstr_node.rhs", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "        ''' Valid arguments. '''\n        ''' Valid arguments. '''\n        ''' Valid arguments. '''\n        ''' Valid arguments. '''\n        ''' Valid arguments. '''\n        ''' Valid arguments. '''\n        ''' Valid arguments. '''\n        ''' Valid arguments. '''\n        ''' Valid arguments. '''\n        ''' Valid arguments. '''\n        ''' Valid arguments", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "        String login = AppSettings.sUserLogin;\n        String message = AppSettings.sFindPeopleMessage;\n        String email = AppSettings.sUserEmail;\n        String name = AppSettings.sUserName;\n        String avatarUrl = AppSettings.sUserAvatarUrl;\n        PostLocationDataBody data = new PostLocationDataBody", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        email = Column(String)\n        joined = Column(DateTime, dynamo_name=\"j\")\n        by_email = GlobalSecondaryIndex(hash_key=\"email\", projection=\"all\")\n\n        def __new__(cls, *args, **kwargs):\n           ", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "    if isinstance(result, XPathNode):\n        yield result\n    elif isinstance(result, tuple):\n        yield from result\n    else:\n        yield result\n    yield from self[1].select(copy(context))\n\n\n@method(infix('||', bp=32))\ndef nud_union_operator(self):\n    self.parser.advance('", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "    private static final ButterKnife.Action<View> SHOW_ALL = (view, index) -> view.setVisibility(View.VISIBLE);\n    private static final ButterKnife.Action<View> HIDE_ALL = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW_ALL_EXCEPT = (view, index) ->", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n                    new MirrorTransformation(),\n                    new PolarTransformation(),\n                    new PosterizeTransformation(),\n                    new", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "        wild.set_message(wild_report)\n        await wild.insert()\n        wild.monitor_task = wild.create_task_tuple(wild.monitor_status())\n        await ctx.send(f\"Reported {wild.pkmn.label} at {wild.location} for {wild.reported_at}.\")\n\n    @group(pass_context=True, category='", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "                writeResponse(CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "  assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude == 50.\n  assert doppler.period_s == 3.\n  assert doppler.coeffs == (", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "    data = SNLIData(path=c['data_path'], vocab=vocab, batch_size=c['batch_size'])\n    # Load model\n    if c['model_path']:\n        model = LoadNoUnpickling(path=c['model_path'])\n    else:\n        model = None\n    # Load retrieval\n    if", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "        assert self.redlock.locked()\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert not self.redlock.locked()\n\n    def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        with self.assertRaises(ReleaseUnlockedLock):\n            self.redlock.release()\n       ", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "                Intent intent = new Intent(getActivity(), RaffleActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n                finish();\n            } else {\n                Toast.makeText(getActivity(), R.string.warning_raffle, Toast.LENGTH_SHORT).show", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "    @calg.register(CompressionAlgorithm)\n    def calg_int(self, val):\n        self._calg = CompressionAlgorithm(val)\n\n    def __init__(self):\n        super(CompressedData, self).__init__()\n        self.calg = 0\n\n    def __bytearray__(self):\n        _", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "        return ConeSettings(self._sptr, \"Sound\")\n\n    @property\n    def threed_cone_orientation(self):\n        \"\"\"The orientation of the 3D projection cone.\n\n        :type: VECTOR\n        \"\"\"\n        vec = VECTOR()\n        self._call_fmod(\"FMOD_Sound_Get3DC", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume / 200f);\n        } else if (accuracy == Accuracy.NICE) {\n            Assets.niceTapSound.play(Global", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "        cellSize = findCellSize(img2, imgshape, verbose = verbose, out = out, **parameter);\n        \n        #intensity of cells\n        cellIntensity = findCellIntensity(img2, imgshape, verbose = verbose, out = out, **parameter);\n        \n        #return (centers, cell", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "            while (transactionIterator.hasNext()) {\r\n                Transaction t = transactionIterator.next();\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private boolean checkFileValid(File file) {\r\n        return file.exists() && file.isFile() && file.canRead();\r\n", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                }\n            }\n        return pgm;\n    }\n\n    /**\n     * Get an in memory representation of broken SQL query. This may require \n     * contacting druid for resolving dimensions Vs metrics for SELECT queries\n     * hence it also optionally accepts HTTP request headers to be sent out.\n     *\n     * @param", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "                    UsageEncryption.OSY,\n                    OperationMode.CBC,\n                    EncryptionAlgorithmCoded.TWOKEY3DES,\n                    algorithm_parameter_value=b'\\x00' * 16,\n                    algorithm_parameter_name=AlgorithmParameterName.KYP,\n                    algorithm_parameter_iv_name=AlgorithmParameterIVName.IVC,\n                    algorithm_parameter_iv", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                            if (env.combExpCheckNum[i]!= 0) {\n                                env.numCombExpCheck = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.USE_WARNING_RECURSION) {\n            if (env.hasRecursion", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "    url(r'^save-pipeline-config$', ajax_save_pipeline_config, name=\"ajax-save-pipeline-config\"),\n    url(r'^run-pipeline-config$', ajax_run_pipeline_config, name=\"ajax-run-pipeline-config\"),\n    url(r'^toggle-pipeline-config$', ajax_toggle_pipeline_config, name=\"ajax-toggle-pipeline", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "        self._storage_type = storage_type\n        return self\n#\n# DB CREATE\n#\n# Creates a new database in the OrientDB Server instance. It returns true (non-zero) or false (zero).\n#\n# Request: (database-name:string) (database-type:string) (server-storage-type:string)\n#", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "\t\tEnumMap<SRSLevel, Integer> colors;\n\t\t\n\t\tString notEnoughData;\n\t}\n\t\n\tprivate class ResourceData2 {\n\t\t\n\t\tMeter meter;\n\t\t\n\t\tEnumMap<SRSLevel, Integer> colors;\n\t\t\n\t\tString notEnoughData;\n\t}\n\t\n\tprivate class ResourceData3 {\n\t\t\n", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "    public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(\n            CheckedSupplier<$Argument2> givenStep) {\n        preparation.recordGivenStep(givenStep);\n        return new GivenTwoArgumentsWhenSteps<>(preparation);\n    }\n\n    @Override\n    public", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "    try {\n      return process.await();\n    } catch (CommandFailureException e) {\n      if (e.result().exitCode() == 0) {\n        return e.result().stdoutStringUtf8();\n      } else {\n        throw new IosDeviceException(RealDeviceImpl.this, e);\n      }\n   ", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tMessage message = XmlUtil.fromXml(Message.class, xml);\n\t\tlog.info(\"weixin >>> \" + message);\n\t\tAbstractEvent event = message.asEvent();\n\t\tif (event instanceof ReceivedTextMessage) {\n\t\t\tReceivedTextMessage textMessage = (ReceivedTextMessage) event;\n\t\t\tString text = text", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "\t\tif (Themer.theme == Themer.DARK) {\n\t\t\ttextColor = Color.WHITE;\n\t\t} else {\n\t\t\ttextColor = Color.BLACK;\n\t\t}\n\t}\n\t\n\tprivate void setTextSize() {\n\t\tif (Themer.theme == Themer.DARK) {\n\t\t\ttextSize = Themer.text", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "    # 1. 获取运行时特征\n    # 2. 保存运行时特征\n    # 3. 运行该 apk 文件\n    # 4. 获取运行时特征\n    # 5. 保存运行时特征\n    # 6. �", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "    @channel_checks.raid_report_enabled()\n    async def cmd_raid_city(self, ctx, *city):\n        \"\"\"\n        **!raid-city city** - to set the city for the raid report\n        \"\"\"\n        city =''.join(city)\n        raid_party = self.get_raid_party_for_channel(ctx", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25).date())\n        self.assertEqual(date_string_to_date(\"11/12/2012\"), datetime(2012, 12, 11).date())\n        self.assertEqual(date_string_to_date(\"", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "        config_actor = ConfigActor('config.json', '/tmp')\n        config_actor.start()\n        gevent.sleep(1)\n\n        # setup database actor\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start()\n        gevent.sleep(1)\n\n        # setup honeypot session", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                            ShareUtil.sharePicture(mActivity, picUrl, holder.tv_content.getText().toString());\n                            break;\n                        case 1:\n                            FileUtil.savePicture(picUrl, mSaveFileCallBack);\n                            break;\n                    }\n                })\n               .show());\n\n        holder.img_comment.setOnClickListener(v -> IntentHelper.toCommentListActivity(m", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\tsaveauto(positive_data, masking_array, \"pFWER_%s\" % opts.tmifile[0], affine_array)\n\t\t\t\t\telif opts.outtype[i] == 'ply':\n\t\t\t\t\t\tsave_ply(positive_data, masking_array, \"pFWER_%s\" % opts.tmifile[0", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "                OhmageSyncAdapterTest.class,\n                OhmageSyncAdapter.class,\n                OhmageSyncAdapterTest.class,\n                OhmageSyncAdapterTest.class,\n                OhmageSyncAdapterTest.class,\n                OhmageSyncAdapterTest.class,\n                OhmageSyncAdapterTest.class,\n                OhmageSyncAdapterTest.class,\n               ", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ECDSA:", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "      'no_members': Counter\n    }\n\n  def __init__(self, next_provider, sink_properties, global_properties):\n    super(HeapBalancerSink, self).__init__(next_provider, sink_properties, global_properties)\n    self._heap = []\n    self._heap_lock = RLock()\n    self._down", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "    else:\n        # XSD typed selection\n        for item in context.iter_self():\n            if is_schema_node(item):\n                self.add_xsd_type(item)\n            elif item is context.root:\n                # item is the schema\n                for xsd_element in item:\n                    self.add_xsd_type(xsd_element", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "        assertEquals(\"query\", qe.getQuery());\n        // end::query[]\n    }\n\n    public void statement() {\n        // tag::statement[]\n        ProxyTestDataSource ds = new ProxyTestDataSource(actualDataSource);\n\n        //... perform application logic with database...\n\n        // each execution\n        StatementExecution se = ds.get", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "        nc._send_message_with_protocol('foo', protocol)\n        protocol.send_string.assert_called_once_with('foo')\n\n    def test_send(self):\n        \"\"\"\n        Ensures that the message is translated into a dictionary and passed\n        into the protocol object in the expected way.\n        \"\"\"\n        nc = NetstringConnector(self", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "                log.info(\"Queuing ADR MAC Command\")\n                command = self._createLinkADRRequest(device)\n                self._dequeueMACCommand(device.deveui, command)\n                self._queueMACCommand(device.deveui, command)\n                continue\n            else:\n                # Send the ADR request\n               ", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionSuccessFailure() {\n        StatementExecution se = new StatementExecution();\n        se.setSuccess(true);\n\n        ProxyTestDataSource ds = new ProxyTestDataSource", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "                    function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        succeeded, failed = return_queue.get(timeout=1)\n                        sum_errors +=", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# 802.15.4 MAC header\n#\n# 802.15.4 MAC header\n#\n# 802.15.4 MAC header\n#\n# 802.15.4 MAC header\n#\n# 802.15.4 MAC header\n#\n# 802.15.4 MAC", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "        ObservableRegistry.getObservable(ChatSettingsInfo.class).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(ChatSettingsInfo.class).remove(this);\n    }\n\n    @Override\n    public void notifyFragment(Chat chat) {\n        this.chat = chat;\n", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "        if (mPublicRoomsListList == null) {\n            mPublicRoomsListList = new ArrayList<PublicRoom>();\n        }\n\n        if (mPublicRoomsListList.size() == 0) {\n            mPublicRoomsListList.add(new PublicRoom());\n        }\n\n        if (mPublicRoomsListList.size", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "            jd = self.img_handle.time\n\n        else:\n\n            # Get time from config\n            jd = self.config.time\n\n        json_dict['time'] = jd2Date(jd, self.config.UT_corr, dt_obj=True)\n\n        # Save the reference time\n        json_dict['time'] = jd2", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "        chim_detect = ChimeraDetector(raw_bp_graphs[run_stages[-1]],\n                                      run_stages, target_sequences)\n\n    #running scaffolder\n    logger.info(\"Running scaffolder\")\n    scaffolder = scfldr.Scaffolder(raw_bp_graphs[run_stages[0]],\n                                   run_st", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "        self.bingo_card_manager = BingoCardManager(self.dbi)\n        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_data_generator = BingoDataGenerator()\n        self.global_config_cache = GlobalConfigCache(self.dbi, bot)\n        self.guild_metadata = GuildMetadata(bot, self.bot.guild)\n", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "                    startMiPush();\n                    stopGcmPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HwPush\":\n                if(shouldInit()) {Next line of code:\n                    startHwPush();\n                    stopGcmPush();\n                    Log.e", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n    }\n\n    @Override\n    public void onDisable() {\n        // Save translations\n        translator.save();\n    }\n\n    @Override\n   ", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n    public boolean dirty = false;\n   ", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(OBJECT_NAME));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (SEND_NOTIFICATION ^ RESPONSE_MASK), new", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "        if (packet.getType() == PacketType.MESSAGE) {\n            if (packet.getSubType() == PacketType.EVENT) {\n                onEvent(packet, client);\n            } else if (packet.getSubType() == PacketType.ACK) {\n                onAck(packet, client);\n            } else if (packet.get", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "    /**\n     * It creates the chart panels for the given metric.\n     *\n     * @param metric The metric that will be shown in the chart.\n     * @param datasetGenerator The generator that will produce the datasetGenerator\n     * for this chart.\n     */\n    private void createChartPanels(int metric,", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "            contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, -1L);\n            contentValues.put(JobStorage.COLUMN_LAST_RUN, -1L);\n            contentValues.put(JobStorage.COLUMN_NUM_FAILURES, 0);\n            contentValues.put(JobStorage.COLUMN_TRANSIENT, false);\n            contentValues.put(JobStorage.COLUMN_EXACT, false);\n            contentValues", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "    # create a journal instance\n    journal = DiskJournal(basedir, system_data_path)\n\n    # create a publisher instance\n    publisher = Publisher([journal])\n\n    # create a copynet instance\n    copynet = CopyNet(obj, ipc=True)\n\n    # create a copynet slave instance\n    copy", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "        VideoCapturer capturer = VideoCapturer.create(appRtcClient.deviceName());\n        if (capturer == null) {\n          logAndToast(\"No video capturer found!\");\n          return;\n        }\n        VideoSource videoSource = factory.createVideoSource(capturer.takeNativeVideoCapturer());\n        Video", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "    Observable<Board> allBoards = Observable.fromArray(SectionNames).flatMap(new Function<String, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull String sectionName) throws Exception {\n        return SMTHHelper.getInstance().wService.getBoardsInSection(sectionName).flatMap(new Function<", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "    private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n    private CheckBoxPreferenceHideMenuButton preferenceHideMenuButton;\n    private CheckBoxPreferenceHideMenuButton preferenceHideMenuButton;\n    private CheckBoxPreferenceHideMenuButton preferenceHideMenuButton;\n    private CheckBoxPreferenceHideMenuButton preference", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "            docker_config.add_environment_variables(\n                {\n                    \"CLICK_EXEC\": self.config.project_files.find_any_executable(),\n                    \"CLICK_EXEC_PARAMS\": \" \".join(self.config.project_files.find_any_exec_args()),\n                }\n            )\n\n        if self.config.debug_gdb:\n            DebugGdbSupport(self.config).update(docker", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "\t\t// TODO writeTML\n\t\t// TODO writeTML\n\t\t// TODO writeTML\n\t\t// TODO writeTML\n\t\t// TODO writeTML\n\t\t// TODO writeTML\n\t\t// TODO writeTML\n\t\t// TODO writeTML\n", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "        FragmentObservable<SearchContactFragment, SearchContactFragment.DataClass> obs =\n                ObservableRegistry.getObservable(SearchContactFragment.class);\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable<SearchContactFragment, SearchContactFragment.DataClass> obs =\n", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "            showResponse = true;\n        } else {\n            showResponse = false;\n        }\n        if (httpMessage.getReq().hasRequest()) {\n            isRequestEditor = true;\n        } else {\n            isRequestEditor = false;\n        }\n        if (httpMessage.getRes().hasResponse()) {\n            textarea", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "        simulator_data_client = SimulatorDataClient(MockSimulatorDataListener(), \"127.0.0.1\", 10500)\n        simulator_data_client.transport = MagicMock()\n        simulator_data_client.transport.write = MagicMock()\n        simulator_data_client.transport.write.side_effect = lambda x, y: None\n        simulator_data_client", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "        self._fileobj.seek(next_offset)\n        try:\n            chunk = self.parse_next_subchunk()\n        except EmptyChunk:\n            break\n        except InvalidChunk:\n            break\n        self.__subchunks.append(chunk)\n\n        # Calculate the location of the next chunk\n        next_offset = chunk.offset + chunk.size", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "    assert simple_table_status(description) == expected_status\n    # END simple_table_status\n    # END simple_table_status\n    # END simple_table_status\n    # END simple_table_status\n    # END simple_table_status\n    # END simple_table_status\n    # END simple_table_status\n    # END simple", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "                    new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new ExposureTransformation(),\n                    new GainTransformation(),\n                    new GrayscaleTransformation(),\n                    new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new MapColorsTransformation(),\n", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "    visitProxOp(new VisitOrd3(n), query);\n    return null;\n    }\n\n    visitCheckForProx(new VisitCheckOp3(n), query);\n\n    return null;\n  }\n\n  /**\n   * f0 -> CheckOrd4Search() f1 -> ( Ord3Search() )?\n   */\n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "    api = BalancingData(args.apikey)\n    if args.fromdate is None:\n        print(\"A from date should be supplied using the --fromdate flag. Format is YYYY-MM-DD. Defaulting to today\")\n    if args.todate is None:\n        print(\"A to date should be supplied using the", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "            if self._header[1] == 1:\n                exception_class = b'PyOrientNullRecordException'\n            elif self._header[1] == 2:\n                exception_class = b'PyOrientBadMethodCallException'\n            elif self._header[1] == 3:\n               ", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "    assert dump_key(engine, user) == user_key\n    user.email = \"foo@bar.com\"\n    user_key = {\"id\": {\"S\": \"foo\"}, \"email\": {\"S\": \"foo@bar.com\"}}\n    assert dump_key(engine, user) == user_key\n    user.age = ", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn items;\n\t}\n\n\t// ================================================\n\n\t/**\n\t * Returns a list of images matching", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "        new TaskName()), StaticString.CONDITIONAL_WHITESPACE,\n        new Spinner(Spinner.SPINNER_SLASHES), StaticString.WHITESPACE,\n        new Percentage(), StaticString.WHITESPACE,\n        StringWrapper.wrap(\"[\", new ProgressBar(50, BAR_EQUALS), \"]\"), StaticString.W", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static FormFor formFor(Object resource) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n\tpublic static FormFor formFor(Object resource, Object... fields) {\n\t\treturn new FormFor(resource);\n\t}\nNext line of code:\n\tpublic static FormFor formFor(Object resource) {\n\t\treturn", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "    Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example:\n     * <pre> assertThat(ds.getBatchStatements(), batch(", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "            events.append(Event(e))\n\n        return events\n\n    # Provider\n    def list_providers(self, params=None):\n        data = self.call_api(\"providers\", type=\"GET\", params=params)\n        providers = list()\n        for p in data[\"providers\"]:\n            providers.append(Provider(p))\n\n        return providers\n\n", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "  private static final Pattern RANGE_EXTRACTOR2 = Pattern.compile(\r\n      \"^(.+)\\\\srng\\\\s(.+)$\", Pattern.CASE_INSENSITIVE);\r\n  private static final Pattern BOOST_EXTRACTOR = Pattern\r\n     .compile(\"^(.*?)\\\\^(\\\\d+(?:\\\\.\\\\d+)?)", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "        }\n    }\n}\n```\n```\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.res.Resources;\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.graphics.RectF;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.support.annotation.NonNull;\nimport android", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "        self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # If the beginning time was not found, try to read it from the first frame\n        if self.beginning_datetime is None:\n            self.beginning_datetime = self.vidinfo.currentTime(dt_obj=True)\n\n        # Compute the number of frames", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);\n\t}\n}\njava/squeek/spiceoflife/foodtracker/foodgroups/FoodGroup.java\npublic class FoodGroup\n{\n\tpublic static final String CATEGORY_FOODGROUPS = \"foodgroups\";\n\tpublic static final String CATEGORY_FOOD", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "\t\tARG_CHECKER.check(args,mode='converting')\n\t\tif args.hdf5:\n\t\t\tif args.id:\n\t\t\t\tif args.id_genotype is None:\n\t\t\t\t\traise ValueError('You need to convert minimac data to genotype per subject files first')\n\t\t\t\tif args.id_genotype is not None:\n\t\t\t\t\tif", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n\t\t\t\t\t\t// TODO: Add description\n", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "    p = exactpsf.FixedSSChebLinePSF(kfki=1.07, zslab=-29.3, alpha=1.17,\n            n2n1=0.98, sigkf=-0.33, zscale=0.89, laser_wavelength=0", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "        if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=0, bp=79, label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None:\n        raise self.missing_context", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "        if post.user.username!= username:\n            messages.error(request, 'You are not allowed to access this post.')\n            return redirect(reverse('ploghubapp:home_page'))\nNext line of code:\n        if not post.can_delete():\n            messages.error(request, 'You are not allowed to delete this post.')\n           ", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "    S = states.PolyFitState([P, H, I], [im, tile], model_as_data=True)\n    S.optimize_from_initial(max_mem=1e9, invert='guess', rz_order=3,\n                            min_rad='calc', max_rad='calc')\n    return S\ndef make_image", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "        self._keyclass = [val]\n\n    @keyclass.register(bytearray)\n    def keyclass_bytearray(self, val):\n        self.keyclass = val.decode('latin-1')\n\n    @sdproperty\n    def algorithm(self):\n        return self._algorithm\n\n    @algorithm.register(list)\n    def algorithm", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "Timeline/Handlers/Puffle.py\n@PacketEventHandler.onXT('s', 'p#ps', WORLD_SERVER)\r\ndef handlePuffleSave(client, puffle, sendPacket = True):\r\n    puffleById = {i.id: i for i in client['data'].puffles}\r\n    puffle = puffle", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "    platepar.rotation_from_horiz = RMS.Astrometry.ApplyAstrometry.rotationWrtHorizon(platepar)\n\n    # Recompute the FOV size\n    platepar.fov_h, platepar.fov_v = RMS.Astrometry.ApplyAstrometry.computeFOVSize(platepar)\n\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "            manager = mp.Manager()\n            error_dict = manager.dict()\n            return_queue = manager.Queue()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = compile_information_func(args)\n                p = KaldiProcessWorker(i, return_queue, function, error", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "        Log.d(this.getClass().getSimpleName(), \"onStart\");\n        FragmentObservable<ChatSettingsRemove, Chat> obs = ObservableRegistry.getObservable(ChatSettingsRemove.class);\n        obs.register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        Log.d(this.getClass().getSimpleName(), \"", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "        contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_SCHEDULED_AT, 60_000L);\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_FLEX_MS, 60_000L);\n        contentValues", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "        model = Progress\n        fields = ['year', 'value', 'area', 'area_type', 'component']\n", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "            fab.collapse();\n        }\n    }\n\n    @UiThread\n    protected void setBottomInfo() {\n        TextView unit = (TextView) findViewById(R.id.unit);\n        unit.setText(prefs.unit().get() < 1? \"台斤\" : \"公斤\");\n        TextView low = (TextView)", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "            @Override\n            protected void onFailure(final Throwable cause) throws Exception {\n                context.handleError(cause);\n            }\n        }).then(new OnComplete<Channel>() {\n            @Override\n            protected void onComplete(final Channel channel, final Throwable cause) throws Exception {\n                if (cause!= null) {\n                    context.handleError(", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "        new RegisterFragment.RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/asyncTasks/server/GetInfoTask.java\npublic class GetInfoTask extends AsyncTask<Void, Void, Boolean> {\n\n    @Override\n    protected void", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "    private final SpatialOperator spatial = new Geography();\n    private final Cost<MatcherTransition> cost = new Cost<MatcherTransition>() {\n        @Override\n        public double cost(MatcherTransition transition) {\n            return transition.cost();\n        }\n    };\n    private final Cost<MatcherTransition> bound = new Cost<Matcher", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "    private List<FilterType> filterTypes;\n    private HashMap<String, List<FilterType>> filterTypeHashMap;\n    private HashMap<String, List<FilterType>> filterTypeHashMap2;\n    private HashMap<String, List<FilterType>> filterTypeHashMap3;\n    private HashMap<String, List<FilterType>>", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "        graphics.draw_colored_triangles(tris, fills)\n        self.display_list = None\n        self.triangles = None\n        self.outlines = None\n        self.svg.n_tris = 0\n        self.svg.n_lines = 0\n        self.svg.n_markers = 0\n        self", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "  assert isinstance(args.gps_sv[0].getMessage(), ConstMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  ZeroOne message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '--message-type', 'zeroone']\n  args =", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow && ClipBoardAction.isShowInStatusBar) {\n                    isClipBoard", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "\t\t\t\tif (data.startsWith(\"app\")) {\n\t\t\t\t\ta = new AppData(reader);\n\t\t\t\t\tapps.add(a);\n\t\t\t\t} else if (data.startsWith(\"shortcut\")) {\n\t\t\t\t\ta = new ShortcutData(reader);\n\t\t\t\t\tapps.add(a);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "\t\tString methodName = fhead.ID().getText();\n\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(methodName);\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void exitFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.exitFunction(ctx", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "        self.beg_alt, self.beg_azim = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], self.lat, self.lon)\n        self.end_alt, self.end_azim = raDec2AltAz(self.ra_array[-1], self.dec", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "    private CodeGeneratorFactory codeGeneratorFactory;\n\n    public OpenAPIProcessor() {\n        parserFactories.add(new SpringParserFactory());\n    }\n\n    @Override\n    public Set<String> getSupportedOptions() {\n        return optionsBuilder.getSupportedOptions();\n    }\n\n    @Override\n    public SourceVersion getSupportedSourceVersion", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "src/main/java/com/bazaarvoice/jless/ast/visitor/InclusiveNodeVisitor.java\npublic class InclusiveNodeVisitor extends NodeNavigationVisitor {\n\n    @Override\n    public boolean enter(Node node) {\n        return true;\n    }\n\n    @Override\n    public boolean visit(Node node) {\n        return true", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "                    if (snapFile == null) {\r\n                        snapFile = snapshots.get(i);\r\n                    } else if (snapFile.contentEquals(snapshots.get(i))) {\r\n                        snapFile = null;\r\n                    } else if (snapFile.contentEquals(snapshots.get(i - 1))) {\r\n                        snapFile = snapshots.get", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "        bind(GerritPushExtension.class);\n        bind(GerritRestModule.class);\n        bind(GerritToolWindow.class);\n        bind(GerritUiModule.class);\n        bind(GerritActionsModule.class);\n        bind(GerritDiffModule.class);\n        bind(UtilsModule.class);\n        bind(Gerr", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "    ]\n    def __init__(self, CallName='', ReprName=None, \n                 Pt=None, PtFunc=None, Val=None, \n                 Len=None, LenFunc=None,\n                 Repr=\"hum\",\n                 Trans=False, TransFunc=None):\n        if CallName or not self.CallName:\n            self", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "            entries = [e for e in entries if txn_matches(e.transaction, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.transaction.has_unassigned_split]\n        elif filter_type is FilterType.Income:\n            entries = [e for e in entries if", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "    rad = 0.5 * np.random.randn(POS.shape[0]) + 4.5  # 4.5 +- 0.5 px particles\n    # 2. create image\n    img = Image(POS, rad, tile=(0, 0, 0, ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Observable.just(query);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.map(query -> query.length() > 0)\n\t\t\t\t.subscribe(hasQuery -> {\n\t\t\t\t\tsearchList.setVisibility(hasQuery? View.VISIBLE : View.GONE);\n\t\t\t\t\ttabLayout.setVisibility(hasQuery? View.GONE :", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "        result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)\n\n    \ndef apply_or(left: Column, right):\n    if type(right) == Column:\n       ", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                    stringBuilder.append(\"\\n\\nName: \")\n                           .append(RequestFragment.sSelectedRequests.get(i).getName());\n                }\n\n                if (CandyBarApplication.sRequestProperty!= null) {\n                    stringBuilder.append(\"\\n\\nEmail: \")\n                           .append(CandyBarApplication.sRequestProperty.getComponentName().getPackageName());\n               ", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "elementpath/datatypes/numeric.py\nclass Float10(float, AnyAtomicType):\n    name = 'float'\n    xsd_version = '1.0'\n    pattern = re.compile(\n        r'^(?:[+-]?(?:[0-9]+(?:\\.[0-9]*)?|\\.[", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "            return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'ShowsAzPage':\n            return ShowsAzPage()\n       ", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "                if pattern.datafile is not None:\n                    if not checkFileExistence(pattern.datafile):\n                        errmsg += \"Data file %s does not exist.\\n\"%pattern.datafile\n            else:\n                if pattern.datafile is not None:\n                    if not checkFileExistence(pattern.datafile):\n                        errmsg +=", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "    serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class = ThemeSerializer\n    filter_class = ThemeFilter\n    ordering_fields = ('id', 'code',", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\nNext line of code:\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\nNext line of code:\n    private CommitItem", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(preprocessors, ddi2fo, postprocessors);\n\t\tFile file = generationService.generateQuestionnaire(new File(basePathDDI2FO + \"/ddi2fo.xml\"), \"ddi2fo\");\n\t\tSystem.out.println(file.getAbsolutePath());\n\t}\n}\n", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                        user.setPw(password);\n                        new ChangePasswordTask(user).execute();\n                    }\n                });\n\n        // \"Cancel\" button to cancel the dialog\n        alert.setNegativeButton(R.string.CANCEL,\n                new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                        // Canceled.\n                   ", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()), name=\"package-new\"),\n    url(r'^edit/(?P<slug>[\\w-]+)$', staff_member_required(UpdatePackageView.as_view()),\n        name=\"", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "  encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert encoder.l2Index == NormalRateConfig.GPS.L", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "    return tgAsDict[\"tiers\"][0][\"entryList\"]\n\n\nclass TestTextgrid(unittest.TestCase):\n    def setUp(self):\n        self.tg = textgrid.openTextgrid(\n            join(\"tests\", \"data\", \"test_textgrid.textgrid\"),\n            includeEmptyIntervals=True,\n        )\n\n    def", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                    try:\n                        done, no_utts, unvoiced = return_queue.get(timeout=1)\n                        if stopped.stop_check():\n                            continue\n                   ", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "            dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset = NfS(root_dir)\n        self._check_dataset(dataset)\n\n    def test_lasot(self", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "            yield chunk_idx, bounds\n\n    def iter_chunks_with_overlap(self, n_samples):\n        \"\"\"Iterate over chunks with overlap.\"\"\"\n        rate = self._kwargs['sample_rate']\n        chunk_size = int(self._kwargs['chunk_size_seconds'] * rate)\n        overlap = int(self._kwargs['chunk_overlap_seconds", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid();\n    Validity isValid", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\tprivate Validator validator;\n\tprivate FolderCleaner folderCleaner;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator = new SchemaValidatorImpl();\n\t\tvalidator", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(anyQueryNode);\n\t\t\treturn result;\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic ExpansionResult expandQuery(FieldOptions fieldOptions, Expander", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "                        if (content.equals(\"\")) {\n                            continue;\n                        }\n                        if (lp.detectLanguage(content, lang).isReliable) {\n                            FileSaver fs = new FileSaver(content, lp.detectLanguage(content, lang).languageCode, \"twitter\", url, tweet.getId());\n                            fs.save(logDb);\n                           ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "        registry.put((byte) (ATTRIBUTE ^ RESPONSE_MASK), new MarshalledResponseHandler<Attribute>(ATTRIBUTE));\n        registry.put((byte) (ATTRIBUTE_LIST ^ RESPONSE_MASK), new MarshalledResponseHandler<AttributeList>(ATTRIBUTE_LIST));\n        registry.put((byte) (BOOLEAN ^ RESPONSE_MASK), new MarshalledResponseHandler", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "        help=\"\"\"network latency time [milliseconds].\n        the minimum latency time is 0 ms.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 10ms\n        \"\"\".format(\n            _get_unit_help_msg()\n        ),\n    )\n    group.add_argument(\n        \"--delay", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "        return self._render_bufr_message(obj)\n        return self._render_template_data(obj)\n        return self._render_descriptor(obj)\n        return self._render_query_result(obj)\n        raise PyBufrKitError('Unknown object {} for rendering'.format(type(obj)))\npybufrkit/renderers.py\nclass", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "        return Contact.objects.filter(phone_number=self.phone_number)\nNext line of code:\n        return Contact.objects.filter(phone_number=self.phone_number).order_by('date_of_birth')\nNext line of code:\n        return Contact.objects.filter(phone_number=self.phone_number).order_by('date_of_birth').first()\nNext line of code:\n", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "    PCollection<GCPProject> liveProjects = pipeline.apply(\n        \"Read live projects\",\n        Read.from(new LiveProjectSource(org)));\n\n    // Convert live projects to GCPResourceState objects.\n    PCollectionTuple liveStatesTuple = liveProjects.apply(\n        ParDo.named(\"Convert live projects to Java objects\")\n", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "        self.generator = SimilarPathGenerator()\n\n    def test_get_pattern_for_directory(self):\n        self.assertEqual(self.generator.get_pattern_for_directory(\"/\"), \"/\")\n        self.assertEqual(self.generator.get_pattern_for_directory(\"/a\"), \"/a/\")\n        self.assertEqual(self.generator.get_pattern_for_directory(\"/a/b\"), \"/a/b/\")\n        self", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "        ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ffibuilderRX.compile(tmpdir=cls.tmpdirnameRX.name, verbose=VERBOSE)\n        spec", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "        conditions.append(AndCondition())\n    if \"or\" in operations:\n        conditions.append(OrCondition())\n    if \"not\" in operations:\n        conditions.append(NotCondition())\n    if \"eq\" in operations:\n        conditions.append(ComparisonCondition(column, value))\n    if \"ne\" in operations:\n       ", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 0\n        assert get_square_idx(0, 2) == 0\n        assert get_square_idx(1, 0) == 1\n        assert get_square", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "      self.next_sink.Close()\nNext line of code:\n      self.next_sink.Close()\nNext line of code:\n      self.next_sink.Close()\nNext line of code:\n      self.next_sink.Close()\nNext line of code:\n      self.next_sink.Close()\nNext line of code:\n      self.next_sink.Close()\nNext line of", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "    private final ICompilationUnit testBase;\n    private final ICompilationUnit testClass;\n    private final ICompilationUnit testBase;\n    private final ICompilationUnit testClass;\n    private final ICompilationUnit testBase;\n    private final ICompilationUnit testClass;\n    private final ICompilationUnit testBase;\n   ", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "    javadoc.destination().ifPresent(destination -> cmdLine.add(\"-d\", destination));\n    javadoc.moduleSourcePath().ifPresent(moduleSourcePath -> cmdLine.add(\"--module-source-path\", moduleSourcePath));\n    javadoc.upgradeModulePath().ifPresent(upgradeModulePath -> cmdLine.add(\"--", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPE", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "\tprivate boolean debugImages = true;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = true;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = true;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = true;\n\tprivate boolean debugImages = false;\n\tprivate boolean debugImages = true;\n\tprivate", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)\n\n    def consultar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: satcfe.res", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "    @ForApplication\n    @SfwMode\n    @Nsfw\n    @SfwMode\n    @Nsfw\n    @SfwMode\n    @Nsfw\n    @SfwMode\n    @Nsfw\n    @SfwMode\n    @Nsfw", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace2_event_log)\n    else:\n      git_trace2_event_log.Write()\n\n    if gopts.time:\n      start = time.time()\n\n    cmd = self.commands[name]()\n    if not isinstance(cmd, GitcAvailable", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "        Assert.assertThat(ds, totalQueryCount(5));\n    }\n\n    @Test\n    public void testTotalCountWithBatch() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  // select\n        queryExecutions.add(getMockSelectQuery", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "        return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckOutCommand()\n", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "            showProgress(false);\n            Toast.makeText(getActivity(), R.string.error_login_failed, Toast.LENGTH_LONG).show();\n        }\n    }\n\n    public void onPostRegisterExecute(Boolean success) {\n        AbstractYasmeActivity activity = (AbstractYasseActivity) getActivity();\n\n        if (success) {\n            //Initialize database", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "        VerifierProperty validSchemaVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFileExistsVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFileExistsVerifier = new RemoteFilesExistVerifierImpl();\n\n        currentVerifiers.add(validSchemaVerifier);\n        currentVerifiers.add(localFileExists", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     * @param password the user's plaintext password\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "        lexed = lexMessage(text)\n        self.textArea.addMessage(lexed, self.chum)\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.selectAll()\n        self.textInput.setFocus()\n        self.textInput.selectAll()\n        self.textInput.setFocus()\n        self.textInput.selectAll()\n", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRAnd", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "            (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem/(\\w+)/(\\w+)', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/debug', DebugHandler),\n           ", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "    return Pair(e1, e2, typing.sig(ty1, ty2))\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"First projection for pairs.\n    \n    Arguments:\n    - `expr`: an expression\n    \"\"\"\n    return Fst(expr)\n\n\n@with_info(st_term)\ndef snd(expr", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "    private List<Expense> expenses;\n    private List<ExpenseCategory> expenseCategories;\n    private List<SliceValue> pieData;\n    private List<BigDecimal> expenseByCategory;\n    private CreditCard creditCard;\n    private CreditPeriod creditPeriod;\n    private int creditPeriodIndex;\n    private int creditPeriod", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "                throw new ProtTestInternalException(\"Criterion \" + criterion + \" not supported\");\n        }\n        return informationCriterion;\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.facade.ProtTestFacade#computeInformationCriterion(pal.alignment.Alignment, es.uvigo.d", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "\t@Override\n\tpublic void enterAnnotateCommand(AnnotateCommandContext ctx) {\n\t\t// TODO Auto-generated method stub\n\t\t// TODO Auto-generated method stub\n\t\t// TODO Autovalidating\n\t\t// TODO Auto-generated method stub\n\t\t// TODO Auto-generated method stub\n\t", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "    void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(AnalyticsTracker analyticsTracker);\n    void inject(DemoSamplesInstaller demoSamplesInstaller);\n    void inject(ConfigurationContentProvider configurationContentProvider);\n    void inject(AudioBookManager audioBookManager);\n    void inject(PlaybackService playbackService);\n    void inject(K", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "        AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "    response = Response()\n    response.content_type = 'application/json'\n    response.text = '{\"foo\": \"bar\"}'\n    response = PyramidSwaggerResponse(response)\n    with pytest.raises(ResponseValidationError) as excinfo:\n        validate_response(response, Mock())\n    assert excinfo.value.status_code == 500\n    assert", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "    'Usage: pywbemcli [GENERAL-OPTIONS] instance associators INSTANCENAME [COMMAND-OPTIONS]',  # noqa: E501\n    'List the instances associated with an instance.',\n    '--ac, --assoc-class CLASSNAME Filter the result set by association clas',\n    '--rc,", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "                            logError(\"AWS Lambda exception: \" + t.getMessage());\n                        }\n                        else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logError(\"AWS Lambda exception: \" + t.getMessage());\n                        }\n                        else if(exceptionClass.equals(SdkClientException.class)){\n                            logError(\"AWS SDK exception: \" + t.getMessage", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "            except TextGridParseError as e:\n                self.return_dict[\"textgrid_error_files\"].append(e)\n            except Exception as e:\n                self.return_dict[\"error_files\"].append(e)\n                exc_type, exc_value, exc_traceback = sys.exc_info()\n                self.return_dict[\"error_tracebacks\"].append", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "        self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n        self.assertAlmostEqual(gps.altitude, fdmexec.GetPropagate().GetAltitudeASLmeters())\n        self", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationListener locationListener;\n  protected Location lastLocation;\n  protected Location currentLocation;\n  protected Location passiveLocation;\n  protected Location lastPassiveLocation;\n  protected Location lastBestLocation;\n  protected Location lastBestPassiveLocation;\n  protected Location last", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "\t/**\n\t * \n\t */\n\tpackage top.phrack.ctf.controller;\n\t\n\t/**\n\t * \n\t */\n\tpackage top.phrack.ctf.controller;\n\t\n\t/**\n\t * \n\t */\n\tpackage top.phrack.ctf.controller;\n\t\n\t/**\n\t * \n\t */\n\tpackage top.phrack.ct", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "# 44018, section 10.2\n# RRC message\n# 44018, section 10.3\n# RRC message\n# 44018, section 10.4\n# RRC message\n# 44018, section 10.5\n# RRC message\n", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "      result.append(\" \").append(Operator.EQ.getValue());\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACKET);\n  }\n\n  public void visit(final In", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "                                       join_keyword=\"JOIN\")\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Gujarati...\")\n        self.run_e2e_flow_for_language(language=\"Gujarati\",\n                                         person_name=u'\\u", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME, SETTINGS.AVD_DUPLICATE_NAME, SETTINGS.AVD_ADB_PORT)\n    else:\n        # adb, uuid, snapshot_uuid, vbox_exe\nNext line of code:\n        refresh_vm(SETTINGS.VM_UUID, SETTINGS.VM", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "        self.__init__(CallName='Header', ReprName='Header', T=0, V=0, Trans=False, Dict=SMSCP_dict)\r\n        self.__init__(CallName='Header', ReprName='Header', T=0, V=0, Trans=False, Dict=SMSCP", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "\t\t\tadjac_lh = CreateAdjSet(v_lh, faces_lh)\n\t\t\tadjac_rh = CreateAdjSet(v_rh, faces_rh)\n\t\t\tadjac = [adjac_lh, adjac_rh]\n\t\t\tadjac = np.array(adjac)\n\t\t\t", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "        cacheService.storeCacheList(new CacheList(listName));\n      }\n    }\n  }\n\n  @FXML\n  public void showScenicView(ActionEvent actionEvent) {\n    ScenicView.showScene(contentPane);\n  }\n\n  private void updateStatus(String message, double progress) {\n    Platform.runLater(() -> {\n", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "            (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ElGamal): ElGPub,\n            (True", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                        new TimeEntryOvertimeAggregation()));\n\n        timeEntriesTable.getColumn(\"overtime\").setCaption(messageBundle.getMessage(TimeEntry.class, \"overtime\"));\n        timeEntriesTable.getColumn(\"overtime\").setAlignment(Component.Alignment.MIDDLE_RIGHT);\n        timeEntriesTable.getColumn(\"overtime\").setStyle(\"overtime\");\n\n       ", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "        self.key_size = read_u16le(f)\n        self.references = {}\n        for i in range(count):\n            key = read_u32le(f)\n            ref = self.index_ref_name(key)\n            self.references[ref] = key\n\n    def write_index(self):\n        index_name = self.index_name +", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "        await Utilities.message(ctx.channel, f\"**{ctx.message.author.mention}**, This feature is under-development!\")\n        Logger.error(\"_dump_pokeform() called!\")\n        await self._dump_pokeform(ctx.message.author, ctx.message.channel)\n\n    @command(aliases=[\"dump\"], pass_context=True)\n   ", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n        return ul.get_config(InfoType.EXPANS", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "            user = create_inactive_user(email, full_name)\n\n            # Send email to moderator\n            subject = _('New account request')\n            template = 'accounts/emails/request_invitation.html'\n            recipient = site.config.moderator\n            logged_against = _('Account request')\n            send_connect_email(subject, template,", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "            if context.is_principal_node_kind():\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if context.is_principal_node_kind():\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in context", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "            ex = Hitbtc('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_CEX:\n            ex = Cex('bccbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_BITTREX:\n            ex = Bittrex('BTC-BCC", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setDefaultField(elt.getAttribute(AlvisIRConstants.XML_SEARCH_DEFAULT_FIELD));\n\t\tresult.setQueryNodeExpanderFactory(QueryNodeExpanderFactory", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "    helpTestQueryData(0, 10);\n    helpTestQueryData(1, 10);\n    helpTestQueryData(9, 10);\n    helpTestQueryData(10, 10);\n    helpTestQueryData(11, 10);\n    helpTestQueryData(20, ", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "    private final KadConfiguration config;\n    private int attempts = 0;\n    private boolean isDone = false;\n    private boolean isSuccessful = false;\n    private boolean isUnresponsive = false;\n    private boolean isTimeout = false;\n    private boolean isConnectionRefused = false;\n    private boolean isConnectionReset", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "        return words_api(wordnik_api, token)\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "                    deviceMiToken = MiPushClient.getRegId(CurrentUserActivity.this);\n                    //stopGCM();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"Mojo-Sys\":\n                deviceMiToken = deviceGcmToken = \"\";\n                //Log", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "        self.assertIsInstance(handle, HANDLE)\n        self.addCleanup(CloseHandle, handle)\n        self.addCleanup(events.ResetEvent, handle)\n        self.addCleanup(events.SetEvent, handle)\n        self.addCleanup(events.WaitForSingleObject, handle, 0)\n\n    def test_create_event_invalid_handle(self):\n        with self.assertRaises", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "                    return parserHolder.getParser().parse(roundEnv.getElementsAnnotatedWith(annotation));\n                })\n               .collect(Collectors.toList());\n        if (parsedPaths.isEmpty()) {\n            return;\n        }\n        Swagger swagger = specificationGeneratorFactory.build(fileManagerFactory)\n               .generate(parsedPaths, roundDescriptor);\n        if (swagger == null", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "                tablefmt ='simple'\n            output.append(tabulate(rows, headers, tablefmt, numalign, stralign))\n    if status:\n        output.append(status)\n    return '\\n'.join(output)\n\n\ndef run_sql(vcli, sql, table_format, expanded=False, aligned=True,\n            show_header=True):\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "            actionPopupGroup.add(new AddKeyAction(this));\n            actionPopupGroup.add(new AddValueAction(this));\n            actionPopupGroup.add(new DeleteKeyAction(this));\n        }\n\n        PopupHandler.installPopupHandler(editTableView, actionPopupGroup, \"POPUP\", ActionManager.getInstance());\n    }\n\n    private Document buildMongoDocument", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "\tprivate Connector connector;\n\t@InjectNext line of code:\n\tprivate ConnectorIssues connectorIssues;\n\t@InjectNext line of code:\n\tprivate TaskListByJQLActivity taskListByJQLActivity;\n\t@InjectNext line of code:\n\tprivate TaskListByJQLActivity taskListByJQLActivity;\n\t@InjectNext line of", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "        this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks, deployments);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClearAllNotifications();\n            case ConstantStr.FUNC_CLEAR_MEM_CODE:\n                return new BtnClearBackground();\n            case ConstantStr.F", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "    protected PageParser pageParser;\n\n    protected PageDispatcher pageDispatcher;\n\n    protected PageHandler pageHandler;\n\n    protected PageParser pageParser;\n\n    protected PageDispatcher pageDispatcher;\n\n    protected PageHandler pageHandler;\n\n    protected PageParser pageParser;\n\n    protected PageDispatcher pageDispatcher;\n\n    protected PageHandler pageHandler;\n\n   ", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "        type = Type()\n        type.name = \"foo\"\n        type.item = ObjectInteger()\n        type.item.name = \"bar\"\n\n        self.assertEqual(\"42\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type = Type()\n        type.name = \"foo\"\n        type.item", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "        if _cluster_type not in CLUSTER_TYPES:\n            raise ValueError()\n        self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "    private GuiButton add;\n    private GuiButton remove;\n    private GuiButton forget;\n    private GuiButton select;\n    private GuiButton none;\n    private GuiButton command;\n    private GuiButton alias;\n    private GuiButton prefix;\n    private GuiButton prefixHidden;\n    private GuiCheckbox status;\n    private Gui", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "        form.setText(Messages.configurationEditorWebModulesPageTitle);\r\n        form.getBody().setLayout(new GridLayout(1, false));\r\n        ExpandableComposite expandableComposite = toolkit.createExpandableComposite(form.getBody(), SWT.NONE);\r\n        expandableComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(FCPFetchException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPFetchException while inserting message\", e);\n", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "    ExpenseManagerDAO mDao;\n    List<DailyExpense> dailyExpenses = new ArrayList<>();\n    List<SelectableCreditCardViewHolder> creditCardViewHolders = new ArrayList<>();\n    List<HorizontalBar> creditCardBars = new ArrayList<>();\n    List<HorizontalBar> creditCardBarsToBeRemoved = new", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "            new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetEndTimeCommand.class", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'perms': 'write',\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http', 'flickr.com','services/auth/', None, urlencode(query", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t}\n\n\tprivate void openCustomList(CustomListWithCount customList) {\n\t\tif (customList!= null)\n\t\t\tstartActivity(CustomListActivity.start(this, customList._id));\n\t}\n\n\tprivate void openSearchSuggestion(SearchSuggestion searchSuggestion) {\n\t\tif (searchSuggestion!= null) {\n", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "        i -= 1\n        cond_stack_size += get_stack_effect(bytecode[i][2], bytecode[i][3])\n      except ValueError:\n        # This is a special case for the case where we have a\n        # conditional expression that is not a binary operator.\n        # We need to handle this case specially", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs = tuple(all_platform_slugs)\n\nall_platform_slugs = tuple([(slug, slug)\n                            for slug in all_platform_slugs])\n\nall_lang_set_slugs = tuple([(", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "        }\n        if (chat == null) {\n            Log.e(this.getClass().getSimpleName(), \"chat is null\");\n        }\n        if (chat == null) {\n            Log.e(this.getClass().getSimpleName(), \"chat is null\");\n        }\n        if (chat == null) {\n            Log.e(this.getClass().getSimpleName(),", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "    parser = PingParsing()\n    parser.parse(ping_result)\n    parser.as_dict()\n    parser.as_tuple()\n    parser.as_dict(include_icmp_replies=True)\n    parser.as_tuple(include_icmp_replies=True)\n    parser.as_dict(include_icmp_replies=False)\n    parser.as_tuple(include_icmp_re", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "    account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string.letters + string.digits) for i in range(20))\n            while", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT)!= null) {\n      log(\"server response is: percent \" + Utils.getXmlNodeValue(doc, TAG_PERCENT), null);\n      if (serverRawResponse!= null) {\n        log(\"server response received, cancelling the upload \" + getFileNames()", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "\t\tpublic void render() {\n\t\t}\n\t}\n}\n", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n   ", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "        assertThat(qe, statementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, batchPrepared());\n        assertThat(qe, preparedOrBatchPrepared());\n        assertThat(qe, isCallable());\n        assertThat(qe, batchCallable());\n        assertThat(qe, callableOrBatchCallable", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "    merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)\n    merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)\n    merged_assembly_points_by_ids = merge_assembly_points(assembly_points_by_source=", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "\t\t\t\t\tif (!level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\tgetString(R.string.install_levels_confirmation),\n\t\t\t\t\t\t\tnew Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {\n\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n\n    @Override\n    public Stemcells stemcells() {\n        return", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "            embed = Embeds.make_embed(header=\"Clembot Configuration\", header_icon=Icons.CONFIGURATION,\n                        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n                        inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n\n", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "    private WeeklyCaptionProvider captionProvider;\n\n    /** Defines the first day of the week. */\n    protected int firstVisibleDayOfWeek = 1;\n\n    /** Defines the last day of the week. */\n    protected int lastVisibleDayOfWeek = 7;\n\n    /** Defines the first hour of the day. */\n   ", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "                    TrackHistoryEntry newEntry = new TrackHistoryEntry();\n                    newEntry.uid = 0;\n                    newEntry.stationUuid = liveInfo.getStationUuid();\n                    newEntry.track = liveInfo.getTrack();\n                    newEntry.artist = liveInfo.getArtist();\n                    newEntry.title = liveInfo.getTitle();\n                    newEntry", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "    VerifierProvider rsaLocator = new DefaultPublicKeyLocator(\n        new IdentityServerDescriptorProvider(), JsonServerInfo.getDocument(SERVER_INFO_DOCUMENT));\n\n    locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HS256, hmacLocator);\n    locators.setVerifierProvider(SignatureAlgorithm", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "                        if (home.getIcon()!= 0) {\n                            Intent intent = new Intent(mContext, IconPreviewActivity.class);\n                            intent.putExtra(IconPreviewActivity.EXTRA_ICON, home.getIcon());\n                            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                            intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);\n                           ", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "        \"\"\" Returns a list of :class:`~plexapi.media.Media` objects. \"\"\"\n        return self.fetchItems('/library/metadata/%s/items' % self.ratingKey, cls=media.Media)\n\n    def _getPlaylistItem(self, item):\n        \"\"\" Match an item to a playlist item and return the item playlist", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "            String[] = new String;\n            String[] = new String;\n            String[] = new String;\n            String[] = new String;\n            String[] = new String;\n            String[] = new String;\n            String[] = new String;\n            String[] = new String;\n            String[] = new String;\n           ", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "    if not isinstance(cmd, GitcAvailableCommand) and not cmd.manifest.IsGitcClient:\n      print(\"fatal: '%s' requires GITC to be available\" % name,\n            file=sys.stderr)\n      return 1\n\n    if not isinstance(cmd, GitcClientCommand) and cmd.manifest", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "    @Bean\n    YarrnSpiceService spiceService;\n\n    @Bean\n    YarrnPrefs_ prefs;\n\n    @ViewById(R.id.drawer_layout)\n    DrawerLayout drawerLayout;\n\n    @ViewById(R.id.action_bar)\n    ActionBar actionBar;\n\n    @NonConfigurationInstance\n    @Bean\n    Que", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "        await r.after_headers(Entry.create(\"/\"))\n        self.assertEqual(r.reject_set, set())\n\n    @async_test()\n    async def test_reject(self):\n        r = RejectStatusCode([404, 500])\nNext line of code:\n        await r.after_headers(Entry.create(\"/\", response=StaticResponse(404,", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING, Default.ENCODING)\n    else:\n        encoding = encoding.lower()\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey.PROXY_SERVER, Default.PROXY_SERVER)\n    else:\n        proxy = proxy.lower()\n\n    convert_configs", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "        Qdisc.attach(self.__con)\n        Qdisc.create()\n\n        self.__device = device\n        self.__ifb_device = self.parse_incoming_device(tc_command_output)\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n       ", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "        self.assertRaises(TypeError, _environment_to_string, 42)\n        self.assertRaises(TypeError, _environment_to_string, 42.0)\n        self.assertRaises(TypeError, _environment_to_string, 42L)\n        self.assertRaises(TypeError, _environment_to_string, 42j)\n        self.assertRaises(TypeError, _environment_to", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.tokenImage.substring(0, 1));\r\n    } else {\r\n", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "        try {\n            decoder = (DataDecoder) Class.forName(dataDecoder).newInstance();\n        } catch (Exception e) {\n            System.err.println(\"Error while creating decoder: \" + e.getMessage());\n            exit(1);\n        }\n        DataNodePrinter printer = new DataNodePrinter(print, decoder);\r\n        DataState", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "                // 设置结束时间\n                taskData.setFinishDate(new Date());\n                // 设置结束时间\n                taskData.setFinishDate(new Date());\n                // 设置结束时间\n                taskData.setFinishDate(new Date());\n                // 设置结束时间\n                taskData.setFinishDate(new Date());\n                // 设置结束", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "        //用户的年级\n        stuGrade = split[2];\n        //用户的学院\n        stuXy = split[3];\n        //用户的专业\n        stuZy = split[4];\n        //用户的班级\n        stuBj = split[5];\n        //用户", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "        cursorById.close();\n    }\n\n    /**\n     * Test bulk insert using direct SQLiteDbHelper and test query using content provider\n     */\n    public void testProviderBulkInsert() {\n        // Insert 10 rows\n        DataTestUtilities.insertMovieTestEntry(mContext);\n\n        // Test the bulk insert using the content provider", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "            state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n        except AttributeError:\n            pass\n\n    def add_living_property(self, state: Dict[str, Any], obj: Living) -> None:\n        try:\n            livings = obj.livings     # type: ignore\n", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "        self.assertEqual(list(node_children(self.elem)), [self.elem])\n        self.assertEqual(list(node_children(self.elem, self.elem)), [self.elem])\n        self.assertEqual(list(node_children(self.elem, self.elem, self.elem)), [self.elem])\n        self.assertEqual(list(node_children(self.elem, self.elem, self.elem, self", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t\tthis.surveyName = null;\n\t}\n\t\n\tpublic ParameterizedGenerationService(boolean cleaningFolder) {\n\t\tthis.pipelineGenerator = new PipeLineGeneratorImpl();\n\t\tthis.valorizatorParameters = new ValorizatorParametersImpl();\n", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "            self.time_manager.method\n        except UncertainTimeError:\n            log.error(\"We couldn't find a way to measure the root dispersion of this system's clock.\")\n            log.error(\"Switzerland will probably work, but it's not going to be as accurate as it could be.\")\n            self.root_dispersion =", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE),", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\nNext line of code:\n        DocumentDialog(self, ContratAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\nNext line of code:\n        Document", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "  assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutputConfig2():\n  '''\n  Output configuration selection test", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "\t\tsetContentView(R.layout.mapview);\r\n\t\tmapView = (MapView) findViewById(R.id.mapview);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(false);\r\n\t\tmapView.setStreetView(false);\r\n\t\tmapView.setTraffic(false);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    for sample_idx, sample_condition_dict in enumerate(sample_condition_dicts):\n        # TODO: better reference state handling\n        # TODO: model exclusions handling\n        # TODO: better reference state handling\n        # TODO:", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "            ConfigCommandProcessor(\n                ConfigVlanCommandProcessor(self.switch_configuration),\n                ConfigVRFCommandProcessor(self.switch_configuration),\n                ConfigInterfaceCommandProcessor(self.switch_configuration)\n            ),\n            self.logger\n        )\n    def get_default_ports(self):\n        return [\n            Port(\"FastEthernet0/1\"),\n            Port(\"", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "    return self.word_counts\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n        return RespostaEnviarDadosVenda.analisar(retorno)\n        return RespostaCancelarUltimaVenda.analisar(retorno)\nsatcfe/resposta/consultarultimasessaofiscal.py\nclass", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n}\nmisc/src/main/java/io/hummer/util/net/NetUtil.java\npublic class NetUtil {\n\n\tprivate static final Net", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_conditions\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(PositionResource, \"/fd", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "\t\t// H1(\"header\", \"TODOs\");\n\t\t// Input(\"new-todo\", \"placeholder\", \"What needs to be done?\");\n\t\t// container.add(H1(\"header\", \"TODOs\").add(Input(\"new-todo\", \"placeholder\", \"What needs to be done?\")));\n\t", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        mActivity = (MainActivity) activity;\n    }\n\n    @Override\n    public void onActivityCreated(Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        getLoaderManager().initLoader(0, null, mLoaderCallbacks);\n", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final String TextBlockObject = \"String\";\n    public static final", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "            GCActivitySet gcActivitySet, GCActivity gcActivity) {\n        dataset.add(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace, int id, String gcActivityName) {\n        dataset.addGCActivityName(id, gcActivityName);\n    }\n\n    public ChartPanel", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "        return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private void installActions() {\n        DefaultActionGroup actionGroup = new DefaultActionGroup();\n        actionGroup.add(new AddServerAction(project, mongoManager, notifier));\n        actionGroup.add(new RemoveServerAction(project, mongoManager, notifier));\n       ", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "        self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._project_settings = ProjectSettingsDialog(settings_ini, project_directory=directory, log_directory=os.path.join(directory, 'logs'))\n        self._project_settings.signalSettingsChanged.connect(self.sync_project_config_path)\n        self._project", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private final static TexturedModal MODAL = new TexturedModal(ChatBox.GUI_LOCATION, 0, 14, 254, 202);\n    private", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "                if (output == null) {\n                    output = codec(imageTaken, Bitmap.CompressFormat.JPEG,100);\n                }\n                cropImageButton.setVisibility(View.GONE);\n                cropView = new CropImageView(this);\n                cropView.setCropWindowChangeListener(new CropImageView.CropWindowChangeListener() {\n                    @Override\n                    public", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "        self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, passw):\n        self._pass = passw\n        return self\n\n    def set_client_id(self, client_id):\n       ", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "    validate_key_condition(model, index, key)\n    assert True\n    return True\nNext line of code:\n    assert True\n    return True\nNext line of code:\n    assert True\n    return True\nNext line of code:\n    assert True\n    return True\nNext line of code:\n    assert", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "            '/properties':                  RestAppPropertys,\n        }\n        for path, resource in self.resources.items():\n            self.api.add_resource(resource, *path.split('/'))\n", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem> contentItemList = new ArrayList<Content", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n        ),\n    )\n    group.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet re", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "    PCollection<GCPProject> projects = pipeline.apply(\"Read projects\",\n        Read.from(new LiveProjectSource(org)));\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        projects.apply(ParDo.named(\"Convert project data to", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "                self._def_reader = MeanPoolReadDefinitions(emb_def_dim, dim,\n                                                           dropout=0.0,\n                                                           def_word_gating=\"none\",\n                                                           dropout_type=\"per_unit\",\n                                                           compose_type=compose_type,\n                                                           word_dropout_weighting=\"no_weighting\",\n                                                           shortcut_unk_and_excluded=True", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "        public void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to week click items\n     */\n    public interface WeekClickListener {\n        /**\n         * Triggered when a week was clicked\n         *\n         * @param week\n         *            The week that was clicked\n         */Next line", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "    private int pickCount;\n    private int pickCountLimit;\n    private int pickCountLimitForVideo;\n    private int pickCountLimitForImage;\n    private int pickCountLimitForVideoAndImage;\n    private int pickCountLimitForVideoAndImageAndAudio;\n    private int pickCountLimitForVideoAnd", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "            break;\n        }\n\n        case OPEN: {\n            Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onConnect(client);\n            break;\n        }\n\n        case CLOSE: {\n            client.onDisconnect();\n            break;\n        }\n\n        case MESSAGE: {\n            Namespace namespace = namespacesHub.get(packet.getNsp", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "            form.fields['username'].initial = self.object.username\n            form.fields['first_name'].initial = self.object.first_name\n            form.fields['last_name'].initial = self.object.last_name\n            form.fields['email'].initial = self.object.email\n            form.fields['password'].initial = self.object.password\n", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tGenerator generator = setGenerator(pipeline.getIn2Out());\n\t\treturn new GenerationService(preprocessors, generator, postprocessors);\n\t}\n\n\tprivate Generator setGenerator(InFormat inFormat) {\n\t\tswitch (inFormat) {\n\t", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "        name = Column(String)\n        email = Column(String)\n        joined = Column(Timestamp)\n        by_email = GlobalSecondaryIndex(hash_key=\"email\", projection=\"all\")\n        by_joined = LocalSecondaryIndex(range_key=\"joined\", projection=[\"email\"])\n    return MyModel\n\n\n@pytest.fixture\ndef model_with_ttl", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "    private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isConnectedToAudiologist;\n    // Guarded by _lockObject.\n    private boolean _isConnectedToRelay;\n    // Guarded by _lockObject.\n    private boolean _isConnectedToChat;\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file first\");\n\t}\n\t\telse\n\t{\n\t\tif(this.handle == null) new ErrorJSON(\"Please open the Loom file first\");\n\t}\n\t\telse\n\t{\n\t\tif(this.handle == null) new ErrorJSON", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOutDownLeft(RotateOutDownLeft.class),\n    RotateOutDownRight(RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "\t\t} catch (final PerfidixMethodCheckException e) {\n\t\t\tthrow new SocketViewException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark\n\t *\n\t * @throws SocketViewException\n\t *             if socket communication fails\n\t */\n\tpublic void runBenchmark() throws SocketView", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setDensity(fog.density);\n        descriptor.setGradient(fog.gradient);\n        descriptor.setColor(fog.color);\n        return descriptor;\n    }\n\n    public static Fog convert(FogDescriptor descriptor) {\n        Fog fog", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t\tEndpoint endpoint = serviceDiscoveryInfo\n\t\t\t\t\t.getMoreSuitableEndpoint(endpointType);\n\t\t\tif (endpoint == null) {\n\t\t\t\tthrow new APIWrapperException(\n\t\t\t\t\t\t\"Could not find a suitable endpoint for the given city and endpoint type.\",\n\t\t\t\t\t\tError.NOT_SUITABLE_ENDPOINT_FOUND, null);\n\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plusActorDetailsComponent();\n}\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "      raise ValueError(\"Invalid constraint bytecode: %s\" % root.data)\n    self._cstr = TreeNode(kind=root.data[0], data=root.data[1])\n    if root.data[1] == CMP_IMPLICIT_NOT_EMPTY:\n      self._cstr.insert_child(0, Const(data='True'))\n     ", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    yml_based_job_manager = YMLBasedJobManager()\n    sync_stats_manager = SyncStatsManager()\n    ci_pipeline_manager = CIPipelineManager", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\tJoinResult result = getRound().addPlayer(this);\n\t\tif (result == JoinResult.SUCCESS) {\n\t\t\tsetArena(round);\n\t\t\tsetSpectating(false);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Removes this {@link MGPlayer} from the given {@link Round round}.\n\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "        if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éxito.')\n                return render(request,'relevamiento/mensaje.html", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<WaitAction>           waitActionSupportHandler           = new ActionSupportHandler<WaitAction>(WaitAction.class);\n  private ActionSupportHandler<", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "    if result is None:\n        result = str(value)\n    else:\n        result = int_to_alphabetic(value, base_char.lower()).upper()\nNext line of code:\n    if result is None:\n        result = str(value)\n    else:\n        result = int_to_alphabetic(value, base_char.lower", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], MAX_HASH_VALUE / 2), [0])\n    assert_array_equal(f", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "        array.items = [object1, object2, object3]\n        object1.properties = {\"a\": object1}\n        object2.properties = {\"a\": object2}\n        object3.properties = {\"a\": object3}\n        object1.pattern_properties = {\"a\": object1}\n        object2.pattern_properties", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telif model_item == self._root_item:\n\t\t\t\treturn default_flags\n\t\t\telse:\n\t\t\t\treturn default_flags | Qt.ItemIsDropable\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n\t\t\tprint(\"Col", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ECDSASign): ECDSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHP", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "          FASTInputStream input = new FASTInputStream(new GZIPInputStream(new ByteArrayInputStream(catBytes),catBytes.length));\n          FASTInputByteArray input2 = new FASTInputByteArray(input);\n          input2.init(input2.buffer);\n          input2.blockingFill(input2.buffer.length);\n          input2.blockingFill(input2.buffer.length);\n", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "        hasJsonPath(\"hits.hits[*]._source.id\", equalTo(\"csw-record-0\")));\n    }\n\n}\n", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "                        res = Schema.get(\n                            new ExtMap().mput(Schema.InvokeKeys.DATA_SOURCE, context.get(Schema.InvokeKeys.DATA_SOURCE))\n                           .mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.ENTITY))\n                           .mput(Schema.InvokeKeys.ENTITY_KEYS, context.get(S", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\t}\n\n\t/**\n\t * Registers a {@link RequestService} to make a", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "    url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/(?P<pk>[-\\w]+)/edit/$', edit_user, name='edit_user'),\n    url(r'^users/(?P<pk>", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                            if (stack.getNumberOfPlaySessions() > 0) {\n                                startPlayActivity();\n                            }\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"new_card\");\n            }\n        }\n    }\n\n    private void startPlayActivity() {\n        if (stack!= null) {\n            if (stack", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "    DropDownMenu dropDownMenu;\n    private int page=1;\n    private int pageSize=10;\n    private int totalPage=1;\n    private int total=0;\n    private int totalSize=0;\n    private int totalSize1=0;\n    private int totalSize2=0;\n   ", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "        f = XDA((d1, d2), d3)\n        i, j = self._find_preimage(f, d3)\n        assert i == d1.val\n        assert j == d2.val\n\n    @unittest.skip(\"skipping test_find_preimage\")\n    @given(\n        integers", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "        obj.socketTags = []\n        obj.imageList = []\n        obj.imageList = []\n        obj.imageList = []\n        obj.imageList = []\n        obj.imageList = []\n        obj.imageList = []\n        obj.imageList = []\n        obj.imageList = []\n        obj.imageList = []\n        obj.imageList", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tfor (BaseCommand command : commands) {\n\t\t\tgetCommand(command.getBaseCommand()).setExecutor(command);\n\t\t}\n\t\t\n\t\t// Register the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "        connection.sendChallenge(challengeData);\n        resetParser();\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        connection.sendSuccess();\n        resetParser();\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        String condition = doc.getName();\n        connection.sendFailure(condition);\n        resetParser();\n", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Hight32 = HightCipher\nLea32 = LeaCipher\nShacal1 = Shacal1Cipher\nShacal2 = Shacal2Cipher\nFeal = FealCipher\nTea = TeaCipher\nXtea = XteaCipher\nCham = cham.get_C", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "    private FastScroller mFastScroller;\n    private SongListAdapter mAdapter;\n    private boolean mShowToolbar = true;\n    private boolean mShowFastScroller = true;\n    private boolean mShowHeader = true;\n    private boolean mShowHeaderDivider = true;\n    private boolean mShowHeaderDividerLine =", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "            if (mImmersiveSensorNavigation!= null) {\n                mImmersiveSensorNavigation.detach();\n                mImmersiveSensorNavigation = null;\n            }\n            if (mImmersiveTouchNavigation!= null) {\n                mImmersiveTouchNavigation.detach();\n                mImmersiveTouchNavigation =", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "        Bit('ESM', ReprName='ESM', Pt=6, BitLen=4, Repr='hum'),\n        Int('ESMVersion', ReprName='ESMVersion', Pt=10, Type='uint8', Repr='hum'),\n        Int('ESMLength', Re", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "            mArtist = ArtistInfo.getArtist(getActivity(), mArtist.getId());\n            mArtist.setName(mArtist.getName());\n            mArtist.setAlbumCount(mArtist.getAlbumCount());\n            mArtist.setTrackCount(mArtist.getTrackCount());\n            mAlbumListAdapter.notifyDataSetChanged();\n            mSongListAdapter.notifyDataSetChanged();\n        }\n    };\n    private", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "    1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\tpublic boolean addRemittUser(UserDTO user) {\n\t\treturn UserManagement.addUser(user.getUsername(), user.getPassword(),\n\t\t\t\tuser.getCallbackServiceUri(), user.getCallbackServiceWsdlUri(),\n\t\t\t\tuser.getCallbackUsername(), user.getCallbackPassword());\n\t}\n\n\t@GET\n\t@Path(\"listusers\")\n\t@", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    Observable<ApiStatus> apiInfo(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the HTTP headers that were used to make the request.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"http-headers\")\n    Observable<HttpHeader> httpHeaders(@Query(Constants", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "    public void visit(VmOptionLogMessage message) {\n      vmOptionsBuilder.put(message.optionName(), message.value());\n    }\n\n    @OverrideNext line of code:\n    public void visit(VmPropertiesLogMessage message) {\n      vmProperties = Optional.of(message.properties());\n    }\n  }\n}\n", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "    assert almost_eq(erb(freq, bandwidth), 1.0)\n    assert almost_eq(erb(freq, bandwidth), 1.0)\n    assert almost_eq(erb(freq, bandwidth), 1.0)\n    assert almost_eq(erb(freq, bandwidth), 1.0)\n    assert almost_eq", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "            offset = dataset.file_tell\n    else:\n        # Read the sequence item\n        dataset = read_sequence_item(fp, is_implicit_VR, is_little_endian,\n                                    encoding, offset)\n        if dataset is None:  # None is returned if hit Sequence Delimiter\n            return None\n       ", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "    try {\n      final T contextRoot = proxyBuilder.build();\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n        @Override\n        protected void onParagraph(ParagraphCoordinates paragraphCoordinates) {\n          runProcessorsForParagraph(paragraphCoordinates.getParagraph(), contextRoot, document);\n        }\n      };\n      walker", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {\n        return new SearchPatternsRequest(getActivity().getApplication(), prefs, searchCriteria.values(), page, PAGE_SIZE);\n    }\n    @Override\n    protected void loadData(int page) {\n        super.loadData(page);\n    }\n\n    @Override\n   ", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "    @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags += NotationDataFlags & val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = self.bytes_to_int(val)\n\n    @sdproperty\n    def name", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "            self.addMessage(lm, True)\n            self.addMessage(lm, True)\n            self.addMessage(lm, True)\n            self.addMessage(lm, True)\n            self.addMessage(lm, True)\n            self.addMessage(lm, True)\n            self.addMessage(lm, True)\n           ", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "def check_arg(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\nNext line of code:\ndef check_arg(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "    # TODO: we should only search and get phases that have the same sublattice_site_ratios as the phase in the database\n    desired_data = get_prop_data(comps, phase_name, \"CPM_FORM\", datasets)\n    desired_data = filter_temperatures(desired_data)\n    desired_data =", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "    if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime10)):\n            return GregorianMonthDay(value.month, value.day, value.tz", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,\n            FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (controller == null || componentController == null || fsmPlayer == null || adMedia == null) {\n            return;\n        }\n\n", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "            PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 8 || type == 0) {\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                     @Query(\"q\") String query,\n                                     @Query(\"limit\") int limit,\n                                     @Query(\"pos\") String pos,\n                                     @Query(\"media_filter\") @MediaFilter.Value String mediaFilter,\n                                     @Query(\"", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "        stream = Stream(model=model, engine=self)\n        stream.move_to(position)\n        return stream\n\n    def transaction_read(self, *objs):\n        \"\"\"Read one or more objects in a transaction.\n\n        :param objs: objects to read.\n        :return: A dict with the objects loaded.\n        :raises b", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "        # order numeric labels by nominal value\n        ordered_labels = sorted(data_set.label_map.items(), key=lambda t: t[0])\n        ordered_labels = list(zip(*ordered_labels))[1]\n\n        self._confusion_matrix = confusion_matrix\n\n        # noinspection PyTypeChecker\n        formatter = ConfusionMatrix", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "from pyorient.ogm import *\nfrom pyorient.ogm.property import *\nfrom pyorient.ogm.exceptions import ReservedWordError\nfrom pyorient.ogm.declarative import DeclarativeMeta, DeclarativeType\nfrom pyorient.ogm.vertex import Vertex\nfrom pyorient.og", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "\t@Autowired\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t/**\n\t * 用户资料显示页面\n\t * @return\n\t", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "all_platform_slugs.extend(TRANSIFEX_SLUGS)\nall_platform_slugs.extend(ZANATA_SLUGS)\nall_platform_slugs.extend(DAMNEDLIES_SLUGS)\nall_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the expected output at the previous frequency step as input, and is initialized with\n        the hidden representation of the input sequences as initial state.\n\n        Returns\n        -------\n        FeedPreviousRNN", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(PropertyNode node) {\n        return defaultValue();\n    }\n\n    // Concrete visit methods (NodeNavigation", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static H3", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "        final NiceTable table = new NiceTable(numberOfColumns);\n        table.addHeader(\"Method\", '=', Alignment.Left);\n        table.addHeader(\"Unit\", '=', Alignment.Left);\n        table.addHeader(\"Mean\", '=', Alignment.Right);\n        table.addHeader(\"StdDev\", '=', Alignment.Right);\n        table.addHeader(\"Min", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "      Walker(self._graph, visitor, backwards=True).traverse(node)\n      return visitor.edges\n\n    def get_loop_target(node):\n      loop_edges = get_parent_loop(node)\n      if not loop_edges:\n        return None\n      loop_target = None\n      for edge in loop_edges:\n        if edge.dest ==", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.traindata, this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t\t\t\tSystem.exit(-1);\n\t\t}\n\t\t\n\t\tthis.t = this.tree.getNumberOfInternalNodes();\n\t\tthis.Tarray = new int", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n    return\n   ", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                    // The various events that could possibly change the room title\n                    if (Event.EVENT_TYPE_STATE_ROOM_NAME.equals(event.type)\n                            || Event.EVENT_TYPE_STATE_ROOM_ALIASES.equals(event.type)\n                            || Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        setTitle(mRoom.getName(mMyUserId));\n                       ", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\t\n\tprivate NoopPostprocessor noopPostprocessor = new NoopPostprocessor();\n\t\n\tprivate FOTableColumnPostprocessorFake fo", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "            H += dot(crossmat(c - p), m * H_trans) + dot(I, H_rot)\n            H += dot(crosstens(c - p), m * J_rot) + dot(crosstens(I), J_rot)\n        return H\n\n    def compute_angular_momentum_hessian", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationEtatsPresence(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.presences_date.GetValue())\n        DocumentDialog(self, EtatsPresenceModifications(site,", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "                new RefreshCommand(),\n                new MigrateCommand(),\n                new LoanCommand(),\n                new LoanBalanceCommand(),\n                new LoanPayCommand(),\n                new LoanTakeCommand(),\n                new LoanAcceptCommand(),\n                new LoanDenyCommand(),\n                new LoanModule(),\n                new LoanBalanceModule(),\n                new LoanPayModule(),\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "        if (queuedProjectResult == null) {\n            return;\n        }\n        final QueuedProject queuedProject = queuedProjectResult.getQueuedProject();\n        if (queuedProject == null) {\n            return;\n        }\n        final Pattern pattern = queuedProject.getPattern();\n        if (pattern == null) {\n           ", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "      return Const.fromValue(arg)\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg)\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg)\n    elif op == LOAD_GLOBAL:\n      return Ref.fromName(arg)\n    elif op == LOAD_FAST:\n      return Ref.fromName(arg)\n   ", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "            _log.info('Initializing a %s prior for the parameters.', prior['name'])\n        else:\n            raise ValueError(\"Unknown prior type: %s\", prior)\n        prior_specs = build_prior_specs(prior, params)\n        return {'prior_specs': prior_specs}\n\n    def _fit(self, symbols, datasets", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "\tprivate final Physics physics;\n\tprivate final FringeLayer fringeLayer;\n\tprivate final PingPongEq<EntityState> state = new PingPongEq<>();\n\tprivate final PingPongEq<Input> input = new PingPongEq<>();\n\tprivate final PingPongEq<Config> config = new PingPongEq<>();\n\tprivate", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new TempSensorView();\n                    o = tview.getView();\n                    ((TempSensorPresenter) tview.get", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> authorsWithBooks() {\n\t\treturn dslContext.selectFrom(AUTHOR).fetch().stream().map(r -> {\n\t\t\tAuthor author = new Author(r.getId(), r.getName());\n\t\t\tList<Book> books = dslContext.selectFrom(BOOK).where(BOOK.AUTHOR_ID", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\t@Override\n\tpublic void executeServer(SQLTranslation exp, ForestReader in, ForestWriter out) {\n\t\tSQLQuery query = new SQLQuery(false);\n\t\tEnv env = new Env(query);\n\t\tSQLTranslation body = exp.normalize(schema, query, null, env, NormType.NORMAL);\n\t\tbody.finalize", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "        if app_info['mainactivity']:\n            install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['mainactivity'], True)\n        else:\n            install_and_run(DYNAMIC_TOOL_DIR, file_path, app_info['packagename'], app_info['mainactivity'], False", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genomes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genomes\n     */\n    Genome parseGenomes(InputStream inputStream);\n\n    /**\n     * Parse", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "                Symbol.typed(bar_type, 'bar'),\n                Symbol.typed(IntType, 'baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_list():\n    inc_type = Func[[IntType], IntType]\n    check_expr_type(\n        \"\"\"\n        inc", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));\n\n        assertThat(pe, queryType(QueryType.SELECT));\n        // end::prepared[]\n", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "                            return new NotFoundException(cause);\n                        default:\n                            return new APIIncorrectException(cause);\n                    }\n                }\n                return null;\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter.Builder()\n               .setEndpoint(BASE_URL)\n               .setRequestInterceptor(new Interceptor(_config))\n               ", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "GUI/Widgets/TreeView.py\nclass TreeViewDock(QDockWidget):\n\tdef __init__(self, main_window, document):\n\t\tQDockWidget.__init__(self, main_window)\n\t\tself._doc = document\n\t\tself._tree_view = QTreeView(self)\n\t\tself._tree_view.setRootIndex(Q", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute(elt, AlvisIRConstants.XML_SEARCH_LABEL_UPPERCASE, false)) {\n\t\t\tlabelFactory = new UpperCaseFacetLabelFactory(labelFactory);\n\t\t}\n\t\tif (XMLUtils.getBooleanAttribute", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Number.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Boolean.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Character.class, new DefaultObjectRenderer());\r\n\t\tregisterRenderer(Byte.class, new Default", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "    url(r'^(?P<slug>[\\w\\-\\+]+)/add-ci-pipeline$', AddPackageCIPipeline.as_view(), name=\"package-add-ci-pipeline\"),\n    url(r'^(?P<slug>[\\w\\-\\+]+)/hide$', hide_ci_pipeline, name=\"hide-ci-p", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "    person = None\n    if not request.user.is_anonymous():\n        person = request.user.person\n    account = account_for_vimeo_id(access_token_data['user_id'], person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "    grid = _gen_grid(data, options)\n    # Compute likelihood across grid\n    likelihood = _grid_likelihood(data, options, grid)\n    # Apply priors to likelihood\n    likelihood = _apply_priors(data, options, likelihood, grid)\n    # Compute posterior\n    posterior = _calc_integral(", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "                # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                #   for the mean location\n                #   of the segment\n                #   (x_mean, y_mean)\n                #   (x_mean, y_mean)\n                #   (x_mean, y_mean)\n                #   (", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "        self.assertListEqual(list(etree_iter_paths(root)), [\n            (root, '/a'),\n            (root[0], '/a/b1'),\n            (root[0][0], '/a/b1/c1'),\n            (root[0][1], '/a/b1/c2'),\n            (root", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "    cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n            destinatario=Destinatario(\n                    CPF='11122233396',\n                    xNome", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "            Board.this.rollDices();\n          }\n        }\n        Board.this.rollDices();\n        Board.this.rollDices();\n        Board.this.rollDices();\n        Board.this.rollDices();\n        Board.this.rollDices();\n        Board.this.rollDices();\n        Board.this.rollDices();\n        Board.this.roll", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "            EtsiResponse resp = this.client.send(req);\n            \n            // 5. Create the ASiC file\n            this.service.sign(dataToSign, resp.getSignature(), resp.getSignatureValue());\n            this.service.save(RESULT_FILE);\n            \n            System.out.println(\"ASiC file saved to \" +", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "        self.rule.set_engine(self.engine)\n        self.rule.set_child_heuristics(self.runner)\n        self.rule.load_kb({})\n\n    def tearDown(self):\n        self.rule = None\n        self.engine = None\n        self.runner = None\n\n    def test_nothing(self):\n        self.rule.set_engine(self.engine)\n", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a profile.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a profile\n     */\n    Profile parseProfile(InputStream inputStream);\n\n    /**\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "        RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 12 || type == 0) {\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 13 || type == 0) {\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\n", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "        DeviceInfo deviceInfo = new AndroidDeviceDetailsInfo().getDeviceInfo();\n        Feedback feedback = new Feedback(userFeedback.getMessage(), userFeedback.getScreen(),\n                userFeedback.getScreenCapture(), deviceInfo, packageInfo, email);\n        FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        feedbackUseCase.send", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "\t\t# self._model = DocumentModel()\n\t\t# self._model.set_document(document)\n\t\t# self._model.set_document(document)\n\t\t# self._model.set_document(document)\n\t\t# self._model.set_document(document)\n\t\t# self._model.set_document(document)\n\t\t# self", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "                art = draw_art(fingerprint, key['key_size'], key['key_type'])\n                print(art)\n            else:\n                print('{0} {1} {2}'.format(fingerprint, description, created_at))\n\n    async def list_vaults(self):\n        backend = await self.open_backend()\n       ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "\tprivate List<PlayerOverview> playerOverview;\n\tprivate List<Game> schedule;\n\tprivate List<TeamLeaders> leaders;\n\tprivate List<TeamLeaders> leadersAll;\n\tprivate List<TeamLeaders> leadersHome;\n\tprivate List<TeamLeaders> leadersAway;\n\tprivate List<TeamLeaders> leadersHomeAll;\n\tprivate List<TeamLeaders", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "        return RespostaExtrairLogs.analisar(retorno)\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: satcfe.resposta", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "            table_index.setdefault(table_name, []).append(key)\n            object_index[obj] = key\n\n        # load items in chunks, handling continuation tokens\n        loaded = self.session.load_items({\n            \"RequestItems\": {\n                table_name: table_index[table_name]\n                for table_name in table_index\n            }\n       ", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_ASC:\n                    Arrays.sort(sorted, new ItemDurationComparator(true));\n                    break;\n                case DURATION_DESC:\n                    Arrays.sort(sorted", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "        xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"/\" />'\n        self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), '/')\n        document = ElementTree.parse(io.StringIO(xml_test))\n        self.assertEqual(node_document_uri(document), '/')\n       ", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "    private final OAuth2Requester requester;\n    \n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = sessionController;\n        this.state", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "            raise e\n        self.training_complete = True\n        self.logger.info(f\"Initialized training for {self.identifier} in {time.time() - begin} seconds\")\n\n    def train(self) -> None:\n        \"\"\"Perform training\"\"\"\n        self.logger.info(f\"Training {self.identifier}...\")\n        begin = time.time", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "    public HiMuteStatus getMuteStatus(HiSide side)\n    {\n        return _chat.getMuteStatus(side);\n    }\nNext line of code:\n    public int getChatMessageCount()\n    {\n        return _chat.getChatMessageCount();\n    }\nNext line of code:\n    public ChatMessage get", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "    private final Vms vms;\n    private final Jobs jobs;\n    private final Tasks tasks;\n    private final Errands errands;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(restTemplate, root);\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "    public void onChannelStatusChanged(ChannelStatusChangedEvent event) {\n        if (event.getChannel().equals(channel)) {\n            setStatus(event.getStatus());\n        }\n    }\n\n    @Override\n    public void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        ILocation bounds = getLocation", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "        return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "            VotingModule.class\n    };\n\n\n    /**\n     * The plugin this module loader is for\n     */\n    private AthenaGM plugin;\n\n\n    /**\n     * Map of module names to module objects\n     */\n    private HashMap<String, Module> modules;\n\n\n    /**\n     * Create a new ModuleLoader for the specified plugin\n", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "        DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);\n        double[] d3Sad = BlackFormula2.price_Sad_Automatic(\n            DoubleSad.input(DATA[looptest][0], null), DoubleSad.input(DATA[looptest][1], null), \n", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "  public void init(MutableConfig config) {\n    config.set(\"packager\", new Packager());\n  }\n\n  @Override\n  public void configure(MutableConfig config) {\n    var packager = config.getOrUpdate(\"packager\", Packager.class);\n    packager.set(\"packager\", config);\n   ", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize thread pool size.\n     * @return {@link DownloadQueue}.\n     * @see #newDownloadQueue()\n     */\n   ", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "                        ExeSQL(sql)\n                        # print('update status sql: ',sql)\n                        # print('update status sql: ',sql)\n                        # print('update status sql: ',sql)\n                        # print('update status sql: ',sql)\n                        # print('update status sql: ',sql)\n                        # print", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        Element querySetConfigElement = getFirstTagOccurrence(element, QUERY_SET_CONFIG_TAG);\n        if (querySetConfigElement!= null) {\n            NodeList querySetList = query", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "    def test_simple(self):\n        \"\"\"Test simple operations.\"\"\"\n        for op in simple_op:\n            for i in range(1, 4):\n                for j in range(1, 4):\n                    for k in range(1, 4):\n                        for l in range(1, 4):\n                           ", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "            left_foot_task = DOFTask(\n                self.robot, self.robot.left_foot, self.cur_stance.left_foot,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\t\t\tnew APP2Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew DHTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew SOSSegment(aJPEG).encode(aOutput).log", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "            if (sl == null) {\n                logger.log(Level.SEVERE, \"Keine Sammellastschrift ausgewählt.\");\n                return;\n            }\n\n            if (type == HibiscusExportType.SAMMEL) {\n                if (sl.getAusgefuehrt()) {\n                    logger.log(Level", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "        Lore lore = LoreLoader.getLore(key);\n        if (lore!= null) {\n            final ItemStack stack = new ItemStack(ItemLorePage.instance);\n            ItemLorePage.setLore(stack, key);\n\n            entityPlayer.inventory.addItemStackToInventory(stack);\n            entityPlayer.addChatComponentMessage(new ChatComponent", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "    class PretrainedAligner(TopLevelMfaWorker, CorpusAligner):\n        \"\"\"\n        Mixin class for aligning corpora with pretrained acoustic models\n\n        See Also\n        --------\n        :class:`~montreal_forced_aligner.abc.TopLevelMfaWorker`\n            For top-level worker parameters\n", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM yyyy\");\n    private static final DateTimeFormatter DATE_FORMATTER_NO_YEAR = DateTimeFormatter.ofPattern(\"dd MMM\");\n    private static final DateTimeFormatter DATE_FORMATTER_NO_MONTH = DateTimeFormatter.ofPattern(\"yyyy\");\n    private static final DateTimeFormatter", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\nNext line of code:\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\nNext line of code:\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\nNext line of code:\n\tprivate static final Logger logger = LogUtil.getLogger(Util.class);\nNext", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    FlipOutXaxis(FlipOutXaxis", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "            h5 =  LocalHost5\n        return H\n\n    def test_hosts_container(self):\n        hosts = self.get_hosts()\n        container = HostsContainer.from_definition(hosts)\n\n        self.assertEqual(len(container), 5)\n        self.assertEqual(container.roles, ['h1', 'h2', 'h3", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "        problem = SearchSkCh(ch, der_mode=der_mode)\n    if issubclass(bvf_cipher, Cipher):\n        problem = SearchRkCh(ch, der_mode=der_mode, enc_der_mode=der_mode, search_mode=search_mode,\n                              initial_ew=initial_weight, initial_kw=0)\n", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "        def tc_command_filter(command):\n            if command.startswith(\"tcset\"):\n                return command\n            if command.startswith(\"tcdel\"):\n                return command\n            if command.startswith(\"tcshow\"):\n                return command\n            return None\n        def tc_command_filter(command):\n            if command.startswith(\"tcset\"):\n               ", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\nNext line of code:\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\nNext line of code:\n  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\nNext line of code:\n  assert isinstance(encoder, GLON", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor =  db.query(ExpenseManagerContract.ExpenseTable.TABLE_NAME, null,\n                ExpenseManagerContract.ExpenseTable", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "    private SimpleDateFormat monthFormatter;\n\n    private CalendarPrepareCallback calendarPrepareCallback;\n    private OnMonthChangeListener onMonthChangeListener;\n    private OnDayChangeListener onDayChangeListener;\n    private DisplayEventCallback<Calendar> displayEventCallback;\n\n    private ScrollManager scrollManager;\n\n    public MonthCalendar(Context context) {\n        super(context);\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "    my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [x for x in xrange(-25, 25)]\n\n  def test_inf_input(self):\n    my_stream = white_noise(inf)\n    assert isinstance(my_stream, Stream)\n    assert my_stream", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "                isinstance(t2, UnionMeta)\n            ):\n                for t in t2.__types__:\n                    try:\n                        unify(t1.__instance__, t, backref)\n                    except TypeCheckError:\n                        pass\n                    else:\n                        return\n                raise\n            else:\n                raise\n\n    elif isinstance(t1", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "        self.blink = Blink()\n        self.blink.startup()\n        self.blink.refresh()\n        self.blink.refresh()\n        self.blink.refresh()\n        self.blink.refresh()\n        self.blink.refresh()\n        self.blink.refresh()\n        self.blink.refresh()\n        self.blink.refresh()\n        self", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "      self.on_faulted.Set(ex)\n      return\n\n    self.next_sink.AsyncProcessRequest(sink_stack, msg, buf, headers)\n\n  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    try:\n      self._serializer.Unmarshal(msg, stream)\n    except Exception as ex:\n     ", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "\t\t# self._model = DocumentModel(self._doc)\n\t\t# self._model.populate_drawings()\n\t\t# self._model.populate_part(self._doc.get_sketches()[0])\n\t\t# self._model.populate_part(self._doc.get_sketches()[1])\n\t\t# self._", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "        data.setOperation(DrumOperation.APPEND_UPDATE);\n        return data;\n    }\n\n    private static DrumStoreEntry<PLDTestData,?> createNewData(long key, DrumOperation op, long... val) {\n        InMemoryEntry<PLDTestData,?> data = new InMemoryEntry<>();\n        if (", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "        ThreadDumpRuntime runtime = ThreadDumpFactory.fromString(out.toString());\n        assertThat(runtime.getThreads().size(), equalTo(1));\n        assertThat(runtime.getThreads().iterator().next().getName(), equalTo(\"remotely-observed-thread\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithAuth", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "        return new RoxanaPropertiesMockBuilder()\n               .withLocale(Locale.CANADA)\n               .withSuppressFailsTranslations(false)\n               .withBaseName(\"messages\")\n               .withResponseStrategy(ResponseStrategy.FULLY)\n               .withSuppressOthersExceptions(false)\n               .build();\n    }\n\n    private ResponseProcessor", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" 个\");\n            }\n        });\n    }\n}\n", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "      assert lag2freq(freq2lag(v)) == v\n      assert freq2lag(lag2freq(v)) == v\n\n  def test_almost_eq(self):\n    assert almost_eq(1, 1)\n    assert almost_eq(1, 1.0000000000000001)\n    assert almost", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "    self._socket.write(self._ping_msg)\n    self._last_ping_start = time.time()\n\n  def _CheckInitialConnection(self):\n    \"\"\"Checks the initial connection to the remote server.\n\n    This method is called after the socket is opened, but before any\n    messages are sent.  It is responsible for", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "            Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy20Service.class,\n            Proxy21Service.class,\n            Proxy22Service.class,\n            Proxy23Service.class,\n            Proxy24Service", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "        self._cache = GlobalConfigCache.by_config_name\n        self.by_guild = GlobalConfigCache.by_config_name\n        self._cache = GlobalConfigCache.by_config_name\n        self.by_guild = GlobalConfigCache.by_config_name\n        self._cache = GlobalConfigCache.by_config_name\n        self", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "        welcomeString.setText(\"Bienvenido \" + Constants.SIMBOLO_GUARANI + \" \" + Utils.getPrefs(getActivity(), Constants.USER_PREFS_USER) + \"!\");\n        return header;\n    }\n\n    private void initializeEvents() {\n        EventParent eventParent1 = new EventParent(\"Mboehao", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "    return operator.eq(*operands)\n    return operator.eq(*operands)\n    return operator.eq(*operands)\n    return operator.eq(*operands)\n    return operator.eq(*operands)\n    return operator.eq(*operands)\n    return operator.eq(*operands)\n    return operator.eq(*operands)\n    return operator.eq(*operands)\n   ", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "            // Notify the fragment to open the chat\n            ObservableRegistry.getInstance().notify(classToNotify, new InviteToChatFragment.ChatRegisteredParam(success, newChatId));\n        }\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/controller/SpinnerObservable.java\npublic class SpinnerObservable", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "        UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertTrue(response.isBizSuccess());\n        LOG.info(\"scanPay response: {}\", JSON.toJSONString(response));\n    }\n\n    /**\n     * 扫码支付回调\n     */\n    @Test\n    public void scanPayNotify() throws WXPay", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "        MessageMapperEnum messageMapper = new MockedMessageMapper(KEY, ERROR);\n        ParameterFinderStrategy parameterFinderStrategy = new MessageMapperEnumParameterFinder(messageMapper, new ArrayList<>());\n        MessageTranslated messageTranslated = creator.create(messageMapper, parameterFinderStrategy);\n        assertEquals(KEY, messageTranslated.getKey());\n        assertEquals(ERROR,", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "        self.management = management.Management(self)\n        self.quota = quota.Quotas(self)\n        self.management.mgmt_clusters = management.MgmtClusters(self)\n        self.management.mgmt_flavors = management.MgmtFlavors(self)\n        self.management.mgmt_datastore_versions = management.MgmtDatastoreVersions(\n            self", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "    public int readSmallIntValue(int d1) {\n\t\treturn d1 & 0xFF;\n    }\n\n    public int readSmallInt() throws IOException {\n\t\treturn readSmallIntValue(readCodeInteger());\n    }\n\n    public int readSmallInt() {\n\t\treturn readSmallIntValue(readCodeInteger());\n   ", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "            m.videoSetFrameRate.setText(Integer.toString(Integer.parseInt(m.videoSetFrameRate.getText())));\r\n        } else {\r\n            m.videoSetFrameRate.setText(\"1\");\r\n        }\r\n\r\n        // set width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 0) {\r\n            m.videoSetWidth.setText(Integer.toString", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "            MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(timezone=self.__timezone)\n                break\n            except ParseError:\n                continue\n\n        if not isinstance(self.__parser, PingParser):\n            raise Parse", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPingUri(context);\n        final BoundRequestBuilder boundRequestBuilder = prepareGet", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "        ObservableRegistry.getObservable(QRCodeFragment.class).register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getObservable(QRCodeFragment.class).remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "            self._probe = probe\n        else:\n            self._probe = load_probe()\n        # Load the spike detection parameters.\n        self._kwargs = kwargs\n        self._kwargs['probe'] = self._probe\n        self._kwargs['tempdir'] = self._tempdir\n        self._kwargs['", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "\t\t\tFile file = new File(basePath + \"/ddi2xforms/ddi2xforms.xsd\");\n\t\t\tFile file2 = new File(basePath + \"/ddi2xforms/ddi2xforms.xsd\");\n\t\t\tDiff diff = xmlDiff.diff(file, file2);\n\t\t\tAssertions.assertTrue", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "      self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def __init__(self, decl):\n    self._decl = decl\n    self._blocks = []\n    self._block_idx_map = {}\n    self._block_nodes = {}\n    self._block_intervals = None\n", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vast sandbox\nNext line of code:\n        state = stateFactory.createState(VpaidState.class);\n\n        assertThat(state instanceof TestVpadState, is(true", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "  public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (inExp.isNegative()) {\n      result.append(OPEN_BRACKET);\n      result.append(\"NOT \");\n      result.append(OPEN_BRACKET);\n      result.append(\"IN \");\n      result.append(", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "        self.assertEqual(\"Your child\", replace_blank_name(name=None, language=\"Hindi\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\"\", language=\"Hindi\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name=\" \", language=\"Hindi\"))\n        self.assertEqual(\"Your child\", replace_blank_name(name", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n        self.assertEqual(\n", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "        # if there is no more bits to map, return\n        if rem == 0:\n            return\n        # otherwise, map the rest bits\n        # TODO\n        # TODO\n        # TODO\n        # TODO\n        # TODO\n        # TODO\n        # TODO\n        # TODO\n", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) {\n\t\tValidity validity = validities.get(tag);\n\t\tif (validity == null) {\n\t\t\tvalidities.put(tag, Validity.ALLOWED);\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void acceptChar(CharTag tag, char value) {\n", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "                        expect(systemUnderTestMock.failWithParameter(GIVEN_STRING)).andThrow(\n                                new ExpectedException(EXPECTED_ERROR_MESSAGE));\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                               .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.g", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def bloquear_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.bloquear_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: sat", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "    u7 = Unit(\"Msun/pc**3\")\n    assert u7.dimensions == energy\n    assert u7.base_value == 1.0\n\n    # test that we can create a unit from a string that is not a unit\n    u8 = Unit(\"kg * m**2 * s", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "        # Make sure we're not binding an abstract model\n        validate_not_abstract(model)\n\n        # Bind all non-abstract subclasses\n        for cls in walk_subclasses(model):\n            if cls.Meta.abstract:\n                continue\n            self.bind_model(cls, skip_table_setup=skip_table_setup)\n\n    def bind_model(self", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "    engine.bind(1)\n    with pytest.raises(InvalidModel):\n        engine.bind(1)\n    engine.bind(User)\n    engine.bind(ComplexModel)\n    engine.bind(VectorModel)\n    engine.bind(User)\n    engine.bind(User)\n    engine.bind(User)\n    engine.bind(User)\n    engine.bind(User)\n   ", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "        // Load modules\n        List<Module> modules = new ArrayList<>();\n        modules.add(new SqlModule());\n        modules.add(new LoanModule());\n        modules.add(new CurrencyRegistryModule());\n        modules.forEach(Module::initialize);\n        modules.forEach(Module::postInitialization);\n        // Load commands\n        CommandLoader.registerCommands(game,", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "                 'root/cimv2:TST_Person.name=\"Mike\"'],\n      'rc': 0,\n      'test': 'linesnows'},\n     ASSOC_MOCK_FILE, OK],\n\n    ['Verify instance command references --no, returns paths, explicit ns',\n     ['references', 'TST_P", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "                    public void startOrderEditActivity(Order order) {\n                        startActivity(EditActivity.getIntent(MainActivity.this, R.string.order_edit_title,\n                                order, new OrderEditController(), R.string.order_edit_ok_button,\n                                R.string.order_edit_cancel_button));\n                    }\n\n                    @Override\n                    public void startAccountEditActivity(Account account", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "        tag = TAG()\n        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    def get_tag_count(self, name=None):\n        \"\"\"Retrieve the number of tags available.\n\n        See :py:meth:`~pyfmodex.sound.Sound.get", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "        resource = ThermometerResource(aircraft.sensors.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n\nclass PitotTubeResourceTests(TestCase):\n    def test_get_pitot_tube_data(self", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<ImgurResponseWrapper<List<String>>> listAccountImageIds", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "    column = User.age\n    value = 3\n    expected_ref = \"#n0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0\": expected_action.value}\n\n    ref, action = reference_tracker._value_ref(column, value, inner=True)\n\n    assert", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "            \rNext line of code:\n            \rNext line of code:\n            \rNext line of code:\n            \rNext line of code:\n            \rNext line of code:\n            \rNext line of code:\n            \rNext line of code:\n            \rNext line of code:\n            \rNext line of code:\n            ", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "            if request.user == post.user:\n                can_delete = post.can_delete()\n                can_edit = post.can_edit()\n            else:\n                can_delete = False\n                can_edit = False\n        else:\n            can_delete = False\n            can_edit = False\n        return render(request, self.template_name, {'", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending terms to be displayed as gif categories,\n     * which when clicked will perform a gif search of that term\n     *\n     * @param serviceIds a {@link Map}", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::failed);\n            of(mConnectionScanResultsListener).ifPresent(connectionResultsListener -> connectionResultsListener.onConnectWithScanResult(null));\n            of(mConnectionWpsListener).ifPresent(wpsListener -> wpsListener.isSuccessful(false));\n            wifiLog(\"ERROR CONNECTING", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "        for (PlaySession playSession : stack.getPlaySessions()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\n            PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\n        }\n       ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "    private final Tasks tasks;\n    private final Deployments deployments;\n    private final Vms vms;\n    private final Jobs jobs;\n    private final Errands errands;\n    \n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "    from montreal_forced_aligner.corpus.features import SegmentVadFunction\n    from montreal_forced_aligner.corpus.features import SegmentVadArguments\n    from montreal_forced_aligner.corpus.features import SegmentVadConfigMixin\n    from montreal_forced_aligner.corpus.features import", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "                bufr_message.length.nbits\n            )\n            nbits_encoded += bufr_message.length.nbits\n\n        if wire_template_data:\n            bufr_message.wire()\n\n        return bit_writer.get_bits()\n\n    def process_section(self, bufr_message, bit_writer, section):\n        \"\"\"\n        Process a section of", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "        self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    def get_tag_count(self, name=None):\n        \"\"\"Retrieve the number of tags available.\n\n        See :py:meth:`~pyfmodex.sound.Sound.get_tag` for more information", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "    public void listenToResultSet(final BenchmarkMethod meth, final AbstractMeter meter, final double data) {\n        final NiceTable table = new NiceTable(1);\n        table.addHeader(meth.getMethodWithClassName());\n        table.addRow(new String[] { Double.toString(data) });\n        out.println(table);\n    }\n\n    /**\n", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "        form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            comments = form.cleaned_data['comments']\n            abuse_report = AbuseReport.objects.create(\n                logged_against=logged_against,\n                logged_by=logged_by,\n                abuse_comment=comments,\n            )\n            messages.success(request, _('", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/recordings\"), BEEP(true));\n\t\tNext line of code:\n\t\ttropo.on(EVENT(\"record\"), Do.say(\"Thank you for calling. This call will be recorded.\"), Do.record(URL(\"http://www.example.com/recordings\"), B", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrack.class);\n\t\t\t\tadapter.notifyDataSetChanged();\n\t\t\t\tmViewPager.setAdapter(adapter);\n\t\t\t\tmViewPager.setOnPageChangeListener(mOnPageChangeListener);\n\t\t\t}\n\t\t});\n    }\n    \n    @Override", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "\t\t\t\t\tappEvent.setExit() ;\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error occurred while setting the close request handler\", e);\n\t\t}\n\t\t\n\t\t// initialize the drive\n\t\ttry {\n\t\t\tclient = new Drive.Builder(httpTransport, JSON_FACTORY, null", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "        // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tfinalize(1);\n        }\n        // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tfinal", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "        new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\n        }\n\n        /**\n         * 打开/关闭透传消息\r\n         * @param enable 打开/关闭\r\n         */\n        public static void enableReceiveNormalMsg(boolean enable){\n            new EnableReceiveNormalMsgApi().enableReceiveNormalMsg(enable", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "            listaDeRespostas.getPropriedades().getPrazo()!= null) {\n            if (!VerificadorDePrazos.estaNoPrazo(listaDeRespostas.getPropriedades().getPrazo())) {\n                result.include(\"erro\", \"A lista de respostas", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "    AdRetriever adRetriever;\n\n    @Mock\n    AdInterface adInterface;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLogicController componentController;\n\n    @Mock\n    AdPlayingMonitor adPlayingMonitor;\n\n    @Mock\n    CuePointMonitor cuePoint", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "    return f'{path}{elem.tag}{suffix}'\nNext line of code:\n    return f'{path}{elem.tag}{suffix}'\nNext line of code:\n    return f'{path}{elem.tag}{suffix}'\nNext line of code:\n    return f'{path}{elem.tag}{suffix}'\nNext line of code:\n", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "    String className = adapterName(type, INJECT_ADAPTER_SUFFIX);\n    TypeSpec.Builder adapterBuilder = TypeSpec.classBuilder(className)\n       .addModifiers(PUBLIC, STATIC)\n       .addJavadoc(bindingTypeDocs)\n       .addSuperinterface(ParameterizedTypeName.get(ClassName.get(Binding.class),\n            injectableType", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "                TypingMessage m = (TypingMessage)message;\n\n                if (m.isTyping())\n                {\n                    _isTyping = true;\n                }\n                else\n                {\n                    _isTyping = false;\n                }\n            }\n            else if (message.getType() == MessageType.SMART_REPLY)\n           ", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "        ThreadDumpThread thread = sut.thread(\"thread\");\n        assertThat(thread.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(thread.getLock(), equalTo(main.getLock()));\n        assertThat(thread.getLock(), equalTo(main.getLock()));\n        assertThat(thread.getLock(), equalTo(main.getLock()));\n        assertThat(thread.getLock(), equalTo(main", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n  assert args.gps_sv[0].getL1CAMessage().binValue == 0\n  assert", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "        GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\n            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\n            PressureSensorCollector.flushDBCache(deviceID);\n        }\n       ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "    return first_record(self, fill)\n\n    def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\nNext line of code:\n    return last_record(self, fill)\n\n    def fillna(self, reverse=False, fillvalue=None):\n        \"\"\"Fill", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "\t\tEXOG.append(dmy_covariates)\n\n\t\tEXOG_A = []\n\t\tEXOG_A.append(dmy_mediator)\n\n\t\tEXOG_B = []\n\t\tEXOG_B.append(dmy_mediator)\n\n\t\tTvalues_A = glm_cosinor(data,\n\t\t\t\t\t\tEXOG_A,\n", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "        self.tracerouter = Tracerouter.Tracerouter()\n        self.pcap_logger = PcapLogger.PcapLogger(config.pcap_logdir)\n        self.link.setup()\n        self.link.launch_collector()\n        self.listener.run()\n        self.cleaner.run()\n        self.reporter.run()\n        self.tracer", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "        return self._get_resource(Webhook, \"\")\n\n    @property\n    def outbox(self):\n        return Outbox(self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    def _validate_open_hours(self, emails, open_hours, free_busy):\n        if not isinstance(open_hours, list", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "                // 选择时间 默认从2000~2050年\n                new DatePicker(this, mRecord.getRecordTime().get(Calendar.YEAR),\n                        mRecord.getRecordTime().get(Calendar.MONTH),\n                        mRecord.getRecordTime().get(Calendar.DAY_OF_MONTH)).show();\n                break;\n\n            case R.id.record_weather", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "            non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical_error = 0\n        _log.debug('Time to calculate lnprob: %0.4", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "    private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager mViewPager;\n    private TabLayout tabLayout;\n    private int mHomePointPosition;\n    private int mIconSize;\n    private boolean mRootDown;\n    private int mClearMenLevel;\n    private boolean", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "        TcClassParser(self.__con).parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_device(self, device):\n        if typepy.is_null_string(device):\n            return\n\n        self.__logger.debug(\"parse device: {}\".", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "    assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.deltas[4].id == \"delta-5\"\n    assert deltas.deltas[4].", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "    from pyramid_swagger.tween import validation_error\n    from pyramid_swagger.tween import is_swagger_documentation_route\n    from pyramid_swagger.tween import get_swagger_objects\n    from pyramid_swagger.tween import get_swagger_versions\n    from pyramid_swagger.tween import get_exclude_paths\n", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
{"pred": "    activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger, sharedPreferences);\n    activityLightLevelManager.onResume();\n    activityLightLevelManager.onPause();\n\n    // TODO(jontayler): move this to the renderer.\n    // TODO(jontayler): move this to the renderer.\n    // TODO", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "            Str('MSCm2', Pt=MSCm2(), Len=1),\r\n            Str('MSCm2', Pt=MSCm2(), Len=1),\r\n            Str('MSCm2', Pt=MSCm2(), Len=1),\r\n            Str('MSCm2', Pt=MSCm2(),", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "        result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)\n\n    \ndef apply_ne(left: Column, right):\n    if type(right) == Column:\n        result", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
