{"pred": "   private final transient JsonSerializer serializer;\n    private final transient JsonDHTSerializer dhtSerializer;\n    private final transient JsonRoutingTableSerializer routingTableSerializer;\n    private final transient KademliaRoutingTable routingTable;\n    private final transient Timer timer;", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    public void queueEvent(Event event) {\n        this.eventQueue.add(event);\n    }\n\n    public void queueEvent", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "       // mEffects.add(new NoEffect());\n        mEffects.add(new ContrastBrightnessAdjustmentEffect());\n        mEffects.add(new FlipEffect());\n        mEffects.add(new FlowAbsEffect());\n        mEffects.add(new FlowAbsGa", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n    rounds = 1\n\n    @classmethod\n    def eval(cls, x):\n        return tuple([", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   SignSessionData signSessionData = new SignSessionData(ACCOUNT_NAME, APP_ID_SIGN,\n        SERVER_CHALLENGE_SIGN, SESSION_ID);\n    when(mockDataStore.getSignSessionData(SESSION_ID)).thenReturn(signSession", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "   private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务元数据管理器\n     */\n    private TaskMetaInfo", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "\n    public EffectManager(Activity activity, ViewGroup parameterListView, SpectaculumView spectaculumView) {\n        mActivity = activity;\n        mParameterListView = parameterListView;\n        mSpectaculumView = spectaculumView;\n        mParameterListAdapter =", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            Log.", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "           if self.global_config['_radius_client'].do_acct(self.remote_ip, self.cli, self.cld, self.cGUID, self.cId, self.remote_ip, \\\n              self.rDone, self.acctA, self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   __bytearray__ = bytearray([0x00])\n\n    def __init__(self, uri):\n        self.uri = uri\n\n    def __str__(self):\n        return self.uri\n\n    def __repr__(self):\n        return 'URI({})", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "           //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //save private and public Key to storage\n            rsa.saveRSAKeys", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "       String message = AppSettings.getFindPeopleAllowedMessage();\n        String email = AppSettings.getUserEmail();\n        String name = AppSettings.getUserName();\n        String avatarUrl = AppSettings.getUserAvatarUrl();\n        String login = AppSettings.getUserLogin", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "\n\n@method(infix('!', bp=72))\ndef evaluate_simple_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_focus_select(", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "       self.assertRaises(TypeError, InterLayerPipeline,\n                          InputLayer(1, 1, 1, 1),\n                          ConvLayer(1, 1, 1, 1, 1, 1, 1, 1, 1,", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "         if num_children == 1:\n            cstr_node.rhs = convert_ast_constraint(children[0])\n            process_children(cstr_node.rhs, children[0])\n          else:\n            cstr_node.lhs = convert_ast_constraint", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n        await wild.monitor_task\n\n        await wild.monitor_status()\n\n        await wild.monitor_task\n\n        await wild.monitor_status()\n\n        await wild.monitor_task\n\n        await wild.monitor_status()\n\n        await wild.monitor_", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   private static final ButterKnife.Action<View> GONE = (view, index) -> view.setVisibility(View.GONE);\n    private static final String TAG = MovieInfoFragment.class.getSimpleName();\n    private static final String TAG_TRAILERS =", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "\n    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        email = Column(String)\n        name = Column(String)\n        joined = Column(DateTime, dynamo_name=\"j\")\n\n        def __init__(self, **kwargs", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "       assert self.redlock.locked()\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert not self.redis.exists(self.redlock.key)\n        assert not self.redlock.locked()\n\n    def test_", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "   if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n    # Load data\n    if c['vocab_def']:\n        vocab_", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "               writeResponse(SUCCESS, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CRE", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude_mps == 50.\n  assert", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "           Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume / ", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "       return ConeSettings(self._sptr, \"Sound\")\n\n    @property\n    def threed_orientation(self):\n        \"\"\"The direction the 3D projection cone is facing.\n\n        :type: VECTOR\n        \"\"\"\n        return VECTOR(self", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n               ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "   def __init__(self, calg=CompressionAlgorithm.Uncompressed):\n        self._calg = calg\n\n    def parse(self, packet):\n        self._calg = packet[0]\n        del packet[0]\n\n        self.data = packet\n", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "                           if (env.combExpReg[i] != null) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                } // USE_SUBEXP_CALL\n            } // USE_CEC\n        } // USE_", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "\n            while (transactionIterator.hasNext()) {\r\n\r\n                Transaction t = transactionIterator.next();\r\n\r\n                printer.print(t);\r\n                System.out.println(print);\r\n                print.setLength(0);\r\n\r\n            }\r\n\r\n", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "       #cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        #cellSize = findCellSize(imgshape, detectCellShapeParameter = detectCellShapeParameter, verbose = verbose, out = out, **parameter);\n        #", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "               if (query.queryType == RequestType.TIMESERIES) {\n                    Either<String, Tuple2<List<String>, List<String>>> dataSourceDescRes = coordinator.aboutDataSource(stmnt.dataSource, reqHeaders);\n                    if (dataSource", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "   public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(\n            CheckedSupplier<$Argument2> givenStep) {\n        preparation.recordGivenStep(givenStep);\n        return new GivenTwoArgumentsWhen", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "                   UsageEncryption.OWNER_SYMMETRIC,\n                    OperationMode.PKCS5,\n                    EncryptionAlgorithmCoded.AES256,\n                    algorithm_parameter_name=AlgorithmParameterName.KY,\n                    algorithm_parameter", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "   url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),\n    url(r'^pipeline-job-template$', get_pipeline_job_template, name=\"ajax-pipeline-job-template\"),\n    url(", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "   # 获取 apk 文件的 md5 值\n    apk_md5 = genMD5(file_path)\n    # 获取 apk 文件的包名\n    apk_packagename = get_manifest(file_path)['packag", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "       if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientBadMethodCallException(\n                storage_type + ' is not a valid storage type', []\n            )\n        return self\n\n\n", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   try {\n      return process.await().toString();\n    } catch (CommandFailureException e) {\n      if (expectedExitCodes == null || expectedExitCodes.length == 0) {\n        throw new IosDeviceException(this, e);\n      }\n\n      if (", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (null != textColor) {\n\t\t\ttextColor = PreferenceManager.getDefaultSharedPreferences(contextRef.get()).getInt(Keys.TEXT_COLOR, textColor);\n\t\t}\n\t\tif (null != textColor) {\n\t\t\ttextColor = Pre", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "                           IntentHelper.toImageDetailActivity(mActivity, picture);\n                            break;\n                        case 1:\n                            ShareUtil.shareImage(mActivity, picture.getPics());\n                            break;\n                        case 2:\n                            ShareUtil.share", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\tMessage msg = XmlUtil.fromXml(xml, Message.class);\n\t\tif (msg.isEvent()) {\n\t\t\tAbstractEvent event = msg.asEvent();\n\t\t\tif (event.Event.equals(AbstractEvent.EVENT_SUBSCRIBE", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   @command(pass_context=True, category='Bot Info', aliases=[\"raid-city\", \"rc\"])\n    @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, *city):\n        \"\"\"\n        **!raid", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"),", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       if context.axis == 'attribute':\n            if isinstance(item, (AttributeNode, TypedAttribute)):\n                yield item\n            elif is_element_node(item):\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in context.", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "       config_actor = ConfigActor(config_file, 'config')\n        config_actor.start()\n        gevent.sleep(1)\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "\t\t\t\t\t\tsaveauto(image_array, masking_array, maskname, affine_array, vertex_array, face_array, surfname, adjacency_array, tmi_history, columnids)\n\t\t\t\t\telif opts.outtype[i", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponseSyncAdapter.class,\n                OhmletActivity.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                InstallSurveyDependenciesFragment.class,\n                InstallSurveyDependencies.class,\n                Ohm", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        StatementExecution se = new StatementExecution();\n        se", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "\n    @sdproperty\n    def hashalg(self):\n        return self._hashalg\n\n    @hashalg.register(int)\n    @hashalg.register(HashAlgorithm)\n    def hashalg_int(self, val):\n        self._hashalg = HashAlgorithm(", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "     'no_members': Counter,\n    }\n\n  def __init__(self, next_provider, sink_properties, global_properties):\n    self._properties = global_properties\n    self._next_sink_provider = next_provider\n    self._sink_properties", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol(protocol, OK, 'foo')\n        protocol.send_string.assert_called_once_with('foo')\n\n    def test_send_message_with_protocol_with_message_type(self):\n        \"\"\"\n       ", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"statement\", se.getQuery());\n        assertEquals(1, se.getParamIndexes().size());\n        assertEquals(1, se.getParamNames().size());\n        assertEquals(1, se.getSetParamsBy", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getInstance().unregister(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState)", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "\n            # Send the ADR request\n            log.info(\"Sending ADR MAC Command\")\n            command = self._createLinkADRRequest(device)\n            self._sendMACCommand(device.deveui, command)\n            self._dequeueMACCommand(device.deve", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# 16-bit address:\n#\n# 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           ref_time = self.img_handle.ref_time\n\n        else:\n\n            # Get time from config\n            ref_time = self.config.ref_time\n\n\n        # Save reference time to JSON file\n        json_dict['ref_time'] = ref_", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new MarshalledResponse", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "       if (mPublicRoomsListList == null) {\n            return;\n        }\n        mPublicRoomsListList.clear();\n        mPublicRoomsListList.addAll(mHomeServerNames);\n        mPublicRoomsListList.addAll(mHomeServerNames", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       chim_detect = ChimeraDetector(target_sequences, raw_bp_graphs[ID_SMALLEST])\n\n    #refining assembly\n    if not args.solid_scaffolds:\n        logger.info(\"Refining assembly\")\n        refine_", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   deviceGcmToken = FirebaseInstanceId.getInstance().getToken();\n                    stopHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HwPush\":\n               ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       lMS.addTrack(factory.createVideoTrack(\"ARDAMS\",\n            new VideoCapturer(appRtcClient.videoCapturer()),\n            appRtcClient.videoConstraints()));\n      } else {\n        lMS.addTrack(factory.createVideoTrack(\"ARDAM", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "   public PersonalVulnsWindow() {\n        initComponents();\n        // Set the window title\n        setTitle(\"Personal Vulnerabilities\");\n        // Set the window icon\n        setIconImage(new ImageIcon(getClass().getResource(\"/com/cornerpirate/report", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n        GC", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.getSubType() == PacketType.CONNECT) {\n            onConnect(packet, client, transport);\n        } else if (packet.getSubType() == PacketType.DISCONNECT) {\n            onDisconnect(packet, client, transport);\n        }", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "\n        docker_config.add_environment_variables({\n            'CLICK_APP_ID': self.config.app_id,\n            'CLICK_APP_NAME': self.config.app_name,\n            'CLICK_APP_VERSION': self.config.app", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "       assertThat(jobRequest.isPeriodic()).isFalse();\n        assertThat(jobRequest.getStartMs()).isEqualTo(60_000L);\n        assertThat(jobRequest.isStarted()).isFalse();\n\n        jobRequest = JobManager.instance().getJobRequest(", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private PreferenceCategory preferenceCategory;\n\n    private SharedPreferences prefs;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "       simulator_data_datagram = SimulatorDataDatagram()\n        simulator_data_datagram.ParseFromString(b'')\n        self.assertIsInstance(simulator_data_datagram, SimulatorDataDatagram)\n        self.assertIsInstance(simulator", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "   Iterable<Board> its = SMTHHelper.getInstance().wService.getAllBoardsFromWWW().flatMap(new Function<ResponseBody, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull ResponseBody responseBody) throws Exception {\n        try {", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "\tif (model.getTestBases().size() == 1)\r\n\t\tdefaultTestbaseMethodCreated = true;\r\n\r\n\tif (model.getTestBases().size() == 0)\r\n\t\tmodel.getTestBases().add(new TestBases());\r", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       //bgTasksRunning.set(0);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        //bgTasksRunning.set(0);\n    }\n\n    @Override\n    public void onDestroy() {\n        super.", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "   visitBooleanOp(new VisitOrd3(n), opToOccur.get(op);\r\n\r\n    return null;\r\n  }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r\n \n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "           textareaMessage.setText(httpMessage.getRes().getResponse());\n        } else {\n            textareaMessage.setText(\"\");\n        }\n        \n        if (httpMessage.getReq().hasRequest()) {\n            textareaMessage.setText(httpMessage.getReq().getRequest", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "\n    def _read(self, header, data):\n        raise error(\"Not implemented\")\n\n    def _write(self, config):\n        raise error(\"Not implemented\")\n\n    def _prepare_data(self, fileobj, start, available, v2_version, v2", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),\n    (\"", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\t\treturn items;", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new ExposureTransformation(),\n                    new GainTransformation(),\n                    new GrayscaleTransformation(),\n                    new HSBAdjustTrans", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "   api = DERBMDATA(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "           exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n\n            # Raise the exception\n            raise PyOrientCommandException(\n                exception_class.decode('utf-8'),\n              ", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "           events.append(Event(e))\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    # Provider\n    def list", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   user_key = dump_key(user)\n    assert user_key == user_key\n    assert user_key == user_key\n    assert user_key == user_key\n    assert user_key == user_key\n    assert user_key == user_key\n    assert", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "\tpublic static A a(Url url) {\n\t\treturn new A(href(url));\n\t}\n\tpublic static Abbr abbr(String label) {\n\t\treturn new Abbr(alt(label));\n\t}\n\tpublic static Acronym acronym(String", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "       new Colourizer(Colourizer.Color.RED.getCode(),\n        new Colourizer(Colourizer.Color.YELLOW.getCode(),\n        new Colourizer(Colourizer.Color.BLUE.getCode(),\n        new Colourizer(Col", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "           Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "\n\t\tif args.id:\n\t\t\tif args.genotype is None:\n\t\t\t\tprint 'You need to specify genotype folder'\n\t\t\t\tsys.exit(1)\n\t\t\tif args.phenotype is None:\n\t\t\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": " private final static String[] operators = new String[] {\r\n    \"AND\", \"OR\", \"PROXIMITY\", \"ANDNOT\"\r\n  };\r\n\r\n  private final static String[] operators2 = new String[] {\r\n    \"AND\", \"OR\", \"PROXIMITY\",", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "           if (mWallpaper != null) {\r\n                if (mWallpaper.isCropped()) {\r\n                    if (mWallpaper.isHomescreen()) {\r\n                        if (mWallpaper.isLockscreen()) {\r\n                            if (mWallpaper.is", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "       self.beginning_datetime = filenameToDatetime(vid_file)\n\n        # Read the header\n        self.vid_file.read(self.vidinfo.headlen)\n\n        # Read the rest of the file\n        self.vid_file.read(self.", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "       if post.user.username != username:\n            messages.error(request, 'You are not allowed to access this post.')\n            return redirect(reverse('ploghubapp:home_page'))\n        if post.user.username == username:\n            if post.user.user", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\tPacketDispatcher.sendTo(new PacketConfigSync(), player);\n\t}\n\n\tpublic static void sync(EntityPlayer player)\n\t{\n\t\tif (player instanceof EntityPlayerMP)\n\t\t\tsync((EntityPlayerMP) player);\n\t}\n\n\t", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "\ndef getAS3PuffleString(client, puffles):\r\n    puffles_as3_str = list()\r\n    for puffle in puffles:\r\n        p_id, p_type, p_sub_type, p_name, p_adopt, p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   ilm = ilms.Ilm(ilmvals=ILMVALS, bkgvals=BKGVALS, zscale=0.89)\n    ilm.set_zpos(0.0)\n    ilm.set_zscale(0.8", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\t\t\t\t\tISelection selection = new StructuredSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tfireSelectionChanged(selection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=(0, 1), bp=80, label='kind test'))\ndef select_comment", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   def keyclass_int(self, val):\n        self._keyclass = [val]\n\n    @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = [val]\n\n    @", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "   I.randomize_parameters(ptp=0.2, fourier=True, vmin=0, vmax=1)\n    I.set_field()\n    I.draw()\n    I.draw_ortho(im, P, cmap='RdBu',", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "       }).then(new OnComplete<Channel>() {\n            @Override\n            protected void doOnComplete(final Channel channel) throws Exception {\n                context.handleConnectionState(reconnecting);\n            }\n        });\n\n        return deferred.get();\n    }\n\n   ", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "\n    # Recompute the rotation wrt horizon\n    platepar.rot_wrt_horizon = rotationWrtHorizon(platepar)\n\n    # Recompute the FOV selection radius\n    platepar.fov_radius = getFOVSelectionRadius(platepar)", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "           manager = mp.Manager()\n            error_dict = manager.dict()\n            return_queue = manager.Queue()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = compile_information_func(", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "       Log.d(this.getClass().getSimpleName(), \"onStart\");\n        if (chat == null) {\n            chat = getArguments().getParcelable(ChatSettingsActivity.CHAT_ID);\n        }\n        if (chat == null) {\n            Log.e", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "           fab.show();\n        }\n    }\n\n    @UiThread\n    protected void handleError(String error) {\n        Toast.makeText(getContext(), error, Toast.LENGTH_SHORT).show();\n        Flow.get(getContext()).goBack();\n    }", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "       model = Progress\n        fields = ['component', 'area', 'year', 'fiscal_year', 'value']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='iexact')\n\n   ", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           new RegistrationParam(success, email, password, message));\n    }\n}\npackage de.fau.cs.mad.yasme.android.asyncTasks.server;\nimport android.content.SharedPreferences;\nimport android.os.AsyncTask;\nimport de.f", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private HashMap<String, List<String>> mMap;\n    private List<FilterType> mFilterTypes;\n    private List<FilterUrl> mFilterUrls;\n    private List<String> mList;\n    private List<String> mList2;\n    private List<", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "       self.beg_alt = np.arcsin(self.beg_vect[2]/EARTH.POLAR_RADIUS)\n        self.end_alt = np.arcsin(self.end_vect[2]/EARTH.POLAR_", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "   private final Router router;\n    private final SpatialOperator spatial;\n    private final Cost cost;\n    private final TimePriority time;\n    private final Distance distance;\n    private final Heading heading;\n    private final Stopwatch stopwatch;\n    private final InlineS", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "\n        for i in range(0, len(tris), 3):\n            a, b, c = tris[i:i+3]\n            lines.draw_triangle(a, b, c, color=fills[i//3], shader=g)\n", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       bind(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritPushExtension.class);\n        bind(GerritToolWindow.class);\n        bind(GerritUiModule.class);\n       ", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = new AppData();\n\t\t\t\t\ta.read(data, reader);\n\t\t\t\t\tapps.add(a);\n\t\t\t\t\tneedSave = true;\n\t\t\t\t} catch (Exception", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "\t\tFunctionSymbol s = new FunctionSymbol(currentScope, fhead.ID().getText(),\n\t\t\t\t\t\t\t\t\t\t\t   getArgList(fhead), getType(fhead));\n\t\tMMethod m = new MMethod(s);\n\t\tclassIn", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   private CodeGeneratorFactory codeGeneratorFactory;\n\n    @Override\n    public Set<String> getSupportedOptions() {\n        return optionsBuilder.getSupportedOptions();\n    }\n\n    @Override\n    public SourceVersion getSupportedSourceVersion() {\n        return SourceVersion.latestSupported();", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Api.get().searchSuggestions(query)\n\t\t\t\t\t\t\t.compose(onMain())\n\t\t\t\t\t\t\t.map(suggest", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    default boolean enter(Node node) {\n        return true;\n    }\n\n    /**\n     * Call", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n                    if (getZxidFromName(snapshots.get(i).getName()) >= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n\r\n              ", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "\n#!/usr/bin/env python\n\n\n# Segment containing JPEG meta-data\nSeg_dict = IANA_dict({\n    \n    # reserved markers\n    0x01 : ('Temporary private use in arithmetic coding', 'TEM'),\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "       if isinstance(value, (int, float, Decimal, Integer, Float10, DoubleProxy10, DoubleProxy)):\n            return\n        elif isinstance(value, str):\n            if cls.pattern.match(value) is None:\n                raise cls.invalid_value(", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           entries = [e for e in entries if txn_matches(e, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_split]\n        elif filter_type is FilterType.", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   # 2. background\n    bkg = np.random.randn(POS.shape[0]) * 0.001 + 0.001\n    # 3. illumination\n    ilm = np.random.randn(POS.shape[0", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    stringBuilder.append(\"\\n\" + request.getName() + \" - \")\r\n                            .append(request.getPackageName());\r\n                    if (request.getVersion() != null) {\r\n", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n    private Commit", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "           return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'Rubric", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'year')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class =", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "               if not checkFileExistence(pattern.get(\"DataFile\")):\n                    errmsg += \"The data file %s does not exist.\\n\"%pattern.get(\"DataFile\")\n                    rvalue = False\n\n            # 2.2 data file existence\n            if mode", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "\t\t\t\tnew FOTableColumnPostprocessorFake(),\n\t\t\t\tnew FOInsertEndQuestionPostprocessor(),\n\t\t\t\tnew FOEditStructurePagesPostprocessor(),\n\t\t\t\tnew FOSpecificTreatmentPostprocessor(),\n\t\t\t\tnew FOInsertC", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "   url(r'^$', TranStatusPackageView.as_view(), name=\"packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()), name=\"package-new\"),\n    url(r'^view/(?P<", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "   tgAsDict = textgrid_io.parseTextgridStr(textgridStr, includeBlankSpaces)\n    tgAsDict = textgrid_io.parseTextgridStr(textgridStr, includeBlankSpaces)\n    tgAsDict = textgrid_io", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                       new UserLoginTask(activity, UserLoginTask.Mode.REGISTER, user, UserLoginTask.Mode.REGISTER).execute();\n                    }\n                });\n\n        // \"Cancel\" button to close the dialog\n        alert.setNegativeButton(R.string.", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nf(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        dataset =", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "       registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (SEND_NOTIFICATION ^ RESPONSE_MASK), new MarshalledResponse", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "           yield chunk_idx, bounds\n\n    def iter_chunks_excerpts(self, n_samples):\n        \"\"\"Iterate over chunks and excerpts.\"\"\"\n        for chunk_idx, bounds in self.iter_chunks(n_samples):\n            for excerpt", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "   def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.max_segment_length = kwargs.get(\"max_segment_length\", 30)\n        self.min_pause_duration = kwargs.get(\"min_pause_duration\",", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "       return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        return self.get_contacts().first()\n\n    def get_group(self):\n        return Group.objects.get(name=self.language", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate FolderCleaner folderCleaner;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "                       String source = tweet.getUser().getScreenName();\n                        String id = tweet.getId() + \"\";\n                        String hash = tweet.getUser().getId() + \"\";\n                        FileSaver fs = new FileSaver(content, lang, source, url", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "       conditions.append(AndCondition(condition_for(\"and\", column=column), condition_for(\"and\", column=column)))\n    if \"or\" in operations:\n        conditions.append(OrCondition(condition_for(\"or\", column=column), condition_for(\"or\", column=", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "   pipeline.apply(\"Read live projects\", LiveProjectSource.create(org))\n        .apply(ParDo.named(\"Convert live projects to Java objects\")\n            .of(new ExtractState(errorTag)));\n\n    // Tag the state objects to indicate they're from the live state", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "\n    def _render_descriptor_helper(self, descriptor, indent):\n        lines = []\n\n        if isinstance(descriptor, SequenceDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.name))\n            for member in descriptor.members:\n              ", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\tprivate boolean debugImages = true;\n\n\tprivate boolean debug = false;\n\n\tprivate boolean debugImages = true;\n\n\tprivate boolean debugImages = false;\n\n\tprivate boolean debugImages = true;\n\n\tprivate boolean debugImages = false;\n\n\tprivate boolean debugImages", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ff", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       assert get_square_idx(1, 1) == 0\n        assert get_square_idx(1, 2) == 1\n        assert get_square_idx(1, 3) == 2\n        assert get_square_idx(2, 1)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   if gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "       self.generator = SimilarPathGenerator()\n\n    def test_generate_path_for_file(self):\n        self.assertEqual(self.generator.generate_path(\"http://example.com/file.txt\"), \"/file.txt\")\n\n    def test_generate_path_", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": " def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    \"\"\"Process a request message, stream, and headers.\n\n    Args:\n      sink_stack - The SinkStack representing the processing state of the message.\n                   Implementors should push their sink onto", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\n    var javadocTool = ToolProvider.findFirst(\"javadoc\")\n        .orElseThrow(() -> new IllegalStateException(\"can not find javadoc\"));\n    var docerConf = config.getOrThrow(name(), DocerConf.class);\n\n", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       // TODO:\n        // add more verifiers here\n        // verifiers.put(\"Verifier 1\", new VerifierBackground());\n        // verifiers.put(\"Verifier 2\", new VerifierBackground());\n        // verifiers.put(\"Verifier 3\", new Verifier", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "       registerCallAction(new SMSReplyAction(this), SMSReplyAction.SMS_REPLY_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   private final ICompilationUnit testClass;\n\n    private final ICompilationUnit testClass;\n\n    private final ICompilationUnit testClass;\n\n    private final ICompilationUnit testClass;\n\n    private final ICompilationUnit testClass;\n\n    private final I", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "   Prefs providePrefs(SharedPreferences prefs) {\n        return new Prefs(prefs);\n    }\n\n    @Provides @Singleton\n    PersistentData providePersistentData(SharedPreferences prefs) {\n        return new PersistentData(prefs);", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "           (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inherit", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def consultar_numero_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_s", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "           showProgress(false);\n            Toast.makeText(activity, R.string.login_failed, Toast.LENGTH_LONG).show();\n        }\n    }\n\n    public void onPostLoginExecute(Boolean success) {\n        AbstractYasmeActivity activity = (Abstract", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "   void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(ClassicBookList classicBookList);\n    void inject(ClassicPlaybackUi classicPlaybackUi);\n    void inject(ClassicNoBooksUi classicNoBooksUi);\n    void inject(Demo", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "       Assert.assertThat(ds, totalQueryCount(5));\n    }\n\n    @Test\n    public void testTotalCountWithOther() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  // select", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       self.textArea.append(self.chum.sendMessage(text, quirks))\n        self.textInput.clear()\n        self.textInput.setFocus()\n\n    def closeEvent(self, event):\n        self.parent().testquirks(False)", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "   DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     *", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "   return Pair(e1, e2, ty1)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a pair of simply typed arguments\n    into a Pair.\n    \n    Arguments:\n    - `expr`:", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "\n            except TextGridParseError as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n            except Exception as e:\n                self.return_dict[\"decode_error_files\"].append(\n                    TextParseError(f\"{file", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "   private List<SliceValue> values;\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        dao = new ExpenseManagerDAO(getActivity());\n        activeCreditCardId = Sh", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "\t\n\t/**\n\t * \n\t */\n\tprivate final DocumentGraphEditor editor;\n\n\t/**\n\t * @param editor\n\t */\n\tCommandExecutor(DocumentGraphEditor editor) {\n\t\tthis.editor = editor;\n\t}\n\n\t/**\n\t * ", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return new SelectionChunk(informationCriterion);\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.pro", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "\t@RequestMapping(value = \"/manage/index\", method = RequestMethod.GET)\n\tpublic ModelAndView index() {\n\t\tModelAndView mav = new ModelAndView(\"manage/index\");\n\t\tSubject subject = SecurityUtils.getSubject();\n\t\tif", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "       AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "   request = Mock(\n        body=b'{\"foo\": \"bar\"}',\n        content_type='application/json',\n        headers={'Content-Type': 'application/json'},\n        method='POST',\n        path_info='/foo/bar',\n        query_string='", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "   '--fq, --filter-query-language QUERY-LANGUAGE The filter query language to be '\n    'used',\n    '--filter-query QUERY-STRING When pull operations are used, filter the '\n    'instances in the result',\n    '", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "       print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android Virtual Device\"\n        refresh_avd(adb)\n    elif SETTINGS.ANDROID_DYNAMIC_ANALYZER == \"MobSF_VM\":\n        print \"\\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "                           logError(t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)) {\n                            logError(t.getMessage());\n                        } else if(exceptionClass.equals(SdkClientException.class)) {\n                            logError(", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n\nclass Instr", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "       CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n        sessionContext.setData(CACHE_LISTS, list);\n        sessionContext.setData(CACHE_LIST, list);\n      }\n   ", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected Location lastLocation;\n  protected long lastLocationUpdateTime;\n  protected double lastLocationUpdateLat;\n  protected double lastLocationUpdateLng;\n  protected boolean locationUpdateInProgress;\n  protected boolean locationUpdateInBackground;", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "# 44018, section 10.2\n# RRC message header\n#\n# 44018, section 10.3\n# RRC message body\n#\n# 44018, section 10.4\n# RRC", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "                                      join_keyword=u'\\u0926\\u093f\\u0928\\u094b\\u0902')\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "\n    @property\n    def board_num(self):\n        return self._board_num\n\n    @property\n    def expansion_num(self):\n        return self._expansion_num\n\n    @property\n    def product_name(self):\n        return ul.get", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       throw new QueryGrammarException(\"Cannot apply '\" + exp.getOperator()\n            + \"' operator on a null value.\");\n      result.append(\" IS NULL\");\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n     ", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "\n    ]\n    def __init__(self, CallName='', ReprName='', T=0, Trans=False):\n        Layer.__init__(self, CallName, ReprName, T, Trans)\n        self.Type = T\n        self.Len = 0\n", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "\t\t\t\tv_lh, faces_lh = nib.freesurfer.read_geometry(\"%s/fsaverage/surf/lh.sphere\" % os.environ[\"SUBJECTS_DIR\"])\n\t\t\t\tv_rh, faces_rh", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "\n        elif name == \"%s_BCH_BTC\" % constant.EX_HITBITC:\n            ex = Hitbtc('bchbtc')\n        elif name == \"%s_BCC_BTC\" % constant.EX_CEX:\n            ex = C", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ElGam", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "       self.key_size = read_u16le(f)\n        self.index_name = decode_utf16le(f)\n\n        for i in range(count):\n            key = read_u32le(f)\n            value = read_u3", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "                   deviceMiToken = MiPushClient.getToken(this);\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HMS\":\n                if(shouldInit()) {\n                   ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "                       TimeEntryOvertimeAggregation.class));\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregationStyle(ScreensHelper.getTimeEntryStatusStyleBg(timeEntriesTable.getItems()));\n\n        timeEntriesTable.getColumn(\"overtime\").setAggreg", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "\n        draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if draft.status == DraftStatus.DRAFT:\n            return await Utilities.error(ctx.channel, f\"Draft {draft} is", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join %(site_name)s') % {\n                'site_name': site.name\n            }\n            template = 'accounts", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "\tprivate Connector connector;\n\tprivate ConnectorIssues connectorIssues;\n\tprivate String[] issues;\n\tprivate String[] issuesNames;\n\tprivate String[] issuesKeys;\n\tprivate String[] issuesProjects;\n\tprivate String[] issuesReporters;\n\tprivate String", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\telse if (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_CLASS)) {\n\t\t\tString expanderClass = elt.getAttribute", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "   protected PageParser pageParser;\n\n    protected PageSizeHandler pageSizeHandler;\n\n    protected PageSizeHandler pageSizeHandler;\n\n    protected PageSizeHandler pageSizeHandler;\n\n    protected PageSizeHandler pageSizeHandler;\n\n    protected PageSizeHandler pageSizeHandler;\n\n", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "   helpTestIteratorNormal(10, 10);\n    helpTestIteratorParanoid(10, 10);\n    helpTestIteratorCount(10, 10);\n  }\n  \n  @Test\n  public void testData2() {\n    help", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "   private final KadConfiguration config;\n    private final int port;\n    private final int timeout;\n    private final int maxConnectAttempts;\n    private final int maxConnectAttemptsReached;\n    private final int maxConnectAttemptsReached;\n    private final int", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "       return words_api(wordnik_api, token)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "       form.setText(Messages.configurationEditorWebModulesPageTitle);\r\n        GridLayout layout = new GridLayout();\r\n        layout.numColumns = 1;\r\n        layout.marginHeight = 0;\r\n        layout.marginWidth = 0;\r\n        form.getBody().setLayout(", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       self.assertIsInstance(handle, HANDLE)\n        self.assertIsInstance(handle.handle, c_void_p)\n        self.assertEqual(handle.handle, ffi.NULL)\n        self.assertEqual(handle.handle, 0)\n        self.assertEqual", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "               tablefmt = vtablefmt.get_table_format(table_format)\n            output.append(tabulate(rows, headers, tablefmt, numalign, stralign))\n\n    if status:\n        output.append(status)\n\n    return output\n\n\ndef", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "                   Elements.ElementFilter<Element> filter = Elements.filter(roundEnv.getElementsAnnotatedWith(annotation));\n                    return filter.stream().map(element -> {\n                        currentAnnotatedElement.set(element);\n                        return parserHolder.build(", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root);\n        this.jobs = new SpringJobs(restTemplate, root, deployments, tasks);\n    }\n    ", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'perms': 'write',\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "           actionPopupGroup.add(ActionManager.getInstance().getAction(\"MongoEditor.AddKey\"));\n            actionPopupGroup.add(ActionManager.getInstance().getAction(\"MongoEditor.AddValue\"));\n            actionPopupGroup.add(ActionManager.getInstance().getAction(\"MongoEditor", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_BACK_LIGHT_CODE:\n                return new BtnBackLight();\n            case ConstantStr.FUNC_SCREEN_SHOT_CODE:\n                return new BtnScreenShot();\n           ", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('locale_id', 'lang_name',", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "       type = Type()\n        type.format = TypeFormat()\n        type.format.pretty = \"foo\"\n        type.format.advanced = \"bar\"\n\n        self.assertEqual(\"foo\", type.get_sample())\n\n    def test_type_get_sample", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "   private GuiButton addChannel;\n    private GuiButton removeChannel;\n    private GuiButton renameChannel;\n    private GuiButton reorderChannel;\n    private GuiButton reorderChannelUp;\n    private GuiButton reorderChannelDown;\n    private Gui", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif(fcp", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, StartEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "   CreditPeriod activeCreditPeriod = null;\n    List<CreditCard> creditCards = new ArrayList<>();\n    List<CreditPeriod> creditPeriods = new ArrayList<>();\n    List<DailyExpense> dailyExpenses = new ArrayList<>();\n    List<DailyExpense", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points=original_assembly_points,\n                                                  allow_cycles=args.allow_cycles,\n                                                  merge_strategy=args.c_merging_strategy,\n                                                ", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "       if bytecode[k][2] == INPLACE_ADD:\n          cond_stack_size += 1\n        elif bytecode[k][2] == INPLACE_SUBTRACT:\n          cond_stack_size += 1\n        elif bytecode[k][2", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "       chat = DatabaseManager.INSTANCE.getChatDAO().get(chatId);\r\n        if (chat == null) {\r\n            throw new ExceptionInInitializerError(\"chat == null);\r\n        }\r\n\r\n        // Restore last message on display\r\n        if (savedInstanceState !=", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "   private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * Defines the format for the time.\n     */\n    protected final TimeFormat timeFormat = TimeFormat.Format12H;\n\n    /**\n     * Defines the format for the time.\n    ", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "   }\n  }\n\n  private void parseFormResponse(String responseTxt) {\n    if (responseTxt == null) {\n      return;\n    }\n\n    String error = null;\n    Document doc = null;\n    try {\n      doc = XMLParser.", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "\n    def parse(self, ping_result: PingResult) -> PingStats:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "       GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/ther", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "               } catch (FilesNotFoundException e) {\n                    // expected\n                }\n            }\n\t\t\t\n\t\t\t// Clean up\n\t\t\tclient.deleteContainer(containerName);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "       assertThat(qe, isStatement());\n        assertThat(qe, isBatchStatement());\n        assertThat(qe, isStatementOrBatchStatement());\n        assertThat(qe, isPrepared());\n        assertThat(qe, isBatchPrepared());\n        assertThat(qe, is", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n    \n    @Override\n    public Observable<DirectorInfo> info() {\n        return info.info();\n    }\n    \n    @Override\n    public Observable<List<ReleaseSummary", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "       encoding = app_configs.get(ConfigKey.ENCODING, Default.ENCODING)\n    else:\n        encoding = encoding\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(ConfigKey.PRO", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "\n        embed = Embeds.make_embed(header=\"Clembot Configuration\", header_icon=Icons.CONFIGURATION,\n                        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "                   trackHistoryEntry = new TrackHistoryEntry(liveInfo.getTitle(), liveInfo.getArtist(), liveInfo.getAlbum(), liveInfo.getGenre(), liveInfo.getImageUrl(), liveInfo.getStreamUrl(), currentTime, currentTime, liveInfo.getBitrate", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "               // 设置结束执行时间\n                taskData.setFinishDate(new Date());\n                // 设置执行结果\n                taskData.setErrorInfo(null);\n                // 设置执行结果\n                task", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "   (signerId, keyId) -> {\n      if (signerId.equals(\"key1\")) {\n        return Lists.newArrayList(new Verifier() {\n          @Override\n          public boolean verify(String token, String signature) {\n            try {\n              KeyFactory", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case WALLPAPERS:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case ABOUT:\r\n", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       return None\n\n    def _getPlaylistItem(self, item):\n        \"\"\" Match an item to a playlist item and return the item. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "\n    if gopts.pager:\n      pager = RunPager(cmd)\n      result = pager.Run(argv)\n    else:\n      result = cmd.Run(argv)\n\n    if gopts.trace:\n      git_trace2_event_log", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "           state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "@OptionsItem(R.id.menu_add_project)\npublic void menuAddProject() {\n    Intent intent = new Intent(Intent.ACTION_INSERT);\n    intent.setData(RavelryContentProvider.CONTENT_URI);\n    intent.setType(Ravelry", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "       request = Entry.create(\"http://example.com/\")\n        response = StaticResponse(200, \"OK\")\n        result = Result()\n        result.soft404 = True\n        result.soft404_response = response\n        entry = Entry(request", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "\n        self.__device = device\n        self.__ifb_device = None\n        self.__ip_version = ip_version\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__is_parse_filter_id = is_", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           self.link.send_message(\"parameters\", [self.params])\n        except UncertainTimeError:\n            log.error(\"We couldn't find a good estimate of the clock error.  Switzerland isn't going to work!\")\n            sys.exit(1)\n\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, u\"a\", u\"b\")\n\n    def test_type_check_for_environment_value(self):\n        self.assertRaises(TypeError, _environment_to_string, u\"a", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": " public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "       DataNodePrinter printer = null;\r\n        TransactionLog transactionLog = null;\r\n        TransactionLogFileList transactionLogFileList = null;\r\n        TransactionLogReaderFactory transactionLogReaderFactory = null;\r\n        DataState dataState = null;\r\n        DataDirHelper dataDirHelper = null;\r", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "       //用户的密码\n        stuPassword = password;\n        //用户的学院\n        stuXN = split[2];\n        //用户的专业\n        stuZY = split[3];\n        //用户的班级\n        st", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n\t\tmapView.setStreetView(true);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "       MovieCursor movieCursorById = new MovieCursor(mContext.getContentResolver().query(MovieColumns.CONTENT_URI,null,where.sel(),where.args(),null));\n        DataTestUtilities.validateMovieCursor(\"query by id using library's syntax\", movieCursorById", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       self.assertEqual(node_children(self.elem), [self.elem.text, self.elem.tail])\n        self.assertEqual(node_children(self.elem.text), [])\n        self.assertEqual(node_children(self.elem.tail), [])\n       ", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t}\n\n\t/**\n\t * Method representing the Clean ant target : Cleaning the current\n\t * questionnaireFolder (with the created survey name) Cleaning the temp folder\n\t", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def enviar_dados_venda(self, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mush", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_selectOutput", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "   private static final String TAG_EXTRA_PERIOD_ID = \"tagExtraPeriodId\";\n    public static final String TAG_EXTRA_CURRENCY = \"tagExtraCurrency\";\n\n    // Intent request code to handle updating play services if needed.\n    private static", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "   sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    for sample_condition_dicts in sample_condition_dicts:\n        sample_condition_dicts = sample_condition_dicts[0]", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "\n    def get_word_counts(self) -> Dict[str, int]:\n        \"\"\"\n        Calculate the word counts across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, int]\n            Dictionary of words and their counts\n        \"\"\"", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "               if(output == null) {\n                    Toast.makeText(CameraActivity.this, \"No image to crop\", Toast.LENGTH_SHORT).show();\n                    return;\n                }\n                if(CROP_ASPECT_RATIO == -", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tprivate Util() { }\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "\t\t// https://github.com/vertx-community/vertx-ui/blob/master/src/main/java/live/connector/vertxui/samples/client/todomvc/client/todomvc.js#L10\n\t\t// https", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "   api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_condition\",\n                     resource_class_args", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "           '/properties':                  RestAppPropertys,\n        }\n        \n        # Register the resources\n        for path, resource in self.resources.items():\n            self.api.add_resource(resource, path)\n\n    def get_app(self, appeui):\n", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "\n    private void initFastScroller() {\n        mFastScroller = new FastScroller(getActivity(), mRecyclerView);\n        mFastScroller.setShowBubble(mShowScrollerBubble);\n        mFastScroller.setOnFastScrollerListener(", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "           GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        dataset.add(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivityName)", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "       return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private void installActions() {\n        ActionManager actionManager = ActionManager.getInstance();\n        actionManager.registerAction(new AddServerConfigurationAction(project, mongoManager, notifier), DefaultAction", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "       void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface ItemClickListener {\n        /**\n         * Triggered when an item was clicked\n         *\n         * @param item\n         *           ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._settings_ini = settings_ini\n        self._tree_view = tree_view\n        self._project_settings_dialog = ProjectSettingsDialog(settings_ini=settings_ini,\n                                                              project_directory=directory,\n                                                              log_directory=os", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "   private final static GuiNewChatTC CHAT = new GuiNewChatTC(Minecraft.getMinecraft(), ChatManager.getInstance());\n    private final static Map<Channel, GuiComponent> CHANNELS = Maps.newHashMap();\n    private final static Map<", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "   search = Search(engine=engine, model=model, index=index, key=key, filter=None, projection=\"all\")\n    search.mode = \"query\"\n    search.prepare()\n    assert search.key == key\n    assert search.filter is None\n    assert search", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tLOGGER.info(\"Creating new pipeline...done\");\n\t\treturn new GenerationService(preprocessors, postprocessors);\n\t}\n\t\n\tprivate Preprocessor[] setPre", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, passwd):\n        self._pass = passwd\n        return self\n\n", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "   group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet reordering", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isConnectedToAudiologist;\n    // Guarded by _lockObject.\n    private boolean _isConnectedToRelay;\n    // Guarded by _lockObject.\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));\n\n    // Extract the policies from the projects.\n    PCollection<KV<GCPResource, KV<StateSource, G", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                           dim, vocab, lookup,\n                                                           cache=self._cache)\n            else:\n                raise NotImplementedError()", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "           client.getBaseClient().send(new Packet(PacketType.NOOP), Transport.POLLING);\n            break;\n        }\n\n        case JOIN: {\n            String room = packet.getData();\n            if (room == null) {\n                room = \"\";", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.getColor());\n        descriptor.setDensity(fog.getDensity());\n        descriptor.setStart(fog.get", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "   private int videoDuration;\n    private int videoQuality;\n    private int videoCount;\n    private int videoCountLimit;\n    private int videoCountLimitForCamera;\n    private int videoCountLimitForGallery;\n    private int videoCountLimitForCameraForGallery;\n", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "           form.fields['perfil'].queryset = Perfil.objects.filter(\n                pk__in=self.request.user.perfil.zonas_permitidas.all())\n        return render(request, self.template_name, {\n            'form': form", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "       expiry = Column(Timestamp)\n        old = Column(Timestamp)\n        new = Column(Timestamp)\n        old_index = GlobalSecondaryIndex(hash_key=\"old\", projection=\"all\")\n        new_index = GlobalSecondaryIndex(hash_key=\"new\", projection", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "   ci_pipeline_manager = CIPipelineManager()\n    ci_platform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    pipeline_config_manager", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "\t\t} catch (final SocketViewException e) {\n\t\t\tthrow e;\n\t\t} catch (final Exception e) {\n\t\t\tthrow new SocketViewException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark.\n", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": " private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "     return\n    self._cstr = TreeNode(kind=Expr.COMPARATOR, data=root.data[1])\n    worklist = [root]\n    while worklist:\n      cur = worklist.pop(0)\n      logger.debug(\"Cur := %s\",", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Building a wrapper from the given city: \" + city.getName()\n\t\t\t\t\t\t\t+ \", endpoint type: \" + endpointType + \", api key: \"\n\t\t\t\t\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "   ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plus(ActorDetailsModule actorDetailsModule);\n}\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tif model_item.data.type == GeometryType.Sketch:\n\t\t\t\treturn default_flags | Qt.ItemIsEditable\n\t\t\telif model_item.data.type == GeometryType.Part:\n\t\t\t\treturn default_flags |", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "\n        else:\n            result = decimal_to_string(value, fmt_token, fmt_modifier)\n\n    return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "       if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue cread", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn Minigame.getMinigameInstance(plugin).getRound(round.toLowerCase()).addPlayer(this);\n\t}\n\n\t/**\n\t * Removes this {@link MGPlayer} from the given {@link Round round}.\n\t *\n\t * @param round the", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "       hasJsonPath(\"hits.total\", equalTo(records.size())));\n\n        String query2 = \"http://localhost:9200/\" + mapping.getIndex() + \"/\" + mapping.getType()\n                + \"/_search?q=*&size=1", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": " to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1, 1))\n  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "       array.items = [object1, object2, object3]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, array)\n        response = Hydrator(version2, versions, []).hydrate_object", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "   url(r'^users/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/(?P<user_id>[-\\w]+)/edit/$", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                       res = getResults(context);\n                    } catch (SQLException e) {\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>get(ContextKeys.THROWABLES).add(e);\n                        context.", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "\n        //TODO: C,  for multi test we really need to have it writing to multiple ring buffers.\n        byte[] dataBytes = buildRawData(clientConfig, dataSource);\n\n        //TODO: C,  for multi test we really need to have it writing to multiple ring", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "       self._pub = self._pkalg.publen()\n\n    @sdproperty\n    def pklen(self):\n        return self._pklen\n\n    @pklen.register(int)\n    def pklen_int(self, val):\n        self._pk", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "       f = derivative.XDA(d1, d2)\n        beta = derivative.XDA(d1, d3)\n        i, j = self._find_preimage(f, beta)\n        assert i is not None and j is not None\n        assert f.eval", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "       obj.updateBuffImg()\n        obj.updateBlockWidget()\n        obj.updateBlockLabel()\n        obj.updateComment()\n        obj.updateSocketTags()\n        obj.updateCollapseLabel()\n        obj.updateBlockShape()\n        obj.updateBlockImageMap()", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter.getInstance();\n\t}\n\n\t/**\n\t * Registers the request services that will be used to make the request to\n\t * the service\n\t */\n", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                           startMixedActivity();\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"PlaySessionSettingsDialogFragment\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t\tpublic abstract Node transformMultiConstant(MultiConstantNode node, List<Set<Character>> newCharacterOptions, List<Set<Character>> newCharacterChecks);\n\t}", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "       SASLMechanism.Challenge challenge = new SASLMechanism.Challenge(\n                challengeData);\n        connection.getSASLMechanism().processChallenge(challenge);\n    }\n\n    private void parseSuccess(Element", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "   DropDownMenu dropDownMenu;\n    private CookBookAdapter adapter;\n    private List<SearchBean> mList;\n    private int page = 1;\n    private int pageSize = 10;\n    private int totalPage = 1;\n    private int totalCount =", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "           mSongListAdapter.notifyDataSetChanged();\n        }\n    };\n\n    private AlbumEditorDialog.OnAlbumEditionSuccessListener mOnAlbumEditionSuccessListener = new AlbumEditorDialog.OnAlbumEditionSuccessListener() {\n        @Override\n        public void on", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "   private AdapterWithHeader mAdapter;\n    private FastScroller mFastScroller;\n    private Toolbar mToolbar;\n    private Menu mMenu;\n    private MenuItem mSortMenuItem;\n    private MenuItem mSortOrderMenuItem;\n    private MenuItem mSortOrderMenuItem2", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "       Bit('C', ReprName='Command', Pt=4, BitLen=4, Dict=RequestType_dict,\n            Repr='hum'),\n        Bit('Cause', ReprName='Cause', Pt=8, BitLen=4, Dict=ES", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Add the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm.registerEvents(playerListener, this);\n\t\tpm.registerEvents(blockListener, this);\n\t\t\n", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "   @Override public void visit(LogMessage message) {\n      if (message instanceof CaliperEvent) {\n        CaliperEvent event = (CaliperEvent) message;\n        if (event.eventType() == CaliperEvent.EventType.VM_OPTIONS) {\n          vm", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "\n    def _load_corpus_from_source(self) -> None:\n        \"\"\"\n        Load a corpus without using multiprocessing\n        \"\"\"\n        begin_time = time.time()\n        sanitize_function = None\n        if hasattr(self, \"san", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "   Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "           effect.setFlowAbsEffect(mSpectaculumView.getFlowAbsEffect());\n        }\n        if(effect instanceof ImmersiveEffect) {\n            mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mSpectaculumView);\n            mImmersive", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "   @Override\n    protected void loadData(int page) {\n        if (searchCriteria.isEmpty()) {\n            return;\n        }\n        SearchPatternsRequest request = new SearchPatternsRequest(application, prefs, searchCriteria, page, pageSize);\n        request.requestToken", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   erb(freq, bandwidth)\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 132.639),\n      (3000, 348.517),\n     ])\n  def test", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   try {\n      CoordinatesWalker walker = new BaseCoordinatesWalker(document) {\n        @Override\n        protected void onParagraph(ParagraphCoordinates paragraphCoordinates) {\n          runProcessorsForParagraph(paragraphCoordinates, proxyBuilder);\n        }\n\n", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   def flags_int(self, val):\n        self._flags = val\n\n    @flags.register(NotationDataFlags)\n    def flags_notationdataflags(self, val):\n        self._flags = val\n\n    @flags.register(bytearray)\n    def", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "\n\ndef check_args(args, fn_type, env):\n    fn_type, norm_args, norm_args_pos = match_fn(fn_type, args)\n    args = restore_args(fn_type, args, norm_args, norm_args_pos", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "def read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset=0):\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset=0):\ndef read", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   @GET(\"suggest\")\n    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                     @Query(\"q\") String query);\n\n    /**\n     * Returns the set of gifs uploaded by the current user\n    ", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "   # TODO: add aicc_feature_factors to the database\n    # TODO: add aicc_feature_factors to the database\n    # TODO: add aicc_feature_factors to the database\n    # TODO: add aicc_feature_factors to the database\n", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type == ", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "       self.textInput.setText(\"\")\n        self.textInput.setFocus()\n\n    def addMessage(self, lm, chumopen):\n        if chumopen:\n            self.chumopen = False\n            self.chum = self.mainwindow.profile", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "\n    def __init__(self, graph, *entities):\n        self.graph = graph\n        self.entities = entities\n\n        self.query_clause = self.build_query_clause()\n        self.query_clause_len = len(self.query_cl", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "       return Stream(model=model, engine=self, position=position)\n\n    def transaction(self, mode, *objs, condition=None, sync=None):\n        \"\"\"Create a :class:`~bloop.transactions.Transaction`.\n\n        :param mode: \"read", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t\n", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "\n    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (controller == null || componentController == null || fsmPlayer == null || adMedia == null)", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "\n    @scoped_subgraph\n    def decoder(self) -> StandardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the shifted encoder input sequences as input, and is initialized with the hidden\n        representation of the input sequences", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "   @Override\n    public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node)", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\n        self.log.info(\"confusion matrix:\")\n        ConfusionMatrixFormatter().format(confusion_matrix,\n                                         label_map=data_set.label_map,\n                                         filename_map=data_set.filename_map)\n\n        if parsed", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "       final int numberOfRows = benchRes.getResults().size();\n        final String[][] data = new String[numberOfRows][numberOfColumns];\n        final String[] header = new String[numberOfColumns];\n        final String[][][] dataPerClass = new String[numberOf", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nall_product_slugs = []\nfor product in Product.objects.all():\n    all_product_slugs.append(product.product_slug)\n", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "           H += dot(crossmat(c - p), m * H_trans) + dot(I, H_rot)\n            H += dot(crosstens(H_trans), m * crosstens(J_rot))\n            H += dot(crosstens(", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_POWER_LEVELS.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room power levels.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleve(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.releves_date.Get", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "     for edge in visitor.edges:\n        if edge.kind == ControlFlow.E_LOOP:\n          return edge.data.loop\n      return None\n\n    def get_loop_target(node):\n      class BwdEdges(EdgeVisitor):\n        def __init__(", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "     return Const.fromName(arg)\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg)\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg)\n    elif op == LOAD_GLOBAL:\n      return Ref.", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "       View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n            name.setText(queuedProjectResult.getName());\n            author.setText(queuedProjectResult.getAuthor());\n            gauge_description.setText(", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "           _log.info('Initializing a %s prior for the parameters.', prior.name)\n        else:\n            raise ValueError('Prior must be a dict or PriorSpec.')\n        if isinstance(prior, dict):\n            prior = PriorSpec(**prior)\n        prior", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\t\n\tprivate NoopPostprocessor noopPostprocessor = new NoopPostprocessor();\n\t", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, String rootName) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass, rootName);\n\t}\n\t\n\tpublic SQLQuery getRootQuery() {\n\t\treturn rootQuery;\n\t}\n", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "\tprivate final Physics physics;\n\tprivate final FringeLayer fringe;\n\tprivate final PingPongEq pingpong;\n\tprivate final Config config;\n\tprivate final Controllers controllers;\n\tprivate final SpriteBatch batch;\n\tprivate final EntityParser parser;", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "\tpublic List<AuthorWithBooks> findAll() {\n\t\treturn authorRepository.findAll().stream().map(author -> {\n\t\t\tAuthorWithBooks authorWithBooks = new AuthorWithBooks();\n\t\t\tauthorWithBooks.setAuthor(author);\n", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "               new RefreshCommand(),\n                new MigrateCommand());\n        logger.info(\"EconomyLite \" + PluginInfo.VERSION + \" is initialized!\");\n    }\n\n    private void initializeCurrencies() {\n        currencyManager.load();\n        currencyManager.", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, queryType(QueryType.SELECT));\n        // end::prepared", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "       install_and_run(adb, app_info)\n        \n        # 自动化测试\n        auto_app_test(adb, app_info)\n        \n        # 下载日志\n        download_logs_thread(adb, download_dir", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n                Keyword('baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_record_def():\n    inc_", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview = new TempSensorView", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) {\n\t\tFacet", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer);\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer);\r\n\t\tregisterRenderer(Boolean.class, new DefaultBooleanRenderer);\r\n\t\tregisterRenderer(Character.class, new DefaultCharacterRenderer);\r\n\t\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "   Genotype parseGenotype(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genotypes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genotypes\n     */\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               # Compute the pointing direction and magnitude corrected for vignetting and extinction\n                #   for the mean location\n                #   (the pointing direction is the same for all pixels in the segment)\n                #   (the magnitude is the same for all pixels in the segment", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   account = account_for_vimeo_id(access_token_data['user_id'])\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name = ''.join(choice(string", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "   url(r'^(?P<pipeline_id>[0-9a-f-]+)/$', PipelineDetailView.as_view(), name=\"pipeline-detail\"),\n    url(r'^(?P<pipeline_id>[0-9a-f-", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                           return new NotFoundException(cause);\n                        case 405:\n                            return new APIIncorrectException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                } else {\n                    return new", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "       self.runner.add(ContentSimhashSampling(), with_child=True)\n        self.runner.add(ContentSignature(), with_child=True)\n        self.runner.add(self.rule, with_child=True)\n        self.runner.add(Reject", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "       self.assertListEqual(list(etree_iter_paths(root)),\n                             ['/a/b1/c1', '/a/b1/c2', '/a/b1/c3', '/a/b1/c3',\n                              '/a/", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "   grid = _gen_grid(data, options)\n    # Generate likelihood for each parameter combination\n    likelihood = _grid_likelihood(data, grid, options)\n    # Apply priors to likelihood\n    posterior = _apply_priors(grid, likelihood, options)\n    #", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "\n    @Override\n    public void onClick(View view) {\n        int id = view.getId();\n        int position = getAdapterPosition();\n        if (id == R.id.card) {\n            if (sIsClickable) {\n                sIsClickable = false", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           EtsiResponse resp = this.client.sendRequest(req);\n            if (resp.getStatus() == null) {\n                System.out.println(\"Failed to get status from MSSP.\");\n                this.client.shutdown();\n                return;\n           ", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "   cfe = CFeCancelamento(\n            chCanc=_opcao('--ch-canc'),\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "           Board.this.rollDices();\n          }\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth() - rollBtn.getWidth()) / 2);\n    rollBtn.setY(getY() + (boardbg.", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "           request[table_name] = {\n                \"Key\": key,\n                \"ConsistentRead\": consistent,\n                \"ReturnValues\": \"ALL_OLD\"\n            }\n            object_index[obj] = request[table_name]\n            table_index[table", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "       DeviceInfo deviceInfo = AndroidDeviceDetailsInfo.Companion.getDeviceInfo();\n        userFeedback.setDeviceInfo(deviceInfo);\n        userFeedback.setPackageInfo(packageInfo);\n\n        feedbackView.showLoading();\n        feedbackView.setFeedbackButtonEnabled", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 13", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a relative.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a relative\n     */", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "       xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"/\" />'\n        self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), '/')\n        document =", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "   def ativar_sat(self, chave_ativacao):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.ativar_sat`.\n\n        :return: Uma resposta SAT especializada em ``", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "\tprivate List<Game> games;\n\tprivate List<PlayerOverview> players;\n\tprivate List<TeamLeaders> teamLeaders;\n\tprivate List<TeamLeadersResponse> teamLeadersResponse;\n\tprivate List<TeamRosterResponse> teamRosterResponse;\n\t", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "               art = draw_art(fingerprint)\n                print(art)\n            print('{0} {1} {2}'.format(fingerprint, description, created_at))\n\n    async def list_vaults(self, with_art=False):", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "   private final Vms vms;\n    private final Tasks tasks;\n    private final Jobs jobs;\n    private final Errands errands;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "   private final OAuth2Requester requester;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "       DATA[looptest], 1.0E-6, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), Next line of", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "   @Subscribe\n    public void onClick(GuiMouseEvent event) {\n        if (event.getType() == MouseEvent.CLICK && event.getButton() == 0) {\n            if (isHovered()) {\n                channel.openSettings();\n            }\n       ", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "           self.logger.error(\n                f\"Error initializing training for {self.identifier}: {e}\"\n            )\n            raise\n        self.logger.info(\n            f\"Training initialized for {self.identifier} in {time.time() - begin:.2f", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   public void sendMessage(String text)\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.CONNECTED)\n            {\n                throw new IllegalStateException(\"Fitting session is not connected. Wait for CONNE", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "   private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null\");\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList nodeList = element.getElementsByTagName", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": " public void init(MutableConfig config) {\n    config.set(\"packager.modules\", rawValues(config, ModuleFinder::findAll));\n    config.set(\"packager.modules.list\", action(\"packager.modules\", config, ModuleFinder::findAll));\n    config", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {Next line of code:\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "           VotingModule.class\n    };\n\n\n    /**\n     * Map of module classes to their instances\n     */\n    private static HashMap<Class, Module> modules = new HashMap<Class, Module>();\n\n\n    /**\n     * Loads all modules\n     * @param plugin", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "\t\t\tnew APP14Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tnew DQTSegment(aJPEG).encode(aOutput).log(aLog);\n\n\t\tnew SOSSegment(a", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "   public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize handle the number of concurrent.\n     * @return {@link DownloadQueue}.\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "                       ExeSQL(sql)\n                        #print('update status sql: ',sql)\n\n                        # update last_update_time\n                        clause = 'sid = {}'.format(S['sid'])\n                        sql = getUpdateSQL('last_update_time', time", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "   private static final DateTimeFormatter SUMMARY_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\n    private static final DateTimeFormatter SUMMARY_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\n    private static final DateTimeFormatter SUMMARY", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "       LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key))\n            properties.addLore(key);\n\n        PacketSyncLore.updateLore((EntityPlayerMP) entityPlayer);\n\n        entity", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "\n    def test_hosts_container(self):\n        \"\"\"\n        Test the HostsContainer class.\n        \"\"\"\n        hosts = HostsContainer(\n            {\n                'h1': {LocalHost1},\n                'h2': {LocalHost2},\n              ", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           left_foot_task = DOFTask(\n                self.robot, self.robot.left_foot, self.swing_foot.pose,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "           if (sl == null) {\n                logger.severe(\"Keine Sammellastschrift ausgewählt.\");\n                return;\n            }\n\n            if (type == HibiscusExportType.SAMMEL) {\n                exportSammellast", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if search_mode == ChSearchMode.FirstCh:\n        problem.set_search_mode(ChSearchMode.FirstCh)\n    elif search_mode == ChSearchMode.Optimal:\n", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "   private MonthGridCallback monthGridCallback;\n\n    private OnMonthChangeListener onMonthChangeListener;\n    private OnDayChangeListener onDayChangeListener;\n    private DisplayEventCallback<Calendar> displayEventCallback;\n\n    private ScrollManager scrollManager;\n\n    private Handler month", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "\n\ndef generate_pronunciations_arguments(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: Dict[str, str],\n    word_boundary_paths: Dict[str, str],\n    ali", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "\tprivate static final Logger logger = Logger.getLogger(Util.class);\n\t\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\t\n\tpublic static Logger getLogger() {\n\t\treturn logger;\n\t}\n\t\n\tpublic static CloudUtil", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   public List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        List<Expense> expenses = new ArrayList<>();\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n\n        Cursor cursor =  db.query(ExpenseManagerContract", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, CalcSheetAnalysis):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "   FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInX(FlipInXaxis.class),\n    FlipInY(", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "           if command.startswith(\"tc\"):\n                return command\n\n        return self.__tc_command_output.get_command_history(\n            filter_func=tc_command_filter,\n        )\n\n    def get_tc_command_output(self):\n       ", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "       auth_data=None,\n        no_prompt=False,\n        no_verify=False,\n        no_login=False,\n        no_logout=False,\n        no_refresh=False,\n        no_throttle=False,\n        no_th", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME: False,", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\n    my_stream = white_noise(", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "       data.setOperation(DrumOperation.UPDATE);\n        return data;\n    }\n\n    @Test\n    void testAppendUpdate2() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleDataStoreImpl<>(this.testDir + \"/", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "               isinstance(t2, RecordMeta)\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            elif (\n                backref and is", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "\n    self._varz.message_bytes_sent(buf.tell())\n    self._varz.messages_sent()\n    self.next_sink.AsyncProcessRequest(sink_stack, msg, buf, headers)\n\n  def AsyncProcessResponse(self, sink", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "     f = freq2lag(v)\n      l = lag2freq(f)\n      assert almost_eq(v, l, 1e-10)\n\n  def test_freq_lag_converters_are_inverses_with_complex_numbers", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           // Successful creation of chat\n            // Notify the fragment that the chat was created\n            ObservableRegistry.getObservable(classToNotify).notifyFragment(new CreateChatTask.ChatRegisteredParam(success, newChatId));\n        } else {\n            // Something went wrong\n           ", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       // https://github.com/olivergondza/dumpling/issues/10\n        assertThat(out.toString(), startsWith(\"remotely-observed-thread\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithTimeout", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new RoxanaPropertiesMockBuilder()\n                .withLocale(Locale.CANADA)\n                .withResponseStrategy(ResponseStrategy.FULL)\n                .withSuppressFails(false)\n                .build();\n    }\n\n    private ResponseProcessorManager get", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "\n    self.mgmt = management.Management(self)\n\n    self.mgmt_clusters = management.MgmtClusters(self)\n\n    self.mgmt_flavors = management.MgmtFlavors(self)\n\n    self.mgmt", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "       welcomeString.setText(Utils.getUserName(getActivity()));\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(MENU_ID_IMAGE1, R.drawable.", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "   self._last_ping_start = time.time()\n    self._ping_ar = AsyncResult.Run(self._PingTimeout)\n    self._socket.write(self._ping_msg)\n\n  def _PingTimeout(self):\n    \"\"\"Checks if the", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "   self.bot.loop.create_task(self.bot.dbi.table('global_config').create_index('config_key'))\n\n\n    @commands.Cog.listener()\n    async def on_ready(self):\n        await self.bot.wait_until", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.build", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "   public int readSmallIntValue(int d1) throws IOException {\n\t\tint d2 = in.read1();\n\t\tint d3 = in.read1();\n\t\tint d4 = in.read1();\n\t\tint d5 = in.read1();\n", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "   return operator.eq(*operands) if self.symbol == 'eq' else operator.ne(*operands)\n    return operator.lt(*operands) if self.symbol == 'lt' else operator.gt(*operands)\n    return operator.le(*operands) if self.", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        LOG.info(\"response: {}\", JSON.toJSONString(response));\n        Assert.assertTrue(response.isBizSuccess());\n    }\n\n    /**\n     * 扫码支付下单", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "\t\t\tString basePath = \"src/test/resources/ddi-to-xforms\";\n\t\t\tString ddiPath = basePath + \"/ddi.xml\";\n\t\t\tString xformsPath = basePath + \"/xforms.xml\";\n\t\t\tString x", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "           self._probe = probe\n        else:\n            self._probe = _load_probe(**kwargs)\n        # Load the probe adjacency list.\n        self._adjacency_list = _probe_adjacency_list(self._probe)\n        # Load the channels", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "       MessageTranslated messageTranslated = creator.create(KEY,\n                new MessageMapperEnum() {\n                    @Override\n                    public String name() {\n                        return \"messageMapperEnum\";\n                    }\n                },\n                new MessageMapper() {\n", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "           MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n        for parser_class in parser_class_list:\n            if parser_class._is_support_ping_format(ping_lines):\n                self.__parser = parser_class(", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e\", replace_blank_name(name=u\"\\u0906\\u092a\\u0915\\u093e", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "\n  public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (inExp.getValues() == null)\n      throw new QueryGrammarException(\"Cannot apply IN with null values\");\n\n    result.append", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "       m.videoSetFrameRate.setText(\"\" + 1);\r\n        m.videoSetFrameRate.setForeground(Color.red);\r\n        m.videoSetFrameRate.setBackground(Color.white);\r\n        m.videoSetFrameRate.setCaretColor(Color.", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def compute_conditions(self):\n    \"\"\"\n      Computes the conditions associated with each ``N_CONDITION`` node\n      in the CFG.\n    \"\"\"\n    self._conds", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def configurar_interface_de_rede(self, configuracao, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "\tpublic void acceptString(final FixTag tag, final CharSequence value) {\n\t\tfinal Validity validity = isValid(tag);\n\t\tif (validity == Validity.INVALID) {\n\t\t\tthrow new InvalidValueException(tag, value);\n\t\t}\n", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "       ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getInstance().remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "           self.RNG.randint(0, 2 ** 31 - 1),\n            self.RNG.randint(0, 2 ** 31 - 1),\n        )\n\n        # Test that the draws are independent\n        self.assertNotEqual(", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       // Load modules\n        loadModules();\n        // Load commands\n        loadCommands();\n        // Load EconomyLite\n        loadEconomyLite();\n        // Load EconomyLite\n        loadEconomyLite();\n        // Load EconomyLite\n        loadEconomyLite();", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "\n        # Make sure we're looking at models\n        validate_not_abstract(*walk_subclasses(model))\n\n        # Make sure the model is not abstract\n        validate_not_abstract(model)\n\n        # Make sure the model is not abstract\n        validate_not_", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState.class);", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "                       expectLastCall().andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "\n    ['Verify instance command references --no, returns paths, explicit ns',\n     ['references', 'TST_Person.name=\"Mike\"', '--no', '-n', 'root/cimv2'],\n     {'stdout': ['\"root/cimv2:T", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], 3)", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "       #if self.dbg >= DBG:\n        #    log(DBG, '(RestOctets.map) remaining bits: %s' % rem)\n        #\n        # if we have enough bits to map the rest\n        if rem >= self.bit_len():\n            #", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "   with pytest.raises(InvalidModel):\n        engine.bind(String)\n\n\ndef test_bind_model(engine):\n    \"\"\"Can bind models\"\"\"\n    engine.bind(User)\n\n\ndef test_bind_model_with_index(engine):\n   ", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending terms to be displayed as gif categories,\n     * which when clicked will perform a gif search of that term\n    ", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "   u7 = Unit(\"Msun/pc**3\")\n    assert u7.dimensions == energy\n    assert u7.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u8 = Unit(\"Msun/pc**3\")\n    assert", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<Img", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       if index == -1:\n            if name is None:\n                raise ValueError(\"Cannot retrieve all tags with index -1\")\n            else:\n                index = self._get_tag_index(name)\n        tag = TAG(self._sptr, \"Sound\")\n", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "\n    def segment_vad(\n        self,\n        vad_path: str,\n        segmentation_options: MetaDict,\n        num_processes: int = 1,\n        progress_bar: bool = True,\n    ):\n        \"\"\"\n        Segment utter", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "           vote_obj = VotePost.objects.filter(user=request.user, post=post).first()\n            if vote_obj:\n                vote_obj.value = vote_obj.value * -1\n                vote_obj.save()\n                post.up", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "                   public void startNewOrderActivity(Account account) {\n                        startActivityForResult(OrderEditController.newIntent(MainActivity.this, account), NEW_ORDER_RESULT);\n                    }\n\n                    @Override\n                    public void startNewAccountActivity() {\n                ", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "   column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \"#n0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\n        \"#n0\": \"d_age\",", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            comments = form.cleaned_data['comments']\n\n            # Log moderation event\n            log_moderator_event(msg_type=ModerationLogMsg.REPORT", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "       for (PlaySession playSession : stack.getPlaySessionList()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "           Platform.runLater(new Runnable() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tAlert alert = new Alert(AlertType.INFORMATION, \"Error adding to queue:\\n\" + e.getD", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "           if (mWifiStateListener != null) {\n                mWifiStateListener.isSuccess(false);\n            }\n            of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::error);\n            wifiLog(\"ERROR CONNECTING: \" + connectionErrorCode);", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "               section.end_of_message = True\n            )\n\n        # TODO: This is a hack to fix the length of the message\n        # The length of the message is calculated by the number of bytes\n        # written to the bitwriter. However, the length of the message\n       ", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "   private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Jobs jobs;\n    private final Errands errands;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "   String className = adapterName(type.getQualifiedName().toString());\n    String superclassName = \"dagger.internal.Binding\";\n    String superclassNameWithSuffix = \"dagger.internal.Binding\" + INJECT_ADAPTER_SUFFIX;\n    String superclassNameWithStaticIn", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/record.php\"), BEEP(true), SEND_TONES(true), EXIT_TONE(\"beep\"));\n\t\ttropo.hangup();\n\t\t\n\t\ttropo", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "       if index == -1:\n            self._call_fmod(\"FMOD_Sound_GetTag\", byref(tag), name, 0)\n        else:\n            self._call_fmod(\"FMOD_Sound_GetTag\", byref(tag), index, name)", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "   public void listenToException(final AbstractPerfidixMethodException exec) {\n        if (exec instanceof PerfidixMethodInvocationException) {\n            final PerfidixMethodInvocationException myExec = (PerfidixMethodInvocationException) exec;\n            final Method", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "\n    def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def dropnan(self):\n        \"\"\"Drop all the empty values\"\"\"\n        dropnan_table(self)\n\n", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "\t\t\t\t\tappEvent.post(AppEvent.EXIT);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// initialize the drive\n\t\t\tclient = new Drive.Builder(httpTransport, JSON_FACTORY, clientSecrets)\n\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "       // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tfinalize(1);\n        }\n        // Checking PhyML binary\n        if (!PhyMLv3Amin", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\t\tpublic void onResult(int code, Object obj) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(ProgramTrack.class);\n\t\t\t\t\tadapter.setPageCl", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "               DatePicker datePicker = new DatePicker(this, new DatePicker.OnDatePickListener() {\n                    @Override\n                    public void onDatePicked(LunarCalendar calendar) {\n                        mTimeText.setText(calendar.toRecordTime());\n                       ", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "   if is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\n    elif is_element_node(elem):\n        if elem.tag == XML_NAMESPACE:\n            return", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    AdInterface adInterface;\n\n    @Mock\n    PlayerUIController controller;\n\n    @Mock\n    PlayerAdLogicController componentController;\n\n    @Mock\n    CuePointsRet", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n       \n         * 打开/关闭通知栏消息\r\n         * @param enable 打开/关闭\r\n         /******/\n        public static void enableReceiveNormal", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.d", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\n\ndef test_parameters_msgtype3():\n  '''\n  Zero", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.USER_INFO_REQUEST)\n            {\n                UserInfoRequestMessage m = (", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\n    if with_options:\n        self.extend([\r\n            Str('IMSI', Pt=ID(), Len=1, Dict=IANA_dict()),\r\n            ])\r\n    else:\r\n        self.extend([\r\n            Str('IMSI', Pt", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.tracerouter = Tracerouter.Tracerouter(self)\n        self.time_manager = TimeManager.TimeManager(self)\n        self.parent = self\n        self.quit_event.set()\n        self.quit_event.clear()\n       ", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "\t\t\tEXOG.append(dmy_leftvar)\n\n\t\t\tTvalues_A = glm_cosinor(data,\n\t\t\t\tEXOG,\n\t\t\t\ttime_var,\n\t\t\t\tperiod,\n\t\t\t\tdmy", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0)", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=parameters, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_thermochemical", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager mViewPager;\n    private TabLayout mTabLayout;\n    private CheckBox mCheckBox;\n    private CheckBox mCheckBox2;\n    private CheckBox m", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    def get_resource(self, resource_type, resource_id):\n        if resource_type == \"account\":\n            return self", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "   def validation_error(exc_type):\n        def decorator(func):\n            @wraps(func)\n            def wrapper(*args, **kwargs):\n                try:\n                    return func(*args, **kwargs)\n                except exc_type as e:\n                ", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
{"pred": "   // TODO(jontayler): figure out why we need to do this here.\n    updateViewDirectionMode(model, sharedPreferences));\n    activityLightLevelManager = new ActivityLightLevelManager(activityLightLevelChanger);\n    activityLightLevelManager.setNightMode(nightMode", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_device(self, device):\n        if typepy.is_null_string(", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
