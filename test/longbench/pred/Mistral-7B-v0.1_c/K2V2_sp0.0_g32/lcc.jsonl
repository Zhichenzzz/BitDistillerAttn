{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\t\n\t\t\tgraph = self.graph.copy()\n\t\t\tself._init(graph, Y_, Z_)\n\t\t\te, d = self.next(", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "\t\t\t\tParticipant p = (Participant)m_Participants[i];\n\t\t\t\tforeach ( Gump g in p.Gumps )\n\t\t\t\t{\n\t\t\t\t\tif ( g is DuelContextGump )\n\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "       # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames,", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "       for a in self.answers:\n            ret += a + \"\\n\"\n        return ret\nclass _AnagramData(_QAData):\n    def ask_string(self):\n        return \"Anagram of %s\" % self.question\n    def hint_string(", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"default\", styleValue.getDefaultValue());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "   def subtitle_status(self, language):\n        els =  self.get_elements_list(self._SUB_LANGUAGES)\n        for el in els:\n            e = el.find_element_by_css_selector(\"a\")\n            self.logger.", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "                   mob.Prompt = new SR_NewRunebookPrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob.Send", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (item instanceof AlchemicalCatalyst) {\n\t\t\t\tRedButton btnImp = new RedButton(Messages.get(this, \"", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "           try {\n                sp = new JESpace (name, path);\n                spaceRegistrar.put (name, sp);\n            } catch (SpaceError e) {\n                warn (e);\n            }\n        }\n        return sp;\n    }\n   ", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(\"Certificate: \" + cert);\n            }\n            s.println(\"***\");\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n *", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       request = environ['wsgi.input'].read()\n        response = self.dispatcher.dispatch(request)\n        start_response('200 OK', [('Content-Type', 'text/xml'), ('Content-Length', str(len(response)))])\n        return [", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!ReferenceEquals", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   def action_extract_archive(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker extract_archive %s %s\", pprint.pformat(status_id),\n                           pprint.p", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "       mark = \"setRepeated('%s')\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');\" % status", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "       return self.trust_managers[0].getAcceptedIssuers()\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = Convert.ToInt32(store.GetValue (iter, columnBool1));\n\t\t\t\t\tstring [] myStringFull = jumpsNormal[jumpID].Split(new char[] {", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n```", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "           self.__tmp_dir,\n            'datastream.pipe')\n        self.__datastream_transport, self.__datastream_protocol = await self.__server.listen(\n            self.__datastream_address,\n            loop=self.__event_loop,\n            protocol", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "               m_Owner.Caster.SendAsciiMessage(\"Targeting...\");\n            }\n        }\n        private class InternalTarget : Target\n        {\n            private ArchProtectionSpell m_Owner;\n            public InternalTarget(ArchProtectionSpell owner)\n                : base", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n```", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TEMP(new ConfigFile<String, HashMap<String, Object>>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic HashMap<String, Object> create(String string, Configuration", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE,\n\t\t\t\t\t\t\"Auto save\", get", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectTypeIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t} else {\n\t\t\tstateBeansList = Status", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "\t\tfor(IField field : fields) {\n\t\t\tfinal String name = field.getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) {\n\t\t\t\tnamed = new ArrayList", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "       for state in states:\n            state.finalize()\n    def _flush_mapper(self, mapper):\n        if mapper.is_mapped:\n            for state in mapper.all_states():\n                state.finalize()\n    def _flush_", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// find the top-level cell\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "   if __name__ == '__main__':\n        args = parser.parse_args()\n        wigle_downloader = WigleDownloader( args.user, args.password, args.coordfile, args.outpath )\n        wigle_downloader.run", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 159)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Poss", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   like ``r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n           ", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t\tfor", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "           foreach ( ArgumentSyntax argumentSyntax in argumentSyntaxs ) {\n                if ( argumentSyntax.Expression is IdentifierNameSyntax identifierNameSyntax ) {\n                    if ( identifierNameSyntax.Identifier.ValueText == \"ByRef\" ) {\n                        var parameter = memberList.FirstOrDefault", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       builds.extend(platforms)\n    if mobile:\n        builds.extend(android_builds(build, builds))\n    # Build the button\n    if simple:\n        button = '<a href=\"%s\" class=\"download-button\" id=\"%s\">' % (", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream is = context.getResources().getAssets().open(model.getSprite());\n      try {\n        return Bit", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the children are correct.\n        self._assert_children(2)\n        # Set to second group configuration.\n        split_test = self._update_partition_id(1)\n        # Verify", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}\n```", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "           if (vertical) {\n                tmp.Add(new PdfNumber(1000));\n                tmp.Add(new PdfNumber(1000));\n            }\n            else {\n                tmp.Add(new PdfNumber(1000));", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E compute(K key,\n\t\t\t\t\tBiFunction<? super K, ? super E, ? extends E> remappingFunction) {\n\t\treturn read(key, internalMap.compute(key", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "       p = Person.objects[0].select_related()\n        o = Organization.objects.first()\n        self.assertEqual(p.owns[0], o)\n        self.assertEqual(o.owner, p)\n        self.assertEqual(o.employees[0],", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   prerequisite = NavigateToAttribute('collection', 'All')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeManageRelationshipsForm(NodeView):\n    relationship_type =", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(PayPeriodCur.DateStart.Year>1880){\n\t\t\t\tPayPeriodCur.DateStart=textDateStart.Date;\n\t\t\t}\n\t\t\tif(PayPeriodCur.", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       return getId() + \" (\" + getSpecification() + \")\";\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "\t\tdamage = compound.getInteger(\"Damage\");\n\t}\n\t\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            isDiscussable", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "           var result = new SearchResults[segments.Length];\n            var err = new SearchResult() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation };\n            for (int i = 0; i < segments.Length; i++)\n            {\n                result[", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "               if (ignored.Contains(path))\n                {\n                    continue;\n                }\n                toScan.Add(path);\n            }\n            if (toScan.Any())\n            {\n                _commandQueueManager.Enqueue(new ScanMedia", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "   interact(self._plot_line, x=widget_x, y=widget_y)\n    # TODO (forman, 20160709): add sliders for zmin, zmax\n    # TODO (forman, 2016070", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "                   // get channel_uri: check first whether estate\n                    // settings allow voice, then whether parcel allows\n                    // voice, if all do retrieve or obtain the parcel\n                    // voice channel\n                    // if (!scene.RegionInfo.EstateSettings.AllowVoice", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert the time to python datetimes\n        new_time_column_header = []\n        for i, t in enumerate(column_headings['Time']):", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "\t\t\tset { m_ID = (ushort)value; }\n\t\t}\n\t\tpublic sbyte Z\n\t\t{\n\t\t\tget { return m_Z; }\n\t\t\tset { m_Z = value; }\n\t\t}\n\t\tpublic", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "\t\t\tvar newProductionBuildings = builders.Where(b => b.BuildingQueue == Info.BuildingQueues.First()).ToList();\n\t\t\tforeach (var b in newProductionBuildings)\n\t\t\t\tb.SetRallyPoint(bot);", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "\t\t\t\tint outcome = example.getIntValue(predictionAttribute);\n\t\t\t\tdouble confidence = example.getConfidence(predictionAttribute);\n\t\t\t\t// setting outcome\n\t\t\t\toutcomes[parentIndex] = outcome;\n\t\t\t\t// setting confidence", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group')}\n    return authz.is_authorized('group_or_org_member_create', context, data_dict)\ndef group_member_create(context,", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                         cobrand)\n    def test_user_with_cobrand_not", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest.Id)\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "     if (studyFormName != null) {\n        if (existingRequired) {\n          if (studyFormName.equals(accessionNumber)) {\n            return ValidationResults.SAMPLE_FOUND;\n          } else {\n            return ValidationResults.SAMPLE_NOT", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "           ch = string.charAt(offset++);\n            if ('\\uDC00' <= ch && ch <= '\\uDFFF') {\n               codePoint = ((ch & 0x3FF) << 10) | (ch & 0xFFF);\n            }", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "   return results;\n  }\n  \n  /**\n   * Loads a comma-separated list of strings from Properties.  Commas may be quoted if needed, e.g.:\n   *    property1 = value1,value2,\"a quoted value\",'another quoted value", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'plotType' in pD:\n    return S_ERROR( \"Missing plot type!\" )\n  plotType = pD[", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "elif prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\nelse:\n    notify()", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           set { _numValues = value; }\n        }\n        public bool HasNullEntry {\n            get { return _hasNullEntry; }\n        }\n        public int NullEntry {\n            get { return _nullEntry; }\n        }\n        public bool IsEmpty {\n           ", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (byte)parity;\n\t\t\tdcb.ByteSize = (byte)data_bits;\n\t\t\tdcb.StopBits = (byte)bits;\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "       // Output Columns\n        // We will need to update the system catalogs with this new information\n        // If this is an adhoc query then there won't be any output columns\n        // Output Columns\n        // We will need to update the system catalogs with this new information\n", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "                   alphaLevel = rampUp ? 255 : 0;\n                    inRamp = rampUp;\n                }\n                else\n                {\n                    long now = System.currentTimeMillis();\n                    if (now - start >= rampDelay)\n                ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "               float[] widths = new float[fCode.Length];\n                for (int k = 0; k < fCode.Length; ++k) {\n                    int idx = CHARS.IndexOf(fCode[k]);\n                    if (idx < 0", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "\t\t\t\tif entry[0] in self.oldlist.keys():\n\t\t\t\t\tcurrentListEntry = self.oldlist[entry[0]]\n\t\t\t\t\tcurrentListIndex = self.oldlist[entry[0]]['index']\n\t\t\t\t\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "   parser.add_argument('--keep-tempdir', dest='keep_tempdir',\n                        action='store_true')\n    parser.add_argument('--verbose', dest='verbose',\n                        action='store_true')\n    parser.add_argument('--debug',", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* C", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       print '\\033[0m'\n    elif color == 'yellow':\n        print '\\033[1;33;40m'\n    else:\n        print '\\033[0m'\n    return 0\ndef get_singer_label", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "           if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.Frame.ToString());\n            }\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket =", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "       y_points = np.arange(-90.0, +90.0, 15.0)\n        # Test points on a regular global grid, with unrelated steps + offsets\n        # and an extended range of longitude values.\n        x_points = np", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 29);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "           emptyStreams.write(baos);\n            header.write(baos.toByteArray());\n            header.write(NID.kEnd);\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmptyFiles", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "       return wrapper.createFunction(\n            original,\n            self.functionTypeFor( original.DLL ),\n            original.DLL,\n            original.resultType,\n            original.argTypes,\n            original.doc,\n            original.argNames,\n            original.extension,", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(292, 326);\n            this.Controls.Add(this.treeView1);\n            this.Name = \"D", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "\t\t       \t\t\tif (value instanceof Number) {\n\t\t       \t\t\t\tlayer = ((Number) value).intValue();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t} catch (Exception", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "                     ' (1 = 1 pixel, 2 = 2 pixels, etc.)',\\\n                      ' (default = 1)\\n'])\n        f.writelines(['F) ', str(psfscale), '\t\t# PSF scaling factor',\\\n                      ' (", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max_", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "   if NorthernHemisphere:\n        phi1 = 90 - phi1\n    else:\n        phi1 = -phi1\n    Long = (x/(k0*cos(phi1Rad)) + (eccPrimeSquared/4+ecc", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "       for cert_type in ['key', 'cert']:\n            try:\n                # If we can't open the file it's not there, so we should delete it\n                cert_file = open('%s/%s.pem' % (config_directory,cert", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "\t\tif(splitNumber.length > 1) {\n\t\t\tchance = Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\tif(chance > 100) {\n\t\t\tchance = 100;\n\t\t}", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       return CourseKey(self._course_dict['org'], self._course_dict['number'], self._course_dict['run'])\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        if self._course_key is not None:\n", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "                           return false;\n                        }\n                        return true;\n                    }\n                };\n                result = MessageImporter.importMessages(fileTextField.getText(), subfoldersCheckbox.isSelected(), messageWriter);\n            } else {\n                result = MessageImp", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "   def getRoomBookingList(self):\n        \"\"\" Session Room Booking List \"\"\"\n    getRoomBookingList.result = ISessionRoomBookingFossil\n    getRoomBookingList.name = \"roomBookingList\"\n    def getRoomBookingList(self):", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "\t\tready_pipe = os.open(\"/tmp/ready\", os.O_RDONLY)\n\t\tos.close(ready_pipe)\n\t\tgobject.io_add_watch(ready_pipe, gobject.IO_IN, self.ready_callback)\n\tdef", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.chance;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.chance /= sum;\n\t}\n\tpublic void setEmotion(String emotionName, float chance) {", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test exporting as an XML file.\"\"\"\n        # read and parse sample file\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plug.archive = self.archive\n                plug.collect()\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n               ", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "       if (currentSession == null || currentSession.isClosed()) {\n            return;\n        }\n        if (userInfoSession != null && !userInfoSession.equals(currentSession)) {\n            userInfoSession.closeAndClearTokenInformation();\n        }\n        userInfoSession", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "# See https://en.wikipedia.org/wiki/OBD-II_PIDs for further information\n# PID = Parameter IDentification\nclass OBD_PID1D(OBD_Packet):\n    name = \"PID_1D_ObdStandardsThisVehicle", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "   label = \"Add series\"\n    field_names = [\n        \"name\",\n        \"version\",\n        \"milestones\",\n        \"releases\",\n        \"description\",\n        \"homepageurl\",\n        \"wikiurl\",\n        \"screenshotsurl", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "       final LocalTripleStore db1 = new LocalTripleStore(new File(args[0]),\n                new File(args[0] + \".journal\"), new File(args[0] + \".log\"),\n                new File(args[0] + \".stat\"), new File(", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            reason = form.cleaned_data['reason']\n            UserReport.objects.create(\n                user = request.user,\n                reported_user = user,\n                reason", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (Type attributeType, bool inherit)\n            {\n                return false;\n            }\n            public override bool IsPublic { get {throw new NotImplementedException ();} }\n            public override bool Is", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "               if flag:\n                    new_positional_tags_list.append(\n                        TagRegex(flag, regex))\n                else:\n                    new_positional_tags_list.append(regex)\n            return new_positional_tags_list\n    def", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "       (projected onto the *y* axis) or :py:obj:`None` if singular.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\ndef", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "       # If an exception occurs in debug mode or if context preservation is\n        # activated under exception situations exactly one context stays\n        # on the stack.  The rationale is that you want to access that\n        # information under debug situations.  However if someone forgets to\n        # pop that", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "       ImportVmTemplateCommand command =\n                setupVolumeFormatAndTypeTest(VolumeFormat.RAW, VolumeType.Preallocated, StorageType.NFS);\n        command.setParameters(createParameters());\n        command.setImportAsNewEntity(isImportAsNewEntity);\n", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "               this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n                this.AddRes(index, typeof(PrismItem), 1073465, 1", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\t\t\tif (type == FontSize.AsUnit)\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\telse\n\t\t\t\treturn font_size_names [(int) type];\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\n    def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\n\n\n\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "       dx = (angles[1] * ray_trafo.range.meshgrid[1] +\n              angles[2] * ray_trafo.range.meshgrid[2])\n    else:\n        dx = (angles[1] * ray_trafo.range.meshgrid", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "     return (Builder) new Builder().MergeFrom(prototype);\n    }\n    public override Builder ToBuilder() { return CreateBuilder(this); }\n    public override Builder CreateBuilderForType() { return new Builder(); }\n    \n    public static SendInvitationRequest DefaultInstanceForType {\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "   ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"imaging\"][\"pixel size\"] = .34\n    ds.config[\"imaging\"][\"pixel size\"] = .34\n", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "               for (int w = 0; w < width; w++) {\n                    if (h == 0 && w == 0) {\n                        continue;\n                    }\n                    if (h == height - 1 && w == width - 1) {\n                ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "\t\t\tvar innerObj = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerObj.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\tAssert.That(innerObj.Properties[0].Value.Type,", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnTextChanged(EventArgs e)\n    {\n      base.OnTextChanged(e);\n      if (m_auto", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t}\n\t\tvoid VerifyThreadAffinity()\n\t\t{\n\t\t\tif (Thread.CurrentThread != Thread.CurrentThreadAffine)\n\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "\t\t\treturn performDownloadAndInstall();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * This should download and install Yarta.\n\t * \n\t * When the function returns true Yarta will be installed.\n\t\t * \n\t * @return", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "                   {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,\n                                                     tzinfo=tzutc()),\n                     u'ProductDescription': 'Windows',\n                     u", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob/byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        #endregion\n        #region Private methods\n        private void Initialize()\n        {\n\t\t\t// check if already initialized\n\t\t\tif (IsInitialized)\n", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString()", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "           if (bugAnnotation.getAnnotationType() == null) {\n                throw new RuntimeException(\"BugAnnotation has null annotationType\");\n            }\n        }\n    }\n    /**\n     * Print a bug in one-line format.\n     *\n     * @param bug", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "                 adminUser = getEucalyptusAdmin();\n                } else {\n                  accountIdAccountMap.put(walrusObject.getOwnerId(), owningAccount);\n                }\n              } catch (AuthException e) {\n                LOG.warn(\"Account", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "\t\t\tw10.LeftAttach = ((uint)(1));\n\t\t\tw10.RightAttach = ((uint)(2));\n\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\tdisplayText.text = inputField.text;\n\t\t}\n\t}\n}\n```", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "           environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\\n                self.category\n        self.system['TOTALSTATUS'] = self.totalstatus\n        if self.totalstatus is not None:\n            environ['%sTOT", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "                   vertices[x] = new Vector3f();\n                vertices[x].set(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    /**\n     * Stores in the <code>normals</code> array the normal values of", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "   def _get_website_meta_tags(self, cr, uid, ids, context=None):\n        res = {}\n        for view in self.browse(cr, uid, ids, context=context):\n            if view.page:\n                res[view.", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           if (CriteriaCodesUsed.Count != 3)\n            {\n                ValidationColumn = DiscountTable.Columns[PcDiscountTable.ColumnDiscountCriteriaCode];\n                // displays a warning message\n                VerificationResult = new TScreenVerificationResult(new TV", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "       if (CmsStringUtil.isEmptyOrWhitespaceOnly(showDateData)) {\n            // backward compatibility: check for property defining visibility of date columns\n            String showDateData = property(\"categoryDateCreated\", \"search\", \"\");\n            if (CmsStringUtil.isEmptyOrWhites", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            foreach (string user in Users)\n            {\n               ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tPlayerState pl = m_Members[i];\n\t", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t}\n\t\tpublic string CacheDirectory {\n\t\t\tget {\n\t\t\t\treturn cacheDir;\n\t\t\t}\n\t\t}\n\t\tpublic string ConfDirectory {\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n    def __str__(self):\n        return \"PayloadRequirements(packages=%s, groups=%s)\" % (self.packages, self.groups)\n    def __repr__(self):\n        return 'PayloadRequirements(packages=%s, groups=%s)' % (self.packages", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\tif (Viewport.", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleCallSessionEvent */\n    public void", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraint\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "\t\t\tget { return Enabled; }\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value == _customRange)\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\tpublic class Apple : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Apple() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic Apple( int amount ) : base( amount, 0x9F3 )", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated\n       ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "\n    def __truediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__itruediv__(other)\n\n    def __itruediv", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "       self.assertEquals(field_model_def, field_def)\n        clean_field_model_definitions()\n    def test_field_name_model_based_with_inheritance(self):\n        \"\"\"JSONAlchemy - field name model based with inheritance\"\"\"\n       ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                       if (eFarm.MinionsHit >= 2)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                    if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady())\n                   ", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'test'\n    self.category.scheme = 'http://www.google.com'\n    self.category.label = 'test'\n    self.", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "\t\t\t\tmapping.SqlLoader = new HbmSqlLoader();\n\t\t\t}\n\t\t\tmapping.SqlLoader.namedQuery = namedQueryReference;\n\t\t}\n\t\tpublic void Loader(string sqlLoader)\n\t\t{\n\t\t\tif (mapping.", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "           value = createHTMLView(c, text);\n        }\n        c.putClientProperty(BasicHTML.propertyKey, value);\n        if (oldValue != null) {\n            oldValue.removeChangeListener(c);\n        }\n        if (value != null) {\n", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "           JMenuItem jMenuItem = new JMenuItem(\"Open Document\");\n            jMenuItem.addActionListener(oActionListener);\n            jMenuItem.setActionCommand(sTDocUrl);\n            _jMnuRoot.add(jMenuItem);\n        }\n        private JMenuItem getInspect", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "                   new[] {new object[] {\"E1\", \"10\"}});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraWideningTwo : RegressionExecution\n        {\n            private readonly bool namedWindow;\n            public Infra", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "               if (phi) {\n                    ValueNode phi = getCachedPhi(key, value.getStamp());\n                    phi.addDef(value);\n                    phi.addUse(value);\n                    value = phi;\n                }\n              ", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "#lexers['php'] = PhpLexer\n#lexers['text'] = PhpLexer\n#lexers['text'] = PhpLexer\n#lexers['text'] = PhpLexer\n#lexers['text'] = PhpLexer", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "       invocationQueue.removeFirst();\n        popGraphs(invocationQueue.peekFirst().callee().numberOfMethods());\n    }\n    private boolean contains(CallsiteHolder g) {\n        for (CallsiteHolder ch : graphQueue) {\n            if (ch == g", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "   s = create(filename, content)\n    assert s.name_is_testharness\n    assert s.name_is_testharness_only\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "       user = '%s@%s' % (username, domain)\n        data = self.module.get(user)\n        if data is None:\n            raise UserNotFound(username, domain)\n        else:\n            self.module.delete(user)\n            # maintain list of", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "\t\t\t\tfrom.SendGump(new EodonianWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic EodonianWallMap(Serial serial) : base(serial)\n\t\t{\n\t\t}\n\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead = ()", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "               self.pytest_con = pytest\n            else:\n                self.pytest_con = \"py_test_base\"\n            if sprout_appliances > 1:\n                self.pytest_con = \"py_test_base\"\n       ", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "       gsp = yield self.setupGerritStatusPush(startCB=sampleStartCB)\n        msg = yield self.run_fake_single_build(gsp, buildResult)\n        result = makeReviewResult(msg,\n                                  (GERRIT_LABEL_VER", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n    elif not res['Value']:\n      res = self.transClient.setTransformationParameter( transID, 'Status', 'ValidatedOutput", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "           build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def get_output_dirs (self):\n        \"\"\"Return the list of directories", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "#\n# This file is part of Invenio.\n# Copyright (C) 2014, 2015 CERN.\n#\n# Invenio is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_timer_irq_Latch_16 =", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2},{3})\", circle.Radius, circle.X, circle.Y, circle.Color);\n                    }\n                    if (obj is int)\n                    {\n                ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "               Map<String, AnnotationMirror> r2) {\n            if (r1 == null)\n                return r2;\n            if (r2 == null)\n                return r1;\n            Map<String, AnnotationMirror> result = new HashMap<String", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX))\n\t\t\t\treturn action;\n\t\t\tif(uri.getPath().startsWith(\"/plugins/\"))\n\t\t\t\treturn action;\n\t\t\tif(uri.getPath().start", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       return Event.newBuilder().setSource(source).setSeqNo(seqNo.getAndIncrement());\n    }\n}", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "       return self.announcement.title\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement's cross-publication.\n        \"\"\"\n        return reverse('announcements:announcement_twitter_cross_publication_detail", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n\t\tAdd(\"Party Quest\",", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00ij', self.read(o", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "\t\t\t\tMsg(\"I'm not sure what you mean by that.<br/>I'm not sure what you mean by that.<br/>I'm not sure what you mean by that.<br/>I'm not sure what you mean by that.<br/>I'm not sure what", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "       sub = col.column(align=True)\n        sub.label(text=\"Light Path:\")\n        sub.prop(mat, \"use_transparent\")\n        sub.prop(mat, \"use_transparent_shadow\")\n        sub.prop(mat, \"use_", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    rows = cursor.fetchall()\n    print \"Rows is: \", rows\n    for row in rows:\n        print \"Row is: \", row\n        print \"Row is: \", row\n        print \"Row is", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControl());\n\t\t\t\t\tg.drawRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": "   if (len(primary.keys()) > 0):\n        print(\"primary.xml contains packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "\t\t\tint height = 0;\n\t\t\tforeach (View child in Children) {\n\t\t\t\theight += child.SizeHeightToFitWithMin (min);\n\t\t\t}\n\t\t\treturn height;\n\t\t}\n\t\tpublic int SizeWidthTo", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "   def add_host(self, host_data):\n        \"\"\" add a host to the task data \"\"\"\n        self.host_data[host_data.uuid] = host_data\nclass HostData:\n    \"\"\"\n    Data about a single host.\n    \"\"\"\n    def __", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "   return string.format(*args, **kwargs)\ndef str_format_list(string, *args, **kwargs):\n    \"\"\"\n    A slightly modified version of the native str.format(), using {% and %}\n    instead of { and }\n    \n    >>> str_format", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]  \n        public ActionResult SaveEvent", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "       # Get the project\n        project = conn.table('projects').get(project_id).run()\n        # Set the last_snapshot field\n        project['last_snapshot'] = timestamp\n        # Update the project\n        conn.table('projects').get(project_id).update(", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.tenant\"));\n\t}\n\tprotected void withCodeList(String codeListId, String... codes) {\n\t\tcodelistServiceStub.withCodeList(codeListId", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "               Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));\n                startActivity(browserIntent);\n            }\n        }\n    }\n}", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "                      self.logger.error(\"service %s restart failed\" % service_name)\n                       return False\n                    self.logger.info(\"restarted dhcpd\")\n                else:\n                    self.logger.info(\"not restarting dhcpd\")\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, j, session, entity);\n\t\t\t\tif (Initialize", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-N', job_name,\n        '-o', log_name,\n        '-j', 'y',\n        '-l', 'h_vmem=1000000000',\n        '-l', 'h_rt=1000000", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "       self.retranslateUi(Dialog)\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(\"Dialog\", \"Preferences", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\t\t\t\t//if(tFull[3] == \"0\")\n\t\t\t\t//\tcontinue;\n\t\t\t\t//if(tFull[3] == \"1\")\n\t\t\t\t//\tcontinue;\n\t\t\t\t//if(tFull[3]", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "   def handlePremium(self):\n        premium_url = None\n        if self.__name__ == \"FileserveCom\":\n            #try api download\n            res = self.load(\"http://app.fileserve.com/api/download/premium/\",\n                           ", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t\tif (path != null && path.Count > 0)\n\t\t\t\t\treturn path[0];\n\t\t\treturn null;\n\t\t}\n\t\tCPos GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\tvar lastproc =", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "\t\treturn getMode().isAggressive() ? 1.6F : 0.6F;\n\t}\n\tpublic float getShootingInaccuracy() {\n\t\treturn getMode().isAggressive() ? 0.0F : 0.", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check UID/GID switches when current effective GID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(1, 1, 0, 0, [0, 1], [])", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "           for (; stateIndex < MAXIMUM_ORDER; stateIndex++)\n            {\n                if (stateIndex == 0)\n                {\n                    gotoLoopEntry = true;\n                }\n                if (stateIndex == 1)\n                {\n                ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            string assemblyFile = FileUtils.CombinePaths(Parent.Directory.FullName, relativePath);\n            if (File.Exists(assemblyFile)) {\n               ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X</td>\n", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   for run_num, run_results in enumerate(cr['runs']):\n        if run_num == 0:\n            continue\n        for test in run_results:\n            if test == VC:\n                continue\n            if test not in cr['combined'][", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "       final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int otherId = new Random().nextInt(SecurityManagerImpl.MAX_USER_ID);\n        final int otherGroupId = new Random().nextInt(SecurityManagerImpl.MAX", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner != 0:\n    failures += \"Inference failed with k=3\\n\"\n  winner, _inferenceResult, _dist, _categoryDist =", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeValue(Kind kind, ObjectMirror mirror, int offset, Value value,", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if(type == RequestType.Step) {\n                notifyStepsReceived(FitnessLibrary.IFitnessLibraryListener.ExecutionStatus.Success, requestId, convertToStepBucketList(list));\n            } else if(type == RequestType.Activity) {\n                notifyActivities", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": "\t\t\t\tstr += s.ToString() + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic State GetStateByName( string name ) {\n\t\t\tforeach( State s in states ) {\n\t\t\t\tif", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "       n = m + i16 - 2;\n        i27 = i26 + i16 - 1;\n        i29 = i28 + i16 - 1;\n        i25 = 1;\n        if ((paramInt1 != ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "       if \"set_is_active\" in request.POST:\n            return self._handle_set_is_active()\n        return super(UserDetailView, self).post(request, *args, **kwargs)\nclass UserListView(CreateOrUpdateView):\n    template_name", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\t\tif (propertiesName == null)\n\t\t\t\tthrow new InvalidOperationException(\"PropertiesName must be set before calling StartCoreServices\");\n\t\t\tif (configDirectory == null)\n\t\t\t\tconfigDirectory = Path.Combine(Environment.GetFolderPath(Environment.", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "       proc = subprocess.Popen(\n            ['/sbin/modinfo', '-d', 'somemodule'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t//\n\t\t// System.Data.ConstraintCollection.cs\n\t\t//\n\t\t// Author:\n\t\t//\tFranklin Wise <gracenote@earthlink.net>\n\t\t//\tDaniel Morgan\n\t\t//\n\t\t//\n", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "               sample_count[v] -= sample_count[edge.child]\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] = edge.parent\n            v = edge.parent\n            while v != -1:\n              ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "\t\t\t\tITransaction tx = s.BeginTransaction();\n\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               TextView text = new TextView( getActivity() );\n                text.setText( R.string.no_taf_available );\n                text.setLayoutParams( new LayoutParams( LayoutParams.MATCH_PARENT,\n                        LayoutParams.WRAP_", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ uiByteValue ^ (uiCRCITTSum << 8) ^ (uiCRCITTSum << 3) ^ (uiCRCITTSum >> 4);\n            }\n", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "       return frame_header + self.data + padding_bytes\nclass PushPromiseFrame(Frame):\n    \"\"\"\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonNativeHeaderHyperlinkDetector(editor) };\n        }\n        else {\n            return new IHyperlinkDetector[] { \n                    new CeylonNativeHeaderHyperlinkDetector", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.aspectWidget = Object3DAspect(self)\n        self.scaleWidget = Object3DScale(self)\n        self.privateInterfaceWidget = Object3DPrivateInterface(self)\n        self.l.addWidget(self.drawingModeWidget)\n        self", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set to current value\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = (Point2D) m_Property.GetValue( m_Object, null );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tnbttagcompound = new NBTTagCompound();\n\t\t\t}\n\t\t\t\n\t\t\tNBTTagCompound nbttagcompound1 = nb", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                ", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++)\n\t\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+k+\"\\t\"+fractionWithAmount[i][j][k]+\"\\n\");\n\t\treturn", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic bool IsTask {\n\t\t\tget { throw new NotImplementedException (); }\n\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "\t\tif (this.postdominators != null && other.postdominators != null) {\n\t\t\tif (this.postdominators.size() != other.postdominators.size())\n\t\t\t\treturn false;\n\t\t\tfor (int i = 0;", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "class endpoint_stats_list(XDRStruct):\n    __slots__ = ['stats']\n    def __init__(self, stats=None):\n        self.stats = stats\n    @classmethod\n    def pack_into(self, packer, obj):\n        packer.", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\treturn v.ToVector2 ().RelativeTo (viewport.ToVector2 ());\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 viewport)\n\t\t{\n\t\t\treturn v.ToVector2 ().Relative", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   Returns a range query result in JSON format.\n    The order of items in the JSON array is:\n    1) Primary key\n    2) Start time as UNIX timestamp\n    3) End time as UNIX timestamp\n    4) 'title' from default metadata strand, if metadata exists", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": " print '    object, %s, a%d)' % (signature, bind_count - 1)\n  print '  }'\n  print ''\n  # The non-single use helper function\n  print textwrap.dedent(\"\"\"\\\n  /**\n   * @brief", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\t\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// sends a message to a specific client\n\t\t/// </summary>", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a parameter with a color value.\n\t *\n\t * @param   name    Name of the parameter.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "           var w = new DenseVector(input.Count);\n            var z = new DenseVector(input.Count);\n            var zp = new DenseVector(input.Count);\n            var zq = new DenseVector(input.Count);\n            var zr = new", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    /// <summary>\n    /// A list of objects representing persisted instances of pairs of security actions and sets of security permissions.\n    /// These apply by default to every method reachable from the module.\n   ", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "                       new VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(new ServiceNode(new ConstantNode(\n                        TermId.mockIV(VTE.SERVICE)), serviceGraphPattern));\n            }\n        }", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "   def clean_groups(self):\n        \"\"\"Checks if the user is not a community admin\"\"\"\n        groups = self.cleaned_data['groups']\n        if COMMUNITY_ADMIN.format(self.community.name) in groups:\n            msg = \"You", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots && slot.Value.LockTeam)\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\tvar bot = new LobbyBot(slot.Key,", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "       for csv_field in csv_mapping.fields:\n            if csv_field in mapping_json['mappings'][self.enrich_index]['properties']:\n                result[csv_field] = True\n            else:\n                result[csv_field] =", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[left]};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[left], sortedNumbers[right]};\n\t\t}\n\t}\n\t\n\t/**\n\t * Get the", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "\t\t\t\treturn _rootCause.ToString();\n\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n```", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "           var bb = cluster.BoundaryCurve.BoundingBox;\n            foreach (var node in cluster.Nodes) {\n                if (node.Center.X < bb.Left)\n                    throw new InvalidOperationException(\"Node \" + node + \" is outside the cluster boundary\");", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\t\t\tif (Class != null && type == null)\n\t\t\t{\n\t\t\t\tif (Method != null || Field != null || Sig != null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\tm_maxSlopeCosine = cos(m_maxSlopeRadians);\n}\ndouble btKinematicCharacterController::getMaxSlope()\n{\n\treturn m_maxSlopeRadians;\n}\nvoid btKinematicCharacterController::setMax", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.size() > 0) {\n            for (ExpressionTree initializer : initializers) {\n                if (canBeLeaked(initializer)) {\n                    checker.report(Result.failure(\"unique.leaked\"), initializer);\n                }", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(\n\t\t\t\t\t\tContext,\n\t\t\t\t\t\tthis,\n\t\t\t\t\t\t_returnNode,\n\t\t\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tif(isPassiveFlower()) {\n\t\t\t\tNBTTagCompound cmp = wand.getTagCompound();\n\t\t\t\tcmp.setInteger(TAG_PASSIVE_DECAY_TICKS, passiveDecayTicks);\n\t\t\t", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tinstrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(annotationType), Collections.singleton(instrumentationApplier));\n\t\t\t// must be write lock\n\t\t\tverify(classCache, times(1)).executeWithWriteLock(Matchers", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "           int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(new Date(date));\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Gets an occurrence of the specified event starting at the specified date", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\tif ( !(aThat instanceof HibernateProxy) ) {\n\t\t\treturn false;\n\t\t}\n\t\tproxyThat = ((HibernateProxy)aThat).getHibernateLazyInitializer().getImplementation();\n\t\tif ( this == proxyThat )", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "       return rnd.nextInt(size);\n    }\n    public int randomChoice(int min, int max) {\n        return rnd.nextInt(max - min) + min;\n    }\n    public int randomChoice(int min, int max, int size) {\n", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "               'rsync',\n                '--exclude=pg_hba.conf',\n                '--exclude=pg_ident.conf',\n                '--exclude=pg_logical.conf',\n                '--exclude=pg_rewind.conf',", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t    if n == 0:\n\t      status = 'w'\n\t    else:\n\t      status = 'a'\n\t    with open(name, status) as f_ID:\n\t      f_ID.write(str(body_types[i]) + '\\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assertEqual(c", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "   return fn(*arg, **kw)\n        return wrap\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it has been composed\n        into a core :class:`.Select` object.\n        This event is intended to allow changes", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "   return are_equal", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 19;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t// ", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       if cdata is None:\n            return\n        if cdata == 0:\n            # We have a SetSubtensor or an IncSubtensor on zeros\n            # If is this Subtensor useful?\n            # Check that we keep all the original data.\n            # Put the constant", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            if (switchManager == null) {\n                return null;\n            }\n            ObjectMapper mapper = new ObjectMapper();", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        this.memorizedcohesion.put(c, intrinsicCohesion);\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   src1 = env.A[b]\n    off10 = off1//off2\n    off11 = off10//off3\n    src2 = env.cst(off11.int(-1),10)\n    obj.operands = [src1", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\tsourceEventBinding.Bind( DataSource.Component, SourceEventName, DataSource.MemberName, this, \"MirrorSourceProperty\" );\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           buffer.Append(\"          .shrinktofit= \").Append(ShrinkToFit)\n                .Append(\"\\n\");\n            buffer.Append(\"          .mergcells  = \").Append(MergeCells)\n                .Append(\"\\n\");\n           ", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "   def run(self):\n        while True:\n            result = self.__queue.get()\n            if self.__stopped:\n                return\n            self.__process([result])\n            self.__idle(self.__progress_cb,\n                    float(self.__queue.qsize", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (Map.Entry<String, String> datum : csvData.entrySet())", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "           return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SPECTATOR game type\n         */\n        public boolean isSpectator()\n        {\n            return this == SPECTATOR;\n        }\n        /**\n         * Returns true", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "   def make_alt_uri(self,\n                     uri):\n        \"\"\" makes an alternative URI for a given URI\n        \"\"\"\n        alt_uri = uri\n        if uri.startswith('http://'):\n            alt_uri = uri + 'alt'\n        return alt_", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "       return rootLayout;\n    }\n    @Override\n    public void onAttach(Context context) {\n        super.onAttach(context);\n        parentContext = context;\n    }\n    @Override\n    public void onCreateOptionsMenu(Menu menu, MenuInflater", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "\t\t\tstream = location.openStream();\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.load(stream);\n\t\t\treturn new JRPropertiesMap(properties);\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tcomputerMgmt.save();\n\t\t\tcomputerMgmt.close();\n\t\t\tcomputerMgmt=null;\n\t\t\t\n\t\t}\n\t\tprivate void CPC_Load(object sender, System.EventArgs e)\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   printV(\"Best Server is %s\" % servers.best)\n    printV(\"Server List:\")\n    for name, server in sorted(servers.items(), key=lambda x: x[1]['priority']):\n        printV(\"%s: %s\" % (name, server", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "\t\tif (IsRagdoll)\n\t\t\treturn;\n\t\t//if we're not a ragdoll then set it to be one\n\t\tIsRagdoll = ragdoll;\n\t\tif (IsRagdoll) {\n\t\t   ", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "       if (PhotonEditor.Current.UseCloud)\n        {\n            additionalRpcs.AddRange(PhotonEditor.Current.CloudRpcList);\n        }\n        if (PhotonEditor.Current.UseMyServer)\n        {\n            additionalRpcs.Add", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "       elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "LOGIN_REDIRECT_URL = '/'\nLOGIN_REDIRECT_URL = '/'\nLOGIN_REDIRECT_URL = '/'\nLOGIN_REDIRECT_URL = '/'\nLOGIN_REDIRECT_URL = '/'\nLOGIN_REDIRECT_URL = '/", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBasicBlock) {\n\t\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\t\tif (prevChildAsBB !=", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "                   ContentValues cv = new ContentValues();\n                    cv.put(Db.Table1.ID_GROUP, newId);\n                    db.update(Db.Table1.TABLE_NAME, cv, Db.Table1.ID_GROUP + \" = \" + deleteId,", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\nif __name__ == '__main__':\n    rospy.init_node('pars_server')\n    server", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "           super( source, new Predicate<PatternMatch>()\n            {\n                public boolean apply( PatternMatch match )\n                {\n                    return matchFilter( match, objectVariables );\n                }\n            } );\n        }\n        public FilteredPatternFinder( Iterable<", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tYesNoDialog = new ImageHelper(102107, \"images/YesNoDialog.gif\", new Integer(", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \" files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, object owner)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "\t\t\t\t// This range contains half-width katakana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (extraToJis [value])) |\n\t\t\t\t\t\t(((int)", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['op'], dict['value'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['op'], dict", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "\t\t\tvar item = queue.FirstOrDefault(pi => pi.Item == itemName);\n\t\t\tif (item == null)\n\t\t\t\treturn;\n\t\t\tvar cost = item.TotalCost;\n\t\t\tvar time = item.RemainingTime;\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tAssert.AreEqual (1, csd.DiscretionaryAcl.Count);\n\t\t\tAssert", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "           for line in f:\n                if not line.strip():\n                    module.fail_json(msg=\"File %s contains blank lines\" % path)\n        finally:\n            f.close()\n    if state == \"present\":\n        msg, changed = present(path,", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "           return self.symmetry.transform_wave_function(psit_G, s, op_cc,\n                                                         time_reversal)\n    def get_slice(self):\n        \"\"\"Return slice of k-points to be used on this CPU.\"\"\"\n        return slice", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\nclass StratumLayer(GeoLayer):\n    def __init__(self, config={}):\n        super().__init", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       if self.key_id_exist:\n            self.config_ntp_auth_keyid()\n        else:\n            self.undo_config_ntp_auth_keyid()\n        self.config_ntp_auth_enable_by_cli()\n    def", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.store.update_item(component, editing_user)\n        # Verify that the component was last edited by editing_user\n        check_node(component.location, after_create, after_create, editing_user, None, after_create, editing_user)\n        #", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "   elif node.nodeType == Node.ENTITY_REFERENCE_NODE:\n        clone = newOwnerDocument.createEntityReference(node.nodeName)\n    elif node.nodeType == Node.ENTITY_NODE:\n        clone = newOwnerDocument.createEntity(node.node", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "           frameToClose = (InternalFrame)buttons.get(btn);\n            if (frameToClose!=null &&\n                frameToClose.getDesktopPane()!=null &&\n                ((DesktopPane)frameToClose.getDesktopPane()).isModal() &&\n               ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "           if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            if (controllerName == null)\n            {\n                throw new ArgumentNullException(\"controllerName\");\n            }\n            if (actionName == null)\n            {\n", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "   def _key_up(self, path, model, column):\n        if not path:\n            return None\n        path = model.get_iter(path)\n        if path.children():\n            path = path.children()[0]\n        else:\n            path = model.", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().addGameJoin( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    setWidget( m", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.FreeCoTaskMem(m_ptr);\n                }\n            }\n        }\n        public void Dispose()\n        {\n            Dispose(true);\n", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.Interface)] IMFMediaEvent pEvent\n            );\n       ", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       ensureAdminAccess();\n        spm.addPrincipalToPrincipal( directedAclKeys );\n        return null;\n    }\n    @Timed\n    @Override\n    @PostMapping(\n            path = REMOVE,\n            consumes = MediaType.APPLICATION_", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       return self.get_queryset().filter(\n            pootle_path__startswith=pootle_path,\n            store__user=user,\n        )\n    def get_for_store(self, store, user):\n        \"\"\"Returns units that fall below the", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n\t*", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "       code = re_m4.sub('%%%s%%', code)\n        # replace all variables\n        for x in self.env.get_variables():\n            code = code.replace('%%%s%%' % x, self.env.get(x))\n        # write", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "           if (target.Faction != null && target.Faction.IsEnemy(src.Faction))\n                return true;\n            // Checked Factions\n            if (target.Faction != null && target.Faction.IsEnemy(src.Faction))\n              ", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tkeyLocator.setType(KeyLocatorType.KEY_LOCATOR_DIGEST);\n\t\t\t\tkeyLocator.setKey", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs))\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@cti_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Direction = ParameterDirection", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMskJointVo v1 = (MskJointVo)o", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergeOrderResponse.MergedOrder;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception e", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "               ('created', models.DateTimeField(auto_now_add=True, null=True)),\n                ('updated', models.DateTimeField(auto_now=True, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Student',\n           ", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        updateWith(ch, start, length);\n    }\n    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {\n        digest.update((byte) ((TEXT", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "       add_view = navigate_to(rate, 'Add')\n        add_view.fill_with(\n            {\n                'description': rate.description,\n                'currency': rate.currency,\n                'fields': rate.fields\n            },\n            on_change", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "               if srcip in self.interface_to_port_map:\n                    portnum = self.interface_to_port_map[srcip]\n                else:\n                    portnum = self.interface_to_port_map[self.name]\n                self", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "           beanProperties.addPropertyValue(LegacyConfigPostProcessor.PROPERTY_LOCATIONS, newLocationList);\n            // Invalidate cached merged bean definitions\n            ((BeanDefinitionRegistry) beanFactory).registerBeanDefinition(beanName, beanFactory\n                    .getBeanDefinition(beanName));\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "       for child in element:\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of an element matches what is expected.\n        Arguments:\n        element Element object.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t} else if (p.typ == Node.iter) {\n\t\t\ta = LeadingAny(p.sub);\n\t\t} else if (p.typ == Node.opt)", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).update(delta);\n        }\n        \n        //Updates the HUD\n        display.update(delta);\n        \n        //Updates the", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, shadowBuffer.Lock( offset, length, BufferLocking.WriteOnly ), length );", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\tAssert", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "               // Copy the current row to the previous row\n                for (int i = 0; i < bytesPerRow; i++) {\n                    prior[i] = curr[i];\n                }\n                // Write the current row to the output stream\n                fout", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "   if len(reaction.metabolites) > 1:\n        raise ValueError(\n            \"Cannot calculate yields for reactions with more than one metabolite.\"\n        )\n    return [\n        coeff * met.weight for met, coeff in reaction.metabolites.items()\n", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.foo'))\n        s.set_interface('org", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "\t\tself.satfinder_scan_nims.addNotifier(self.retune, initial_call = False)\n\t\tself.satfinder_scan_nims.addNotifier(self.retune, initial_call = False)\n\t\tself.satfinder_scan", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void putAll(Map m) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tfor ( Object o : m.entrySet() ) {\n\t\t\t\tfinal Entry e =", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "   if (m_IgnoreChanges)\n      return;\n    if (m_RecentItems.size() >= m_MaxCount)\n      m_RecentItems.remove(0);\n    m_RecentItems.add(item);\n    writeProps();\n    updateMenu();", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member deleting an item\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        /// <summary>\n        /// The list view this item belongs to", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "                   for thing in m_product.get_basis():\n                        output += str(thing) + \"\\n\"\n                except:\n                    output += \"no product \\n\"\n        _file = open(filename, 'w+')\n        _file.write(output", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n```", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       if debugtab:\n            dbg('Window::tab_new: debugtab')\n        if not self.is_child_notebook():\n            maker = Factory()\n            self.terminator.add_tab(self, cwd, profile)\n        else:\n            maker =", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "   @api.multi\n    def attendance_action_change(self):\n        \"\"\" Changes the attendance of the employee.\n            Returns an action to the check in/out message.\n        \"\"\"\n        self.ensure_one()\n        if self.last_attendance_id:\n           ", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "       self.protocol = protocol\n        self.context = OpenSSL.SSL.Context(\n            _openssl_versions[protocol],\n            OpenSSL.SSL_OP_ALL,\n        )\n        self.context.set_options(\n            OpenSSL.SSL_OP_NO_", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Move-Tab-to-top\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n    \"Move-Tab-", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "                   toReturn.Add( new StructTypeInfo( nameArraySizeFragment, managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        public void DllClose( Variant dll ) {\n            try {\n               ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        return string;\n    }\n}\n```", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo [persistenceUnitName=\" + this.persistenceUnitName + \", persistenceProviderClassName=\" + this.persistenceProviderClassName + \", transactionType=\" + this.transactionType + \", nonJtaDataSource=\" + this.nonJtaDataSource + \", jtaDataSource=\"", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "               comment = name\n        # attempt to find job by 'name' header comment\n        comment = None\n        for l in self.lines:\n            if comment is not None:\n                if comment == name:\n                    return [comment, l]\n                else:\n                ", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "\t\t\tthis.checkbuttonWhiteSpace = new global::Gtk.CheckButton ();\n\t\t\tthis.checkbuttonWhiteSpace.CanFocus = true;\n\t\t\tthis.checkbuttonWhiteSpace.Name = \"checkbuttonWhiteSpace\";\n\t\t\tthis.checkbuttonWhiteSpace", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x000000ff)  >>  0);\n\t\t\tbuff[5] = (byte)((size & 0xff000000) >> 24);\n\t\t\tbuff[", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2_Legacy ()\n\t\t{\n", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "                   if self.choice.isdigit():\n                        self.parser(self.choice, cap=self.cap)\n                        continue\n                    else:\n                        self.parser(self.choice)\n                        continue\n                except ValueError:\n                    print(self", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "   IEditorPart editorPart = getEditorPart();\n    if (editorPart instanceof CommonMultiPageEditor)\n    {\n      CommonMultiPageEditor editor = (CommonMultiPageEditor)editorPart;\n      IFileEditorInput input = (IFileEditorInput)editor.getEditorInput();\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "           for (k++; i < N1 + N2 + N3; i++, k += 4)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (k++; i < N1 + N2 + N3", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       modifier.vertex_group = modifier_json['vertex_group']\nclass MeshModifierVERTEX_WEIGHT_PROXIMITY_GEOMETRY(MeshModifierCommon):\n    @classmethod\n    def _to_json_spec(cls, modifier_json,", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\t    current_align += 4 + CDRSerializer.alignment(current_align, 4); // int\n\t    current_sum += 4;\n\t    sum += current_sum;\n\t    current_sum = 0;\n\t    current_align += 4 +", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate', 'manager_id2': False})\n    def holidays_second_validate(self, cr, uid, ids", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           else {\n                String[] filters = filterStr.split(\",\");\n                for (String filter : filters) {\n                    TcpAddress.TcpAddressMask mask = new TcpAddress.TcpAddressMask();\n                    mask.parse(filter);\n                    tcpAccept", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264,", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           if(rankCounts == null)\n                continue;\n            for(int i = 0; i < totalBuckets; ++i)\n            {\n                if(rankCounts[i] == 0)\n                {\n                    if(peptide", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "           [\"cargo\", \"build\"],\n            env=env,\n            cwd=base_path,\n            verbose=verbose)\n        if status:\n            return status\n        if release:\n            status = call(\n            [\"cargo\", \"install\", \"--path\", release_", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_int32_extension\\\".\",\n                \"[protobuf_unittest.optional_int32_extension]: 123\");\n           ", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "       if (o == this) {\n            return true;\n        }\n        if (o.getClass() != getClass()) {\n            return false;\n        }\n        AuthScope that = (AuthScope) o;\n        return LangUtils.equals(this.scheme, that.scheme", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets and sets the <see cref=\"IBOColSelector\"/>'s <see cref=\"IBOColSelector.ControlEnabled\"/>\n        /// </summary>\n        public bool ControlEnabled\n        {", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().newRow();\n\t\tparentRow.setSelectable(false);\n\t\tparentRow.setColTestName(orderInvestigationLiteVo.getInvestigation().getInvestigationIndex().getName());", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "           'Meta': {'ordering': \"['-last_updated']\", 'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "           return String.Format(\"Mixer Line {0} ({1})\", Name, TargetName);\n        }\n    }\n}\n```", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "   log.msg('Loading index from: {}'.format(args.index_file))\n    archive_index = load_archive_index(args.index_file)\n    args.func(archive_index, args)\n    log.msg('Successfully completed action')\n    sys.", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }, true), this.getScore(new double[]", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "\t\t\t\treturn base_type == null || base_type.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsReferenceType {\n\t\t\tget {\nNext line of code:\n\t\t\t\treturn base_type != null && base_", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, ResourceManager.Strings.Stash, gitItemStatuses);\n            }\n            Loading.Visible = false;\n            Loading.IsAnimating = false;\n            St", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "               return result, extension.get_critical()\n        return None, False\n    def _get_key_usage(self):\n        return self._get_extension('keyUsage')\n    def _get_extended_key_usage(self):\n        return self._get_", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "               notebooks[\"board\"].set_current_page(old_num)\n        headbook.connect(\"page-reordered\", page_reordered)\n    else:\n        headbook.connect(\"switch-page\", callback)\n    \n    # Connecting the dock to the headbook", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "\t\t\t\t\tif (i < snrs.size() - 1) {\n\t\t\t\t\t\ts += \";\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "       self.mosi_bits = [(m, b) for m in mosi for b in miso]\n        self.ss, self.es = ss, es\n        # Handle the command token.\n        if ptype == 'BITS':\n            self.handle_command_token", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "           edi_doc['__import_module'] = 'purchase'\n            edi_doc['__import_id'] = line.id\n            edi_doc_list.append(edi_doc)\n        return edi_doc_list\n    def edi_import(", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(771, 12);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(75", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "         cursor = limit - v_3;\n          // (, line 200\n          // delete, line 200\n          slice_del();\n          break;\n        } while (false);\n        break;\n      case 2:\n        // (, line 2", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "\t\t\t\tstill_there = (i != s.end());\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\ti->first->signal_emitted ();\n\t\t\t\tif (!v) {\n\t\t\t\t\tr", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   device = Device(deviceToken)\n    user = device.newUser(loginId, password)\n    user.login()\n    user.cardUpdate()\n    user.cardCategoryUpdate()\n    user.cardComboUpdate()\n    user.endTutorial()\n    user.", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "       return null;\n      RegistryKey jdk = java.OpenSubKey(\"JavaHome\");\n      if (jdk == null)\n        return null;\n      return jdk.GetValue(null).ToString();\n    }\n    private static String GetJavaHome(String resinHome", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   # The first value is the first value of the interval.\n    # The second value is the first value of the next interval.\n    # The second value is the first value of the next interval.\n    # The second value is the first value of the next interval.\n    # The second value", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openH", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "       for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor);\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.get(0));\n        assertEquals(2, neighbors.get(1));\n        assertEquals(", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {\n     ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name,\n                           permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    @Test\n    public void testHasPermission_actualPath() throws Exception\n", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "               throw SDOException.typeReferencedButNotDefined(targetNamespace, sdoTypeName);\n            }\n        }\n        return false;\n    }\n    private void initialize() {\n        schemaProject = new Project();\n        schemaProject.setName(rootSchema.", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       if self.want.ip in [None, '*'] and self.want.port != '*':\n            raise F5ModuleError(\n                \"Specifying a port number requires that an IP address be specified\"\n            )\n        if self.want.ip != self.have", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "       elif (index_elements[0] == \"FitScatter\"):\n            rv['fitScatter'] = float(index_elements[1])\n        elif (index_elements[0] == \"Mode:\"):\n            rv['mode'] = index_elements[1]\n        elif", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           ItemID = 0x1011 + (int)Resource;\n        }\n        private class InternalTarget : Target\n        {\n            private KeyRing m_KeyRing;\n            public InternalTarget(KeyRing keyRing)\n                : base(1,", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "           embedManifestDllAction(target, source, env)\n        else:\n            print \"No manifest file found for %s\" % target[0]\n    return 0\nembedManifestDllCheckAction = SCons.Action.Action('$MTSHLIBCOM')\nembedManifestEx", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "     if (split.length != 4) {\n        throw new RuntimeIOException(\"RegexNER line \" + lineCount + \" has \" + split.length + \" fields, but should have 4\");\n      }\n      List<Pattern> regex = new ArrayList<>();\n      for (String s :", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "\t\t\tvalue10 =\n\t\t\t\tdomainFactory.getCareContext(valueObject.getCareContext().getID());\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\tdomainObject.setCustomID(valueObject.getCustomID", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           try:\n                env = SCons.Environment.Environment()\n                env.SetDefault(self.env_variables)\n                env.SetDefault(self.keyword_paths)\n                env.SetDefault(self.env_variables)\n                env.SetDefault", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text.startswith('Add Automate Method') and\n            self.location.is_displayed and\n            self.inline_name.is", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           if (m_MapOverride != -1)\n                map = m_MapOverride;\n            if (m_IDOverride != -1)\n                sspawnid = m_IDOverride.ToString();\n            if (m_IDOverride != -1)\n                s", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "   assert lattice.cbuffer.get_object(bm1_index).out_address != 0\n    assert lattice.cbuffer.get_object(bm2_index).out_address != 0\n    assert lattice.cbuffer.get_object(bm0_index).out_", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "           throw new Exception(\"Action class not found: \" + className);\n        }\n        return result;\n    }\n    public IAction getActionObject(String className, String[] filterPath) throws Exception {\n        IAction result = null;\n        String classPath = getActionProperty(className", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           errorStatus[0] = execute(getSelectedResources(), new IProgressMonitor() {\n                public void beginTask(String name, int totalWork) {\n                    ProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());\n                    dialog.run(true, true, getOperation", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t\tif (value <= 0x7F)\n\t\t\t\treturn (uint)1;\n\t\t\telse if (value <= 0x3FFF)\n\t\t\t\treturn (uint)2;\n\t\t\telse if (value <= 0x1", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "\t\treturn super.init(smi, sdi);\n\t}\n\t\n\tpublic void dispose(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(AggregateRowsMeta)smi;\n\t\tdata=(AggregateRowsData)s", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is not clean.\")\n    @error_context.context\n    def verify_guest_up_after_", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "               o = cls.newInstance();\n                if (o instanceof LCMDataInputStream) {\n                    ((LCMDataInputStream)o).read(dins);\n                } else {\n                    dins.read(o);\n                }\n            } catch (Exception", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"avatar\" in cmd.parameters:\n                userstate.avatar = cmd.parameters[\"avatar\"]\n            if \"avatar_url\" in cmd.parameters:\n                userstate.avatar_", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       service.submit(pub);\n        service.shutdown();\n        service.awaitTermination(10, TimeUnit.SECONDS);\n        assertThat(rc.get(), is(15));\n    }\n    @Test\n    public void testSubscribeIssue554", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "\t\t\tint beg = la.pos; int col = la.col;\n\t\t\twhile (StartOf(13)) {\n\t\t\t\tif (StartOf(14)) {\n\t\t\t\t\tGet();\n\t\t\t\t} else {\n\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "\t} while (parent instanceof TagImpl);\n\tif (parent instanceof Grid) {\n\t    ((Grid) parent).addColumn(column);\n\t}\n\treturn EVAL_BODY_INCLUDE;\n    }\n    @Override\n    public int doEndTag() throws", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringString_ ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\", new object[] { 2 });\n\t\t\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       self.fm.run(['ar', 'x', au_flags, one_file.path],\n                     refresh=refresh,\n                     descr=descr)\n# ===================================================================\n# Custom commands\n# ===================================================================\nclass custom(Command):", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_name ==", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "               new Version(1, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1},\n                        new ECBlocks(7, new ECB(1, 12)),\n                        new ECBlocks(1,", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "# -*- coding: utf-8 -*-\nfrom amoco.config import conf\nfrom amoco.logger import Log\nlogger = Log(__name__)\nlogger.debug(\"loading module\")\nimport re\ntry:\n    from pygments.token import Token\n    from pygments.style import", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n    public static void changeGroupType(PlayerGroup group, TeamType type) {\n       ", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "\t\t\t\t\t\t\" but this queue has {1} LEDs).\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\t// Add the frame to the queue\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.En", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       for (Iterator<String> iterator = devices.iterator(); iterator.hasNext();) {\n            String device = iterator.next();\n            String ipAddress = ipAddressMap.get(device);\n            int model = liveModelMap.get(device);\n            Tuner tuner = new", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    Dialog.Add(n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                       m_key[i] = new ExodusActivation();\n                    else\n                        m_key[i] = new BaseActivation();\n\t\t\t\t\tm_key[i].Owner = from;\n\t\t\t\t\tm_key[i].Activ", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                int i = x + y * xSizeP;\n                // Left bottom corner\n                newVertices[i] = new Vector3(leftBottomCorner.x + x *", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "       ctx = Context()\n        [ctx.push(x) for x in keys]\n        def make_it(feat, idx):\n            f = Feature(ctx, idx)\n            geom, attrs = feat\n            f.add_geometries_from_wkt(ge", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "\t\treturn requestManaExact(stack, player, cost, remove) / multiplier;\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to lower the", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\t\t\tbyte[] pb = kdf.Compute(p, pbMsg);\n\t\t\tif(!MemUtil.ArraysEqual(pb, pbExpc))\n\t\t\t\tthrow new SecurityException(\"Argon2-1\");\n\t\t\t// ======================================================\n\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "           dc.number = PhoneNumberUtils.formatNumber(p.readString());\n            dc.type = PhoneNumberUtils.formatNumber(p.readString());\n            dc.subType = p.readInt();\n            dc.isRinging = p.readInt() != 0;", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "                       16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPARE", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "           {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTrace", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "       if (this.attachmentFile == null) {\n            if (other.attachmentFile != null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n        if (this", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "   assert f('+5..', last) == (d(2014,1,30, 22,21), now)\n    assert f('-5..', last) == (d(2014,1,31, 19,47", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\trawResult = call(API_METHOD_ADD, testInt1, testInt2);\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog2 = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog2.show(", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       if (graph.isAncestorOf(x, y)) {\n            return true;\n        }\n        List<Node> path = new ArrayList<>();\n        path.add(x);\n        for (Node b : graph.getAdjacentNodes(x)) {\n           ", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "                                   .Distance(position.To2D()) <= spell.Width + 100 &&\n                                    minionPrediction.CastPosition.To2D()\n                                        .Distance(position.To2D()) <= spell.Width + 100)\n                              ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LD_LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GONK_B2G\"] = self.", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "\t\t\t\tHistory.Add(user, msg);\n\t\t\t\tif (History.Count > WorldChat.CMOptions.HistoryBuffer)\n\t\t\t\t{\n\t\t\t\t\tHistory.Remove(History.Keys.First());\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "       de = Locale.objects.get(code='de')\n        repo = self._setup(de, Action.ACCEPTED, Action.ACCEPTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "                       if (mobiles[i] == from)\n                            continue;\n                        if (mobiles[i].AccessLevel == AccessLevel.Player)\n                        {\n                            if (from.AccessLevel == AccessLevel.Player)\n                            {\n                                if (", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "       this.channel.close();\n    }\n    public void close(IChatBaseComponent ichatbasecomponent) {\n        this.a();\n        if (this.n != null) {\n            this.n.a(ichatbasecomponent);\n        }\n    }\n   ", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "               if per in z_dict[z_key].keys():\n                    z_arr[p_index, kk, 0] = z_dict[z_key][per][0]\n                    z_arr[p_index, kk, 1] = z", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "\t\t\tif (kind == LNodeKind.Block)\n\t\t\t\treturn MatchesBlock(candidate, pattern, ref captures, out unmatchedAttrs);\n\t\t\telse if (kind == LNodeKind.Call)\n\t\t\t\treturn MatchesCall(c", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "           for path, tests in iteritems(type_paths):\n                for test in tests:\n                    test_cls.from_json(tests_root, test, path, self)\n                    source_files[path] = test.source_file\n        self._data = {", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.setScript(null);\n            compiledScript = null;\n        }\n    }\n    private Binding createBindingForCompilation() {\n        final Binding binding = new Binding();\n        binding.setVariable(\"node", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           'subs': [(6, 0, [\n                self.env['test_testing_utilities.sub3'].create({\n                    'name': 'a'\n                }),\n                self.env['test_testing_utilities.sub3'].create({", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "# from settings_local import *\n# from settings_local import *\n# from settings_local import *\n# from settings_local import *\n# from settings_local import *\n# from settings_local import *\n# from settings_local import *\n# from settings_local import *\n", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\tif (obj instanceof ims.ocrr.vo.OrderInvestigationForStatusChangeVo)\n\t\t{\n\t\t\tims.ocrr.vo.OrderInvestigationForStatusChangeVo other = (ims.ocrr.vo.OrderInvestigationForStatusChangeVo", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found, asList(stacks[0], stacks[3]));\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedTagsAndLimit() throws Exception {\n        stacks[", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "\t\t\t\t\t\tif (licence.isDomainSoftware()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n            writer.close();\n            reader.close();\n            objectToXMLDocumentTest(testDocument);\n       ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   if (colisionList.Count > 0)\n                    {\n                        extendedFarmLocation = colisionList[0];\n                        break;\n                    }\n                    extendedWillHit++;\n                }\n                int shortenWillHit = 0;\n", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name);\n        }\n        else {\n            out.writeBoolean(true);\n            out.writeInt(found.identifier);\n        }\n        out.flush();\n        out.close();\n        in.close", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method =", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\tsuper.setContextMenu(new ContextMenu(context, form.getFormInfo(), componentIdentifier));\n\t\t// Context Menus\n\t\tsuper.setContextMenu(new ContextMenu(context, form.getFormInfo(), componentIdentifier));\n\t\tsuper.setControl(control);", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "           FileSystemNodeManager.setFolder(tree, overallNodeName, connectionData, disableTreeSelection);\n        }\n    }\n}", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                   if (pop.Children[i] is PlaceBase)\n                        plcs.Push(pop.Children[i] as PlaceBase);\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret=UnityEngine", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "   assert change_index(Sum(x, (x, a, b)), (x, x, x)) == Sum(x, (x, a, b))\n    assert change_index(Sum(x, (x, a, b)), (x, x, x)) == Sum(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "       #calculate the p2 point, which is the third point of the triangle\n        #the p2 point is calculated by theta and phi\n        #theta is the angle between the two anchors\n        #phi is the angle between the p2 point and the line connecting the two anchors", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName) {\n    return mock.getAvailCom", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                case Param.CampusName:\n                    c.CampusName = Token2Csv();\n                    break;\n                case Param.CampusStatus:\n                    c.CampusStatus", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"Width: {0}\", ide.width);\nConsole.WriteLine (\"Height: {0}\", ide.height);\nConsole.WriteLine (\"ColorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"Reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "     return context.getString(resourceOne, name);\n    }\n    if (recipients.size() == 2) {\n      String name1 = recipients.get(0).toShortString();\n      String name2 = recipients.get(1).toShortString();\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "\t\t\t\tcomboLabelPosition.select(position.ordinal());\n\t\t\t\tlblLabelPosition.setText(\"Label Position: \" + position.name());\n\t\t\t}\n\t\t\n\t\tprivate Position getPosition() {\nNext line of code:\n\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       path_info = environ['PATH_INFO']\n        for path_prefix, app in self.apps:\n            if path_info.startswith(path_prefix):\n                return app(environ, start_response)\n        raise NotImplementedError(\n            'No application", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "           throw new NotSupportedException();\n        }\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                return res[0] or 0.0\n        class SalaryRule(BrowsableObject):\n\"\"\"            \"\"\"a class that", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "                   MessageBox.Show(\"No FOG Services were found!\");\n                    this.Close();\n                }\n            }\n        }\n        private void btnSave_Click(object sender, EventArgs e)\n        {\n            if (isConfigFilePresent())\n            {\n              ", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "       Parameter p = new ParameterImpl();\n        p.setParameterCode(\"DEPTH\");\n        p.setParameterValue(depth);\n        pf.addParameter(p);\n        //EXCLUSION_REGEXP\n        p = new ParameterImpl();\n        p.setParameter", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "       #Mass function\n        #marr = np.logspace(np.log10(mmin), np.log10(mmax), mspace)\n        #marr = np.logspace(np.log10(mmin), np.log10(mmax", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "\t\t\tif (window.IsVisible)\n\t\t\t\twindow.Hide();\n\t\t\telse\n\t\t\t\twindow.Show();\n\t\t}\n\t\tprivate void ShowOrHide(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "                   Driver driver = idlePool.Dequeue();\n                    if (driver.IdleSince.AddMinutes(settings.IdleTimeout) < now)\n                    {\n                        oldDrivers.Add(driver);\n                        continue;\n                    }\n                ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   return re.search(pattern, frozen_output) is not None\n@task\n@timed\ndef install_python_prereqs():\n    \"\"\"\n    Installs Python prerequisites\n    \"\"\"\n    if no_prereq_install():\n        print(NO_", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "                   for n in xrange(params[0]['nbins'])]\n            if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n              ", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "\t\t\tfor (int i = 0; i < MAX_LOG; i++) {\n\t\t\t\trsp.setData(tag.readRecord(sfi));\n\t\t\t\tif (rsp.isOkey()) {\n\t\t\t\t\taddLog24(rsp", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "           _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = GL.CreateProgram();\n            GL.BindAttribLocation(Program, 0, 0);\n", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "               this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList new", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "\"\"\"\nclass ACE(Parser):\n    def __init__(self, *args, **kwargs):\n        Parser.__init__(self, *args, **kwargs)\n        self.block_type = 0\n        self.block_size = 0\n        self.body_size", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tmodel = Model( Data( sys.argv[ 1 ] ) , sys.argv[ 2 ] )\n\t\tmodel.setnetwork( model.network , model.topological , True )\n\t\tmodel.score()\n\t\tprint \"Score = %s\" % model.", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           new LayoutAnimationController(set, 0.25f);\n        mListView.setLayoutAnimation(controller);\n    }\n\t\n\t/**\n\t * Fill the list with bookmarks.\n\t */\n\tprivate void fillData() {\n\t\tmNavigationList.clear", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               l.successor = JSR;\n            }\n            if (l.status & Label.VISITED) == 0) {\n                l.status |= Label.VISITED;\n                l.addToSubroutine(id, nbSubroutines", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           if (Utility.Random(100) < chance)\n                res = EnhanceResult.Success;\n            else\n                res = EnhanceResult.Failure;\n        }\n    }\n}\n```", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "               object obj = this.ViewState[\"SubmitText\"];\n                return (obj == null) ? true : (bool)obj;\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        /// <summary", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "       self.transport._verify_key(self.transport.host_key, mic_token)\n        self.transport._set_K_H(self.f, m.get_string())\n        self.transport.gss_kex_used = True\n        self.transport._", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.textureArray[textureHash].getImage().selectTexture();\n              ", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "       var = (var, var)\n    return var\ndef _verify_list(var, name):\n    \"\"\"Ensure that parameter is list-like of numbers.\n    Used to prevent a single number from being interpreted as a list.\n    \"\"\"\n    if isinstance(var, (list", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "       d.width = font.stringWidth(getText()) + 20;\n        d.height = font.getSize() + 20;\n        return d;\n    }\n    \n    @Override\n    public void setText(String text) {\n        super.setText(", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "QUEST.addStartNpc(WK_ROMP)\nQUEST.addTalkId(WK_ROMP)\nQUEST.addKillId(MOBS)\nQUEST.addConditions(State.STARTED,MOBS)\nQUEST.addConditions", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "           RosterStorage rosterStorage = protocol.getRosterStorage();\n            RosterHelper rosterHelper = rosterStorage.getRosterHelper();\n            rosterHelper.updateLastMessageTransmitted(contact, query.getLastMessageTransmitted());\n        }\n    }\n    private", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "       for met in self.metabolites:\n            met._model = self\n        for gene in self.genes:\n            gene._model = self\n        for rxn in self.reactions:\n            rxn._model = self\n    def trim(self, genes=None,", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(Iterator it = beans.iterator(); it.hasNext();)\n\t\t{\n\t\t\tims.clinicaladmin.vo.beans.TumourGroupListVoBean bean = (ims.clinicaladmin.vo.beans.TumourGroupListVoBean", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\tif (socketAdapter != null) {\n\t\t\tsocketAdapter.dispose();\n\t\t}\n\t\tsocketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.SetFieldKey(HighestNumber + 1);\n        }\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscoresMem \t= new int[length];\n\t\tchar[] \t\tstructure \t= protein.getStructure();\n\t\t\n\t\tif (pssm.getLength() != structure.length)\n\t\t{\n\t\t\tErrorUtils", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(\n                type_name,\n                entry_name,\n                entry_value,\n                displayname,\n                desc\n            )\n        return entries\n    #---------------------------------------------------------------------------\n    def", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "   if header not in exposedHeaders:\n        exposedHeaders += ', ' + header\n    response['Access-Control-Expose-Headers'] = exposedHeaders", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 * 60 + (double)num1 * 60)) / ", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "\t\t\t\twhile(foundBottom){\n\t\t\t\t\tfoundBottom = false;\n\t\t\t\t\tfor(int i=0; i!=lines.length; i++){\n\t\t\t\t\t\tif(lines[i].contains(left, cy) || lines[i", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
