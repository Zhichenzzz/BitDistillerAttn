{"pred": "   private final transient JsonSerializer serializer;\n    private final transient JsonRoutingTableSerializer routingTableSerializer;\n    private final transient JsonDHTSerializer dhtSerializer;\n    private final transient JsonSerializer routingTableSerializer;\n    private final transient JsonSerializer dhtSerializer;", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mEffects.add(new NoEffect());\n        mEffects.add(new ContrastBrightnessAdjustmentEffect());\n        mEffects.add(new FlowAbsEffect());\n        mEffects.add(new FlowAbsSubEffect());\n        mEffects.add(new QrMarker", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n    rounds = 1\n\n    @classmethod\n    def eval(cls, x):\n        return tuple([", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "               new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, MessageEvent::fromCommand, this::queueEvent));\n", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private ImmersiveEffect mImmersiveEffect;\n    private StackEffect mStackEffect;\n    private FlowAbsEffect mFlowAbsEffect;\n    private FlowAbsSubEffect mFlowAbsSubEffect;\n    private Q", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "   __slots__ = ['uri']\n\n    def __init__(self, uri):\n        self.uri = uri\n\n    def __str__(self):\n        return self.uri\n\n    def __repr__(self):\n        return 'URI(%s)' % self.uri", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "   private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器管理器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务元数据管理器\n     */\n    private TaskMetaInfo", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN,\n        SESSION_ID, USER_PUBLIC_KEY_SIGN_HEX, VENDOR_CERTIFICATE);\n\n    assertEquals(new", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //save private and public Key to storage\n            rsa.saveRSAKeys", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "         if num_children == expected_children_num:\n            for i in range(num_children):\n              cstr_node.children[i] = convert_ast_constraint(children[i])\n              process_children(cstr_node.children[i], children[i])", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setData(Uri.parse(url));\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static void playVideoIntern(TDActivity activity, Bundle args) {\n        if (activity != null) {\n            Log.", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       self.assertRaises(TypeError, InterLayerPipeline,\n                            InputLayer(1, 1, 1, 1),\n                            ConvLayer(1, 1, 1, 1, 1, 1, 1, 1, 1,", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "           self.acctA = FakeAccounting(self.global_config, self.cId, self.cGUID, self.remote_ip, self.cli, self.cld, self.uaA.state, self.uaA.state.rtime, self.uaA", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\n    class User(BaseModel):\n        id = Column(String, hash_key=True)\n        email = Column(String)\n        name = Column(String)\n        joined = Column(DateTime, dynamo_name=\"j\")\n\n        def __init__(self, **kwargs", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   private static final String TAG = \"MovieInfoFragment\";\n    @BindView(R.id.movie_info_recycler_view) RecyclerView movieInfoRecyclerView;\n    @BindView(R.id.movie_info_reviews_", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "       String message = AppSettings.getFindPeopleAllowedMessage();\n        String email = AppSettings.getUserEmail();\n        String name = AppSettings.getUserName();\n        String avatarUrl = AppSettings.getUserAvatarUrl();\n        PostLocationDataBody postLocationDataBody =", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "               writeResponse(SUCCESS, CREATE_MBEAN, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CRE", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "\n\n@method(infix('!', bp=72))\ndef evaluate_simple_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n    for context.item in context.inner_focus_select(", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n        await wild.create_task_tuple(wild.monitor_status())\n\n        await wild.monitor_task\n\n        await wild.monitor_status()\n\n        await wild.monitor_status()\n\n        await wild.monitor_status()\n\n        await wild.monitor", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": " assert isinstance(doppler, DopplerSine)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.amplitude_mps == 50.\n  assert", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "       assert self.redlock.locked()\n        time.sleep(self.redlock.auto_release_time * 2)\n        assert not self.redlock.locked()\n        assert not self.redlock.acquire()\n        assert not self.redlock.locked()\n", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "               Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);\n                intent.putExtra(Constant.PARTICIPANT, participant);\n                startActivityForResult(intent, 0, BaseActivity.ActivityAnimation.SLIDE_LEFT);\n               ", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "   if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n    # Load data\n    if c['vocab_def']:\n        vocab_", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": "   def _calg(self, calg):\n        self._calg = calg\n        self.update_hlen()\n\n    @sdproperty\n    def data(self):\n        return self._data\n\n    @data.register(bytes)\n    def _data(", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       #cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        #cellSize = findCellSize(imgshape, verbose = verbose, out = out, **parameter);\n        #cellSize = findCellSize(imgshape,", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);\n        } else if (accuracy == Accuracy.GREAT) {\n            Assets.greatTapSound.play(GlobalConfiguration.feedbackVolume / ", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "       return ConeSettings(self._sptr, \"Sound\")\n\n    @property\n    def threed_orientation(self):\n        \"\"\"The direction the 3D projection cone is facing.\n\n        :type: VECTOR\n        \"\"\"\n        return VECTOR(self", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "                   UsageEncryption.OWNER_SYMMETRIC,\n                    OperationMode.PKCS5,\n                    EncryptionAlgorithmCoded.AES256,\n                    algorithm_parameter_name=AlgorithmParameterName.IV,\n                    algorithm_parameter_", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "               if (query.queryType == RequestType.INSERT) {\n                    ((InsertMeta) query).postProcess(dbAccessor);\n                }\n                if (query.queryType == RequestType.DELETE) {\n                    ((DeleteMeta) query).postProcess(dbAccessor", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "                           if (env.combExpReg[i] != null) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                } // USE_SUBEXP_CALL\n            } else {\n                env.numCombExpCheck", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "       if storage_type in STORAGE_TYPES:\n            self._storage_type = storage_type\n        else:\n            raise PyOrientBadMethodCallException(\n                storage_type + ' is not a valid storage type', []\n            )\n        return self\n\n\n", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(\n            CheckedSupplier<$Argument2> givenStep,\n            CheckedConsumer<$Argument2> givenStep2) {\n        preparation.recordGiven", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "\t\tMessage msg = XmlUtil.fromXml(xml, Message.class);\n\t\tif (msg.isEvent()) {\n\t\t\tAbstractEvent event = msg.asEvent();\n\t\t\tlog.info(\"event >>> \" + event);\n\t\t\treturn XmlUtil", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if not os.path.isdir(os.path.join(file_path, 'info_')):\n        print u'\\n[INFO] 开始运行应用...'\n        # 获取 apk 文件的信息\n        app_info = get_ap", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   url(r'^save-pipeline-config$', login_required(ajax_save_pipeline_config),\n        name=\"ajax-save-pipeline-config\"),\n    url(r'^run-pipeline-config$', login_required(ajax_run_pipeline_config),\n", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "       config_actor = ConfigActor(999, delay_seconds=2, work_dir=config_file)\n        config_actor.start()\n        gevent.sleep(1)\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "\t\t\n\t\tResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "                           ShareUtil.sharePicture(mActivity, picUrl, picture.getComment_author(), picture.getComment_ID());\n                            break;\n                        case 1:\n                            IntentHelper.toCommentListActivity(mActivity, picture.getComment_ID());\n                ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "   try {\n      return process.await(expectedExitCodes);\n    } catch (CommandFailureException e) {\n      throw new IosDeviceException(this, e);\n    }\n  }\n\n  /**\n   * Waits for a process to terminate and returns the result of", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\n    @sdproperty\n    def hashalg(self):\n        return self._hashalg\n\n    @hashalg.register(int)\n    @hashalg.register(HashAlgorithm)\n    def hashalg_int(self, val):\n        self._hashalg = HashAlgorithm(", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "       elif context.axis == 'attribute':\n            if isinstance(item, (AttributeNode, TypedAttribute)):\n                yield item\n            elif is_element_node(item):\n                yield item\n\n    else:\n        # XSD typed selection\n        for item in context.", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "       StatementExecution se = (StatementExecution) qe;\n        assertEquals(\"statement\", se.getQuery());\n        assertEquals(1, se.getParamIndexes().size());\n        assertEquals(1, se.getParamNames().size());\n        assertEquals(1, se.getSetParamsBy", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "   @command(pass_context=True, category='Bot Info', aliases=[\"raid-city\", \"rc\"])\n    @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, *city):\n        \"\"\"\n        **!raid", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        StatementExecution se = new StatementExecution();\n        se", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "       self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25))\n        self.assertEqual(date_string_to_date(\"11/12/2012\"),", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getInstance().unregister(this);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState)", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "\t\t\t\t\t\tfor j in range(num_contrasts):\n\t\t\t\t\t\t\tsaveauto(positive_data[j],\n\t\t\t\t\t\t\t\tmasking_array,\n\t\t\t\t\t\t\t\tmaskname,\n\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "#\n# 16-bit address is the 16-bit PAN ID\n# 64-bit address is the 64-bit short address\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "     'no_members': Counter,\n    }\n\n  def __init__(self, next_provider, sink_properties, global_properties):\n    self._next_sink_provider = next_provider\n    self._sink_properties = sink_properties\n    self._global", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "               ResponseSyncAdapter.class,\n                OhmletActivity.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                SurveyActivity.SurveyPromptLoader.class,\n                SurveyActivity.class,\n                SurveyActivity.", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "               continue\n            \n            # Send the ADR request\n            log.info(\"Sending ADR MAC Command\")\n            command = self._createLinkADRRequest(device)\n            self._sendMACCommand(device.deveui, command)\n            \n        self.adrprocessing", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "       lMS.addTrack(factory.createVideoTrack(\"ARDAMS\",\n            appRtcClient.videoConstraints(), null));\n      } else {\n        lMS.addTrack(factory.createVideoTrack(\"ARDAMS\", null, null));\n      }\n      videoSource =", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "       nc.send_message_with_protocol(protocol, 'foo bar baz')\n        protocol.send_string.assert_called_once_with('foo bar baz')\n\n    def test_send_message_with_protocol_with_bad_protocol(self):\n", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "       if (mPublicRoomsListList == null) {\n            return;\n        }\n        mPublicRoomsListList.clear();\n        mPublicRoomsListList.addAll(mPublicRoomsListList);\n        mAdapter.notifyDataSetChanged();\n    }\n\n", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "\n        docker_config.add_environment_variables(\n            {\n                \"CLICK_EXEC\": docker_config.execute,\n                \"CLICK_EXEC_PARAMS\": self.config.app_name,\n            }\n        )\n\n        docker_", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "                   deviceGcmToken = FirebaseInstanceId.getInstance().getToken();\n                    stopGCM();\n                    stopHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       chim_detect = ChimeraDetector(raw_bp_graphs[synteny_sizes[ID_SMALLEST]],\n                                       target_sequences,\n                                       phylogeny,\n                                       naming_ref,\n                                       args", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       mock_simulator_data_datagram = MockSimulatorDataDatagram()\n        mock_simulator_data_datagram.simulation_time = 1.0\n        mock_simulator_data_datagram.latitude = 1.0\n        mock_simulator", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "       if (packet.getSubType() == PacketType.MESSAGE) {\n            onMessage(packet, client, transport);\n        } else if (packet.getSubType() == PacketType.CONNECT) {\n            onConnect(packet, client, transport);\n        } else if", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "\n    # create a publisher to send actions to all subscribers\n    publisher = Publisher()\n\n    # create a journal to store actions\n    journal = DiskJournal(basedir, system_data_path)\n\n    # create a network object to send actions to other systems\n   ", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "   public PersonalVulnsWindow() {\n        initComponents();\n        // Set the window title\n        setTitle(\"Personal Vulnerabilities\");\n        // Set the window icon\n        setIconImage(new ImageIcon(getClass().getResource(\"/com/cornerpirate/report", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   visitBooleanOp(new VisitOrd3(n), opToOccur.get(op);\r\n\r\n    return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r\n \n", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "       assertThat(jobRequest.isPeriodic()).isFalse();\n        assertThat(jobRequest.isStarted()).isFalse();\n        assertThat(jobRequest.isTransient()).isFalse();\n        assertThat(jobRequest.getStartMs()).isEqualTo(60_000L);\n", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "           ref_time = self.img_handle.ref_time\n\n        else:\n            ref_time = self.config.ref_time\n\n        # Save reference time to JSON file\n        json_dict['ref_time'] = ref_time\n\n\n        # Save the picks", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn items", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "\tif (model.getSettings().isSetUp() && model.getSettings().isTearDown()) {\r\n\t\ttestmethodPrefix = \"setUp\";\r\n\t\ttestmethodPostfix = \"tearDown\";\r\n\t} else if (model.getSettings().isSetUp", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "   Iterable<Board> its = SMTHHelper.getInstance().wService.getAllBoardsFromWWW().flatMap(new Function<ResponseBody, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull ResponseBody responseBody) throws Exception {\n        try {", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "           events.append(Event(e))\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data)\n\n    # Provider\n    def list", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "\n    def _read(self, header, data):\n        raise error(\"Not implemented\")\n\n    def _write(self, config):\n        raise error(\"Not implemented\")\n\n    def _prepare_data(self, fileobj, start, available, v2_version, v2", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new BlockLockerCommand(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "   api = DERBMDATA(args.apikey)\n    if not api.get_data(**{'SettlementDate': args.date or date.today().strftime(\"%Y-%m-%d\"),\n                           'SettlementPeriod': args.settlement", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "           textareaMessage.setText(httpMessage.getRes().getResponse());\n        } else {\n            textareaMessage.setText(\"\");\n        }\n        \n        if (httpMessage.getReq().hasRequest()) {\n            textareaMessage.setText(httpMessage.getReq().getRequest", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   private void createMetricChartPanel(\n            int metric,\n            DatasetGenerator datasetGenerator,\n            List<GCStatsChartPanel> list) {\n        ChangingCategoryDatasetWithTTG dataset =\n                datasetGenerator.newCategoryDatasetWithTTG(metric, false);\n        GC", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "\t\tif args.id:\n\t\t\tprint 'Converting minimac data to genotype per subject files'\n\t\t\tfor i in range(len(args.genotype)):\n\t\t\t\tif args.genotype[i].get_id()=='minimac", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EqualizeTransformation(),\n                    new DiffusionTransformation(),\n                    new DiffusionTransformation(),\n                   ", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\tpublic static A a(Url url) {\n\t\treturn new A(url);\n\t}\n\tpublic static A a(Url url, String text) {\n\t\treturn new A(url, text);\n\t}\n\tpublic static A a(Url url, String text, Attribute", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "       if post.user.username != username:\n            messages.error(request, 'You are not allowed to access this post.')\n            return redirect(reverse('ploghubapp:home_page'))\n        if post.user.username == username:\n            post.upvotes +=", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "   assert dump_key(user) == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"foo\"}}\n    assert extract_key(user_key) == user\n", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "\ndef getAS2PuffleString(client, puffles):\n    puffles_as2_str = list()\n    for puffle in puffles:\n        p_id, p_type, p_sub_type, p_name, p_adopt, p", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": " private final static String[] fieldNames = new String[] {\r\n    \"title\", \"body\", \"author\", \"date\", \"subject\", \"text\", \"content\", \"text_t\", \"content_t\", \"text_s\", \"content_s\", \"text_i\", \"content_", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "           Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n     * Example", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n    private PreferenceCategory preferenceCategory;\n\n    private Preference preferenceSound;\n    private Preference preferenceSoundEffects;\n    private Preference preferenceSoundEffectsVolume;\n   ", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);\n        contentValues.put(JobStorage.COLUMN_INTERVAL_MS, 10_000L);\n        contentValues.put(JobStorage.COLUMN", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # Read the header\n        self.vid_file.seek(0)\n        self.vid.read(self.vid_file)\n\n        # Read the first frame\n        self.", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "\t\tPacketDispatcher.sendTo(new PacketConfigSync(), player);\n\t}\n\n\tpublic static void sync(EntityPlayer player)\n\t{\n\t\tFMLCommonHandler.instance().getMinecraftServerInstance().getConfigurationManager().syncWorld(player.worldObj);", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       }).then(new OnComplete<Channel>() {\n            @Override\n            protected void doOnComplete(final Channel channel) throws Exception {\n                context.handleConnectionState(reconnecting);\n            }\n        }).then(new OnFailure<Channel>() {\n            @Override\n           ", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "       //bgTasksRunning.set(0);\n        //bgTasksRunning.getAndIncrement();\n        //Log.d(this.getClass().getSimpleName(), \"Started fragment: \" + this.getClass().getSimpleName() + \" bgTasksRunning: \" + bgTasksRunning.", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),\n    (\"", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "       if item is None:\n            yield context.root\n        elif is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=(0, 1), bp=80, label='kind test'))\ndef select_comment", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "           exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n\n            # Raise the exception\n            raise PyOrientCommandException(\n                exception_message.decode('utf-8'),\n              ", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  Const message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv',", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "\t\t\t\t\t\tISelection selection = new StructuredSelection(selectedCells.iterator().next());\n\t\t\t\t\t\tfireSelectionChanged(new SelectionChangedEvent(selection));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "       new Colourizer(Colourizer.Color.RED.getCode(),\n        new Colourizer(Colourizer.Color.YELLOW.getCode(),\n        new Colourizer(Colourizer.Color.BLUE.getCode(),\n        new Colourizer(Col", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "       self.beg_alt = np.arcsin(self.beg_vect[2]/EARTH.POLAR_RADIUS)\n        self.end_alt = np.arcsin(self.end_vect[2]/EARTH.POLAR_", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "   I.randomize_parameters(vmin=0.0, vmax=0.01)\n    I.set_field()\n    I.draw()\n    I.draw_ortho(im, H, cmap='RdBu')\n    I.register_events", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "   platepar.rot_wrt_horizon = rotationWrtHorizon(platepar.RA_d, platepar.dec_d, platepar.az_centre, \\\n        platepar.alt_centre, platepar.lat, platepar.lon)\n\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       ObservableRegistry.getObservable(ChatSettingsInfo.class).notifyFragments(chat);\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        chat = (Chat) getArguments().get", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "           fab.show();\n        }\n    }\n\n    @UiThread\n    protected void handleError(String error) {\n        Toast.makeText(getContext(), error, Toast.LENGTH_SHORT).show();\n        Flow.get(getContext()).goBack();\n    }", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "       bind(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritPushExtension.class);\n        bind(GerritToolWindow.class);\n        bind(GerritUiModule.class);\n       ", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "   private HashMap<String, List<String>> mMap;\n    private List<FilterType> mFilterTypes;\n    private List<FilterUrl> mFilterUrls;\n    private List<FilterType> mFilterTypes;\n    private List<FilterUrl> mFilterUrls;\n", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": "               new RegisterFragment.RegistrationParam(success, email, password, message));\n    }\n}\npackage de.fau.cs.mad.yasme.android.asyncTasks.server;\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "           if (mWallpaper != null) {\r\n                if (mWallpaper.isCropped()) {\r\n                    mWallpaper.setCropped(false);\r\n                    mWallpaper.setCropped(true);\r\n                    mWallpaper.setCropped", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": "\n        for i in range(0, len(tris), 3):\n            self.svg.n_tris += 1\n            tri = tris[i:i+3]\n            self._render_triangle(tri, fills[i//3])\n\n   ", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "\t\tFunctionSymbol s = new FunctionSymbol(currentScope, fhead.ID().getText(),\n\t\t\t\t\t\t\t\t\t\t\t  getArgList(fhead), getType(fhead));\n\t\tMMethod m = new MMethod(s);\n\t\tclassIn", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "\t\t\t\t\t\treturn Observable.empty();\n\t\t\t\t\t}\n\t\t\t\t\treturn Api.get().search(query)\n\t\t\t\t\t\t\t.compose(onIo())\n\t\t\t\t\t\t\t.map(FeedItemsAdapter::from", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   private CodeGeneratorFactory codeGeneratorFactory;\n\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        return new HashSet<>(parserFactories.stream().map(PathParserFactory::getSupportedAnnotation).collect(Collectors.toSet()));\n    }\n\n   ", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "   ilm = ilms.Ilm(ilmvals=ILMVALS, bkgvals=BKGVALS, zscale=0.89)\n    ilm.set_params(p.zscale)\n    ilm = ilms.IlmCollection([il", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "                   if (getZxidFromName(snapshots.get(i).getName()) >= zxidLong) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n\r\n                    i--;\r\n                }\r\n               ", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       return isinstance(instance, (int, float, Decimal, Duration, AbstractDateTime)) and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "   def keyclass_int(self, val):\n        self._keyclass = [val]\n\n    @keyclass.register(RevocationKeyClass)\n    def keyclass_revocationkeyclass(self, val):\n        self._keyclass = [val]\n\n    @", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "           manager = mp.Manager()\n            error_dict = manager.dict()\n            return_queue = manager.Queue()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = compile_information_func(", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   #!/usr/bin/env python\n\n\n# Segment containing JPEG meta-data\nSeg_dict = IANA_dict({\n    \n    # reserved markers\n    0x01 : ('Temporary private use in arithmetic coding', 'TEM'),\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "   # 2. background\n    bkg = np.random.randn(POS.shape[0]) * 0.001 + 0.0001\n    # 3. illumination\n    ilm = np.random.randn(POS.shape[", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n    private Commit", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "       model = Progress\n        fields = ['component', 'area', 'value', 'value_unit']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='iexact')\n\n    class Meta:\n       ", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           return SearchMenuPage()\n        if pageletId == 'SearchHistoryPage':\n            return SearchHistoryPage(self._createSearchHistory(context))\n        if pageletId == 'RubricsPage':\n            return RubricsPage()\n        if pageletId == 'Rubric", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == NormalRateConfig.GPS.L1.INDEX\n  assert", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   private final Router router;\n    private final SpatialOperator<MatcherCandidate> spatial;\n    private final TimePriority time;\n    private final Distance distance;\n    private final Cost cost;\n    private final StaticScheduler scheduler;\n    private final InlineScheduler", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "\t\t\t\tnew FOSpecificTreatmentPostprocessor(),\n\t\t\t\tnew FOTableColumnPostprocessorFake(),\n\t\t\t\tnew FOInsertEndQuestionPostprocessor(),\n\t\t\t\tnew FOEditStructurePagesPostprocessor(),\n\t\t\t\tnew FOSpec", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request.getPackageName() != null) {\r\n                        stringBuilder.append(\"\\nPackage Name: \")\r\n                                .append(request.getPackageName())\r\n                    }\r\n", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "   tgAsDict = textgrid_io.parseTextgridStr(textgridStr, includeBlankSpaces)\n    tgAsDict = textgrid_io.parseTextgridStr(textgridStr, includeBlankSpaces)\n    tgAsDict = textgrid_io", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "   void set(FixTag tag, Object value);\n    Object get(FixTag tag);\n    void set(FixTag tag, CharSequence value);\n    void set(FixTag tag, CharSequence value, int start, int end);\n    CharSequence get(FixTag tag, int start", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield chunk_idx, bounds\n\n    def iter_chunks_excerpts(self, n_samples):\n        \"\"\"Iterate over chunks and excerpts.\"\"\"\n        for chunk_idx, bounds in self.iter_chunks(n_samples):\n            for excerpt", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'year')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_class =", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = DatabaseHelper.getApp(contextRef.get(), data);\n\t\t\t\t\tif (a != null) {\n\t\t\t\t\t\tapps.add(a);\n\t\t\t\t\t\tneedSave = true", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "       registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (SEND_NOTIFICATION ^ RESPONSE_MASK), new MarshalledResponse", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       String language = languageDetector.detectLanguage(content);\n                        String source = tweet.getUser().getScreenName();\n                        FileSaver fs = new FileSaver(content, language, source, url, tweet.getId());\n                        String hash = fs.", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       return Contact.objects.filter(phone_number=self.phone_number)\n\n    def get_contact(self):\n        return self.get_contacts().first()\n\n    def get_group(self):\n        return Group.objects.get(name=self.language", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   /**\n     * Called when the visitor first reaches a node with children.\n     * @return Determines whether the node's children will be visited.\n     */\n    default boolean enter(Node node) {\n        return true;\n    }\n\n    /**\n     * Call", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "       conditions.append(AndCondition(conditions_for(\"and\", column=column)))\n    if \"or\" in operations:\n        conditions.append(OrCondition(conditions_for(\"or\", column=column)))\n    if \"not\" in operations:\n        conditions.append(NotCondition(", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "   pipeline.apply(\"Read live projects\", LiveProjectSource.create(org))\n        .apply(ParDo.named(\"Extract live states\")\n            .of(new ExtractState(errorTag))\n            .withOutputTags(resourceStateSuccessTag, TupleTagList.of(error", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "           entries = [e for e in entries if txn_matches(e, query)]\n        if filter_type is FilterType.Unassigned:\n            entries = [e for e in entries if e.has_unassigned_split]\n        elif filter_type is FilterType.", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()), name=\"package-new\"),\n    url(r'^view/(?P<", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": "       assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx(0, 2) == 2\n        assert get_square_idx(1, 0)", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "\tprivate boolean debugImages = true;\n\n\tprivate boolean debug = false;\n\n\tprivate boolean debugFeatures = false;\n\n\tprivate boolean debugFeatures = false;\n\n\tprivate boolean debugFeatures2 = false;\n\n\tprivate boolean debugFeatures3 = false;\n\n\tprivate boolean", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nf(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        dataset =", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "               if not checkFileExistence(pattern.datafile):\n                    errmsg += \"The data file %s does not exist.\\n\"%(pattern.datafile)\n\n            # 2.2 data file existence\n            if mode == \"Calculate\":\n                if not check", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   if gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   return javadocTool.run(cmdLine, input.toFile(), output.toFile());\n  }\n  \n  private static boolean isLinkHostOnline(Log log, String url) {\n    try {\n      var host = new URI(url).getHost();\n", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "                       new UserLoginTask(activity, UserLoginTask.Mode.REGISTER, UserLoginTask.Mode.REGISTER, UserLoginTask.Mode.REGISTER, UserLoginTask.Mode.REGISTER, UserLoginTask.Mode.REGISTER, UserLoginTask.Mode.REGISTER, User", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate Validator validator;\n\t\n\tpublic ParameterizedGenerationService() {\n\t\tpipelineGenerator = new PipeLineGeneratorImpl();\n\t\tvalorizatorParameters = new ValorizatorParametersImpl();\n\t\tschemaValidator =", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       // TODO:\n        // add more verifiers here\n        // verifiers.put(\"verifierName\", new VerifierBackground(new VerifierProperty()));\n        verifiers.put(\"localFilesExist\", new VerifierBackground(new LocalFilesExistVerifierImpl()));\n        verifiers", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "   Prefs providePrefs(SharedPreferences sharedPreferences) {\n        return new Prefs(sharedPreferences);\n    }\n\n    @Provides @Singleton\n    PersistentData providePersistentData(SharedPreferences sharedPreferences) {\n        return new PersistentData(sharedPreferences);", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "def __init__(self, *args, **kwargs):\ndef __init__(self, *args, **kwargs):\ndef __init__(self, *args, **kwargs):\ndef __init__(self, *args, **kwargs):\ndef __init__(self, *args, **kwargs):", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           (r'/login', LogInHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n        lib_path = ff", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": " def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    \"\"\"Process a request message, stream, and headers.\n\n    Args:\n      sink_stack - The SinkStack representing the processing state of the message.\n                   Implementors should push their sink onto", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "           showProgress(false);\n            Toaster.show(activity, R.string.login_failed);\n        }\n    }\n\n    public void onPostLoginExecute(Boolean success) {\n        AbstractYasmeActivity activity = (AbstractYasmeActivity) getActivity();\n\n", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tExpansionResult result = new ExpansionResult();\n\t\t\tresult.setQueryNode(anyQueryNode);\n\t\t\tresult.addExplanation(new Any", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n            if descriptor.members:\n                lines.extend(self._render_descriptor_helper(descriptor.members[0], indent + INDENT_CHARS))\n", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "   void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(ClassicBookList classicBookList);\n    void inject(ClassicPlaybackUi classicPlaybackUi);\n    void inject(ClassicNoBooksUi classicNoBooksUi);\n    void inject(Demo", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@inherit", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       self.generator = SimilarPathGenerator()\n\n    def test_generate_path_for_file_extension(self):\n        self.assertEqual(self.generator.generate_path(\"http://example.com/file.txt\"), \"/file.txt\")\n\n    def test_generate_", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "   private List<SliceValue> sliceValues;\n    private List<String> sliceLabels;\n    private List<BigDecimal> sliceValues;\n    private List<String> sliceLabels;\n    private List<BigDecimal> sliceValues;\n    private List<String> sliceLabels;\n\n", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "           except TextGridParseError as e:\n                self.return_dict[\"decode_error_files\"].append(e)\n            except Exception as e:\n                self.return_dict[\"parse_error_files\"].append(\n                    (file_name, traceback.format", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "       self.textArea.append(self.history.last())\n        self.textInput.clear()\n        self.textInput.setFocus()\n\n    @QtCore.pyqtSlot()\n    def chumOpen(self):\n        self.chumopen = True\n       ", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "   return Pair(e1, e2, ty1)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a pair of simply typed arguments\n    into a Pair.\n    \n    Arguments:\n    - `expr`:", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "       AccelerometerResource,\n        \"/aircraft/sensors/accelerometer\",\n        resource_class_args=(sensors.accelerometer,)\n    )\n\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "                           logError(t.getMessage());\n                        } else if(exceptionClass.equals(InvalidOperationException.class)){\n                            logError(t.getMessage());\n                        } else if(exceptionClass.equals(SdkClientException.class)){\n                            logError(t.", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "\t/**\n\t * \n\t */\n\tprivate final DocumentGraphEditor editor;\n\n\t/**\n\t * @param editor\n\t */\n\tCommandExecutor(DocumentGraphEditor editor) {\n\t\tthis.editor = editor;\n\t}\n\t\n\t/**\n\t * \n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "   private final ICompilationUnit testClass;\n\n    private final ICompilationUnit testClass;\n\n    private final ICompilationUnit testClass;\n\n    private final ICompilationUnit testClass;\n\n    private final ICompilationUnit testClass;\n\n    private final I", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "\tprivate CountryServices countryServices;\n\t\n\t\n\t\n\t@RequestMapping(value = \"/manage/index\", method = RequestMethod.GET)\n\tpublic ModelAndView index() {\n\t\tModelAndView mav = new ModelAndView();\n\t\tmav.set", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "   '--fq, --filter-query-language QUERY-LANGUAGE The filter query language to be '\n    'used',\n    '--filter-query-string QUERY-STRING The filter query string to be used',\n    '--filter-query-string-language", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "       print \"\\n[INFO] MobSF will perform Dynamic Analysis on Android Virtual Device\"\n        refresh_avd(adb)\n    elif SETTINGS.ANDROID_DYNAMIC_ANALYZER == \"MobSF_VM\":\n        print \"\\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def consultar_numero_sessao(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_numero_s", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "# 44018, section 10.2\n# RRC procedures dictionnary\n#\n# 44018, section 10.3\n# RRC procedures\n#\n# 44018, section 10.4\n#", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationChangedReceiver locationChangedReceiver;\n  protected PassiveLocationChangedReceiver passiveLocationChangedReceiver;\n  protected NewCheckinReceiver newCheckinReceiver;\n  protected LocationChangedReceiver locationChangedReceiver;\n  protected LocationChangedReceiver locationChanged", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "       CacheList list = new CacheList();\n        list.setName(listName);\n        cacheService.storeCacheList(list);\n        sessionContext.setData(CACHE_LISTS, cacheService.getAllCacheLists());\n        sessionContext.setData(CACHE_LIST,", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "       Assert.assertThat(ds, totalQueryCount(5));\n    }\n\n    @Test\n    public void testTotalCountWithOther() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  // select", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       result.append(\" IS \");\n      else\n        result.append(\" IS NULL\");\n    } else {\n      result.append(\" \").append(exp.getOperator().getValue()).append(\" \");\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "   DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes the drupal Service user.login)\n     *\n     * @param username the user's username\n     *", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "\n    def __init__(self, board_num, expansion_num):\n        self._board_num = board_num\n        self._expansion_num = expansion_num\n\n    @property\n    def board_type(self):\n        return ul.get_config(InfoType", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "   def __init__(self, CallName='', ReprName='', T=0, Trans=False):\n    def __init__(self, CallName='', ReprName='', T=0, Trans=False):\n    def __init__(self, CallName='', ReprName", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,\n            (True, PubKeyAlgorithm.ECDH): ECDHPub,\n            (True, PubKeyAlgorithm.ElGam", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "       self.key_size = read_u16le(f)\n        self.index_name = decode_utf16le(f)\n\n        for i in range(count):\n            key = read_u32le(f)\n            value = read_u3", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "                   deviceMiToken = MiPushClient.getToken(this);\n                    //startMiPush();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HMS\":\n               ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "       draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if draft.status == DraftStatus.DRAFT:\n            return await Utilities.error(ctx.channel, f\"Draft {draft} is in", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return new SelectionChunk(informationCriterion, modelCollection);\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.dar", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "\tprivate Connector connector;\n\tprivate ConnectorIssues connectorIssues;\n\tprivate ConnectorIssues connectorIssues2;\n\tprivate ConnectorIssues connectorIssues3;\n\tprivate ConnectorIssues connectorIssues4;\n\tprivate ConnectorIss", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\telse if (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_CLASS)) {\n\t\t\tString expanderClass = elt.getAttribute", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "   request = Mock(\n        request=Mock(\n            response=Mock(\n                body=b'',\n                content_type=None,\n                charset=None,\n            )\n        )\n    response = PyramidSwaggerResponse(request.response)\n", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "   protected PageParser pageParser;\n\n    protected PageParser pageParser;\n\n    protected PageParser pageParser;\n\n    protected PageParser pageParser;\n\n    protected PageParser pageParser;\n\n    protected PageParser pageParser;\n\n    protected PageParser pageParser;\n\n   ", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "   private final KadConfiguration config;\n    private final JKademliaNode kad;\n    private final ConnectMessage connectMessage;\n    private final int connectAttempts;\n    private final int connectAttempt;\n    private final int connectAttemptsRemaining;\n    private final", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "       return words_api(wordnik_api, token)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n\n\n\n\n\n\n", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "       self.assertIsInstance(handle, HANDLE)\n        self.assertIsInstance(handle, SOCKET)\n        self.assertIsInstance(handle, FILE)\n        self.assertIsInstance(handle, SECURITY_ATTRIBUTES)\n        self.assertIsInstance(", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       form.setText(Messages.configurationEditorWebModulesPageTitle);\r\n        GridLayout layout = new GridLayout();\r\n        form.getBody().setLayout(layout);\r\n\r\n        ExpandableComposite expandableComposite = toolkit.createExpandableComposite(form.getBody", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "                   Elements.ElementFilter<Element> filter = Elements.filter(annotation);\n                    return roundEnv.getElementsAnnotatedWith(annotation).stream();\n                })\n                .map(element -> {\n                    currentAnnotatedElement.set(element);\n", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'perms': 'write',\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('http", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "                                      join_keyword=u'\\u0928\\u093f\\u0928\\u094b\\u0902')\n\n    def test_full_e2e_english_signup_and_remind_flow(", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_SCREEN_SHOT_CODE:\n                return new BtnScreenShot();\n           ", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "           actionPopupGroup.add(ActionManager.getInstance().getAction(\"AddKeyAction\"));\n            actionPopupGroup.add(ActionManager.getInstance().getAction(\"AddValueAction\"));\n            actionPopupGroup.add(ActionManager.getInstance().getAction(\"DeleteKeyAction\"));\n        }\n       ", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "all_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n\nclass LanguageAdmin(admin.ModelAdmin):\n    list_display = ('locale_id', 'lang_name',", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "       type = Type()\n        type.format = TypeFormat()\n        type.format.pretty = \"foo\"\n\n        self.assertEqual(\"foo\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\n        type", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "\t\t\t\tv_lh, faces_lh = nib.freesurfer.read_geometry(\"%s/fsaverage/surf/lh.sphere\" % os.environ[\"SUBJECTS_DIR\"])\n\t\t\t\tv_rh, faces_rh", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n\t\t\t\t} catch(FCPFetchException e) {\n", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "   List<CreditCard> creditCards = new ArrayList<>();\n    List<DailyExpense> dailyExpenses = new ArrayList<>();\n    List<DailyExpense> dailyExpensesByCreditCard = new ArrayList<>();\n    List<DailyExpense> dailyExpensesByCategory", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "                       new TimeEntryOvertimeAggregation()));\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregationStyle(ScreensHelper.getTimeEntryStatusStyleBg(timeEntriesTable.getItems()));\n\n        timeEntriesTable.getColumn(\"overtime\").setAggregation", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           user = create_inactive_user(email, full_name)\n\n            # Send invitation email\n            subject = _('Invitation to join %(site_name)s') % {\n                'site_name': site.name\n            }\n            template = 'accounts", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "\tpublic boolean inGame = false;\n\tpublic boolean paused = false;\n\tpublic boolean inMenu = false;\n\tpublic boolean inPauseMenu = false;\n\tpublic boolean inInventory = false;\n\tpublic boolean inOptions = false;\n\tpublic boolean inStartMenu = false", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points=original_assembly_points,\n                                                      allow_cycles=args.allow_cycles,\n                                                      merge_strategy=args.c_merging_strategy,\n                                                ", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "           //chat is null, so we have to get it from the server\r\n            //get the latest message from the server\r\n            GetNewMessagesForChatTask task = new GetNewMessagesForChatTask(chatId);\r\n            task.execute();\r\n            //wait for the task to finish\r", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "   helpTestIteratorNormal(10, 10);\n    helpTestIteratorParanoid(10, 10);\n    helpTestIteratorCount(10, 10);\n  }\n\n  @Test\n  public void testData2() {\n    helpTest", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   }\n  }\n\n  private void parseFormResponse(String responseTxt) {\n    if (responseTxt == null) {\n      return;\n    }\n\n    String error = null;\n    Document doc = null;\n    try {\n      doc = XMLParser.", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "   private WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * Defines the component's active view.\n     */\n    protected CalendarView activeView = CalendarView.MONTHLY;\n\n    /**\n     * Defines the component's active view.", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "               tablefmt = tabulate(rows, headers, numalign=numalign,\n                                    stralign=stralign)\n            output.append(tablefmt)\n\n    if show_header:\n        output.append(status)\n\n    return output\n\n\ndef format_", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "       GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        ThermometerResource,\n        \"/aircraft/sensors/ther", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root);\n        this.jobs = new SpringJobs(restTemplate, root, deployments, tasks);\n    }\n    ", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "       this.vms = new SpringVms(restTemplate, root, deployments);\n    }\n    \n    @Override\n    public Observable<DirectorInfo> info() {\n        return info.info();\n    }\n    \n    @Override\n    public Observable<List<Release", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnItemChildCheckChangeListener easyOnItemChildCheckChangeListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "   private GuiButton addChannel;\n    private GuiText channelName;\n    private GuiButton removeChannel;\n    private GuiCheckbox channelEnabled;\n    private GuiButton channelColor;\n    private GuiButton channelColorReset;\n    private GuiButton channelColorSave", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "                   trackHistoryEntry = new TrackHistoryEntry(liveInfo.getTitle(), liveInfo.getArtist(), liveInfo.getAlbum(), liveInfo.getGenre(), liveInfo.getImageUrl(), liveInfo.getStreamUrl(), currentTime, currentTime);\n                    dao.", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "               } catch (FilesNotFoundException e) {\n                    // expected\n                }\n            }\n\t\t\t\n\t\t\t// Clean up\n\t\t\tclient.deleteContainer(containerName);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "       encoding = app_configs.get(ConfigKey.ENCODING, Default.ENCODING)\n    else:\n        encoding = encoding.lower()\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = app_configs.get(Config", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case OTHER:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case ABOUT:\r\n                        ((C", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "               new EventCommandHandler<>(CorrectionCommand.class, CorrectionEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "\n    if gopts.pager:\n      cmd.pager = RunPager(cmd.pager)\n    elif gopts.no_pager:\n      cmd.pager = TerminatePager()\n    else:\n      cmd.pager = None\n\n    if", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "       return None\n\n    def _getPlaylistItemID(self, item):\n        \"\"\" Match an item to a playlist item and return the item playlistItemID. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "               // 设置结束执行时间\n                taskData.setEndDate(new Date());\n                // 设置执行时间\n                taskData.setRunTime(System.currentTimeMillis() - taskData.getRunDate().getTime());\n", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "\n        self.__device = device\n        self.__ifb_device = self.parse_incoming_device(device, ip_version)\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__is_parse_filter_id", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       if bytecode[k][2] in NO_FALL_THROUGH:\n          return\n        if bytecode[k][2] in JUMP_OPCODES:\n          return\n        if bytecode[k][2] in (LOAD_CONST, STORE", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "       r.set_engine(Pipeline(Engine()))\n        r.set_kb(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline(Pipeline", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       if (dataDecoder != null) {\r\n            decoder = DataDecoder.valueOf(dataDecoder);\r\n        }\r\n        DataNodePrinter printer = new DataNodePrinter(print, decoder);\r\n        DataDirHelper dirHelper = new DataDirHelper();\r\n        PropertiesReader propertiesReader =", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\n    def parse(self, ping_message: Sequence[str]) -> PingStats:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           state[\"inventory\"] = [mudobj_ref(i) for i in inv]\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "       self.assertEqual(node_children(self.elem), [self.elem.text, self.elem.tail])\n        self.assertEqual(node_children(self.elem.text), [self.elem.text, self.elem.tail])\n        self.assertEqual(node_children", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": " public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0.", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(q", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "           self.link.send_message(\"parameters\", [self.params])\n        except UncertainTimeError:\n            log.error(\"We couldn't find a good estimate of the clock error.  Switzerland isn't going to work!\")\n            sys.exit(1)\n\n", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "\n        embed = Embeds.make_embed(header=\"Clembot Configuration\", header_icon=Icons.CONFIGURATION,\n                        fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)\n\n", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       MovieCursor movieCursorById = new MovieCursor(mContext.getContentResolver(),\n                ContentUris.withAppendedId(MovieColumns.CONTENT_URI,movieRowId));\n        DataTestUtilities.validateMovieCursor(\"query by id using library's syntax\",", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "   (signerId, keyId) -> {\n      if (signerId.equals(\"key1\")) {\n        return Lists.newArrayList(new RSAPublicKeyVerifier(privateKey));\n      }\n      throw new InvalidJsonTokenException(ErrorCode.INVALID_SIGNATURE", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "\t\tsetContentView(R.layout.mapview);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(true);\r\n", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "\n    @property\n    def word_counts(self) -> Dict[str, int]:\n        \"\"\"Count of words used in the corpus\"\"\"\n        return Counter(self.corpus_word_set)\n\n    @property\n    def word_frequency(self) ->", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda):\n        \"\"\"Sobrepõe :meth:`~satcfe.base", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "\t\t// <div id=\"startpoint\">\n\t\t// <h1>TodoMVC</h1>\n\t\t// <input type=\"text\" id=\"new-todo\" placeholder=\"What needs to be done?\">\n\t\t// </div>\n\t\t// <", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "       self.assertRaises(InputError, _environment_to_string, u\"a\", u\"b\")\n\n    def test_type_check_for_environment_value(self):\n        self.assertRaises(InputError, _environment_to_string, u\"a", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mush", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "           GCActivitySet gcActivitySet,\n            GCActivity gcActivity) {\n        dataset.add(gcActivitySet, gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "       //用户的密码\n        stuPassword = password;\n        //用户的学院\n        stuXM = split[2];\n        //用户的专业\n        stuZY = split[3];\n        //用户的班级\n        st", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "   sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)\n    # TODO: better reference state handling\n    # TODO: model exclusions handling\n    # TODO: better reference state handling\n    mod_srf.models", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   private static final String TAG_EXTRA_TEXT_BLOCK = \"tagExtraTextBlock\";\n\n    private static final String TAG_EXTRA_TEXT_BLOCK_LIST = \"tagExtraTextBlockList\";\n\n    private static final String TAG_EXTRA_TEXT_BLOCK_", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "   private final static GuiNewChatTC chat = GuiNewChatTC.getInstance();\n    private final static TabbyChat tc = TabbyChat.getInstance();\n    private final static Map<Channel, GuiComponent> components = Maps.newHashMap();\n    private final static Map<Channel", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final StringUtil str = new StringUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger(Class", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t}\n\n\t/**\n\t * Method representing the Generate ant target :\n\t * \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List<ContentItem", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "       DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratAccueilModifications", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "\n    private void initFastScroller() {\n        mFastScroller = (FastScroller) mRecyclerView.findViewById(R.id.fast_scroller);\n        mFastScroller.setSectionIndexer(this);\n        mFastScroller.setShowB", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                               dim, vocab, lookup,\n                                                               cache=self._cache)\n            else:\n                raise NotImplementedError()", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "               if(output == null) {\n                    Toast.makeText(CameraActivity.this, \"No image to crop\", Toast.LENGTH_SHORT).show();\n                    return;\n                }\n                if(CROP_ASPECT_RATIO == -", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": "           form.initial['username'] = self.object.username\n            form.initial['first_name'] = self.object.first_name\n            form.initial['last_name'] = self.object.last_name\n            form.initial['email'] = self.object.email\n", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "           '/properties':                    RestAppPropertys,\n        }\n        \n        # Register the resources\n        for path, resource in self.resources.items():\n            self.api.add_resource(path, resource)\n\n        # Register the API\n        self.api.init", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self.settings_ini = settings_ini\n        self.tree_view = tree_view\n        self.settings_ini.set_safe('GENERAL', 'ROOT_DIRECTORY', directory)\n        self.settings_ini.set_safe('GENERAL', 'LOG_DIRECTORY", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "   api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(InitialConditionResource, \"/fdm/initial_condition\",\n                     resource_class_args", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, passwd):\n        self._pass = passwd\n        return self\n\n", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "\t\t} catch (final SocketViewException e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark.\n\t */\n\tpublic void runBenchmark() {\n\t\ttry {\n\t\t\tbenchmark.", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "       return MongoConfiguration.getInstance(project).getServerConfigurations();\n    }\n\n    private Tree createTree() {\n        Tree tree = new Tree(new DefaultMutableTreeNode(\"MongoDB Servers\"));\n        tree.setRootVisible(false);\n        tree.setSh", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "   PCollection<GCPResource> liveProjects =\n        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));\n    // Tag the live projects to indicate they're live.\n    PCollection<KV<GCPResource, GCPResourceState>>", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "     return\n    if root.data[1] == 'not':\n      self._cstr = Comparator(data=root.data, cmp_id=CMP_NOT_EQUAL, commutative=True)\n      return\n    if root.data[1] == 'in':", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "       void dateClick(Date date);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface ItemClickListener {\n        /**\n         * Triggered when an item was clicked\n         *\n         * @param item\n         *           ", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "   search = Search(\n        engine=engine, model=model, index=index, key=key, filter=None, projection=\"all\", consistent=True, forward=True)\n    search.mode = \"query\"\n    search.prepare()\n    assert search.key == key\n   ", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "   private int videoDuration;\n    private int videoQuality;\n    private int videoSize;\n    private int videoSize;\n    private int videoSize;\n    private int videoSize;\n    private int videoSize;\n    private int videoSize;\n    private int videoSize;\n", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   group.add_argument(\n        \"--reorder\",\n        dest=\"reordering_rate\",\n        default=0,\n        help=\"\"\"round trip packet reordering rate [%%]. the valid range is from {:d} to {:d}.\n        packet reordering", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "\n        else:\n            result = decimal_to_string(value, fmt_token, fmt_modifier)\n\n    return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\tLOGGER.info(\"Creating new pipeline...done\");\n\t\treturn new GenerationService(identityGenerator, ddi2xformsGenerator, ddi2lunaticXmlGenerator, ddi", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "           client.getBaseClient().send(new Packet(PacketType.NOOP), Transport.POLLING);\n            break;\n        }\n\n        case NOOP: {\n            client.getBaseClient().schedulePingTimeout();\n            break;\n        }\n\n        case", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isConnectedToAudiologist;\n    // Guarded by _lockObject.\n    private boolean _isConnectedToChat;\n    // Guarded by _lockObject.\n   ", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": " to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1, 1))\n  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "       expiry = Column(Timestamp, ttl=True)\n        old = Column(String)\n        new = Column(String)\n\n    return MyModel\n\n\n@pytest.fixture\ndef model_with_index(model):\n    class MyModel(model):\n", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.getColor());\n        descriptor.setIntensity(fog.getIntensity());\n        descriptor.setType(fog.getType());", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Building a wrapper from the given city: \" + city.getName()\n\t\t\t\t\t\t\t+ \", endpoint type: \" + endpointType + \", api key: \"\n\t\t\t\t\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n\n    RotateOut(RotateOut.class),\n    Rotate", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "   sync_stats_manager = SyncStatsManager()\n    transplatform_sync_manager = TransplatformSyncManager()\n    release_schedule_sync_manager = ReleaseScheduleSyncManager()\n    build_tags_sync_manager = BuildTagsSyncManager()\n    yml_based_job", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "   ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n    ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plus(ActorDetailsComponent actorDetailsComponent);\n}\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\treturn Minigame.getMinigameInstance(plugin).getRound(round.toLowerCase()).addPlayer(this);\n\t}\n\n\t/**\n\t * Removes this {@link MGPlayer} from the given {@link Round round}.\n\t *\n\t * @param round the", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "                       res = Schema.get(\n                            new ExtMap().mput(Schema.InvokeKeys.DATA_SOURCE, context.get(Schema.InvokeKeys.DATA_SOURCE))\n                            .mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "       if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue cread", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": " private ActionSupportHandler<RedirectAction>     redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);\n  private ActionSupportHandler<TransferAction>      transferActionSupportHandler      = new ActionSupportHandler<TransferAction>(TransferAction.class);\n  private ActionSupport", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "       array.items = [object1, object2, object3]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hydrate_", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "           (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalSign): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalEncryptOrSign", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\t\tif model_item.data is None:\n\t\t\t\treturn default_flags\n\t\t\telif model_item.data.is_hidden:\n\t\t\t\treturn default_flags | Qt.ItemIsHidden\n\t\t\telse:\n\t\t\t\treturn default", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       obj.updateBuffImg()\n        obj.update()\n        obj.updateSocketTags()\n        obj.updateBlockLabel()\n        obj.updateBlockWidget()\n        obj.updateComment()\n        obj.updateCollapseLabel()\n        obj.updateSocketTags()\n        obj", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       byte[] dataBytes = buildRawData(clientConfig, dataSource);\n\n        //TODO: C,  for multi test we really need to have it writing to multiple ring buffers.\n        byte[][] ringBuffers = new byte[count][];\n        for (int i = ", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "       if (connection.getSASLMechanism() != null) {\n            connection.getSASLMechanism().processChallenge(challengeData);\n        }\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        if (connection", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "       allOf(\n                containsString(\"\\\"_source\\\":\\\"csw-record.xml\\\"\"),\n                containsString(\"\\\"_source\\\":\\\"csw-record.xml\\\"\"),\n                containsString(\"\\\"_source\\\":\\\"csw-record.xml\\\"\"),", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "                           startMixedActivity();\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"playSessionSettingsDialog\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack !=", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   url(r'^users/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/(?P<user_id>[-\\w]+)/edit/$", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\t@Override\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter.getInstance();\n\t}\n\n\t/**\n\t * \n\t * @param service\n\t *            the service to register\n\t */\n\tpublic void register", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "       d1 = Constant(d1, DP_WIDTH)\n        d2 = Constant(d2, DP_WIDTH)\n        d3 = Constant(d3, DP_WIDTH)\n\n        d1 = Constant(d1, DP_WIDTH)\n        d2", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "       Bit('C', ReprName='Command', Pt=4, BitLen=1, Repr='hum'),\n        Bit('R', ReprName='Response', Pt=5, BitLen=1, Repr='hum'),\n        Bit('F', ReprName='Final", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "   DropMenuAdapter dropMenuAdapter;\n    DropDownMenu dropDownMenu;\n    private CookBookAdapter cookBookAdapter;\n    private String titleUrl;\n    private String positionTitle;\n    private String singleListPosition;\n    private String doubleListLeft;\n    private String doubleListRight", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "   private AdapterWithHeader mAdapter;\n\n    private FastScroller mFastScroller;\n\n    private Toolbar mToolbar;\n\n    private boolean mShowToolbar;\n\n    private boolean mShowFastScroller;\n\n    private boolean mShowFastScroller;\n\n   ", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "   Observable<ApiStatus> apiStatus(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   try {\n      for (ICommentProcessor commentProcessor : this.commentProcessors) {\n        commentProcessor.run(document, proxyBuilder);\n      }\n    } catch (Exception e) {\n      throw new DocxStamperException(\"could not run comment processors!\", e", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Add the listeners\n\t\tPluginManager pm = getServer().getPluginManager();\n\t\tpm.registerEvents(playerListener, this);\n\t\tpm.registerEvents(blockListener, this);\n\t\t\n", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "\ndef check_args(args, fn_type, env):\n    for arg in args:\n        check_arg(arg, fn_type, env)\n\n\ndef check_args(args, fn_type, env):\n    for arg in args:\n        check_arg(", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "           mSongListAdapter.notifyDataSetChanged();\n        }\n    };\n\n    private AlbumEditorDialog.OnAlbumEditorSuccessListener mOnAlbumEditorSuccessListener = new AlbumEditorDialog.OnAlbumEditorSuccessListener() {\n        @Override\n        public void onAlbumEditor", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "\n    def _load_corpus_from_source(self) -> None:\n        \"\"\"\n        Load a corpus without using multiprocessing\n        \"\"\"\n        begin_time = time.time()\n        sanitize_function = None\n        if hasattr(self, \"san", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "   erb(freq, bandwidth)\n\n\nclass TestGammatone(object):\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 132.639),\n      (3000, 348", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "           effect.setTexture(GLUtils.createTexture(mActivity, R.mipmap.ic_launcher));\n        }\n        mSelectedEffect = effect;\n        mSelectedEffect.addListener(this);\n        return true;\n    }\n\n    public void onEffect", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "   public void visit(VmSpec vmSpec) {\n      vmOptionsBuilder.putAll(vmSpec.options());\n      vmProperties = Optional.of(vmSpec.properties());\n    }\n  }\n\n  private static final class MeasurementCollectingVisitor extends AbstractLogMessageVisitor", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            AmbientTemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type == ", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   def flags_int(self, val):\n        self._flags = val\n\n    @flags.register(NotationDataFlags)\n    def flags_notationdataflags(self, val):\n        self._flags = val\n\n    @flags.register(bytearray)\n    def", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "   protected void loadData(final int page) {\n        if (searchCriteria.isEmpty()) {\n            return;\n        }\n        final SearchPatternsRequest request = new SearchPatternsRequest(getActivity(), prefs, searchCriteria, page, pageSize);\n        request.setListener(", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   # TODO: this is a hack to get the phase name from the database.\n    # We should be able to get it from the database, but it's not clear how.\n    # This is a workaround for now.\n    phase_name = dbf._phases[0].", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t\n\t@", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date10, DateTime", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "       return Stream(model=model, engine=self, position=position)\n\n    def transaction(self, mode, *objs, condition=None, atomic=None):\n        \"\"\"Create a :class:`~bloop.transactions.Transaction` for a single operation.\n\n        :", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "   @GET(\"suggest\")\n    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,\n                                    @Query(\"q\") String query,\n                                    @Query(\"limit\") int limit,\n                                    @Query(\"pos\")", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SimpleNode node)", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "def read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\ndef read_sequence_item", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   def decoder(self) -> StandardRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the shifted encoder input sequences as input, and is initialized with the hidden\n        representation of the input sequences.\n\n        Returns\n        -------\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "   def __init__(self, graph, first_entity, *entities):\n        self.graph = graph\n        self.first_entity = first_entity\n        self.entities = entities\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "       self.textInput.setText(\"\")\n        self.textInput.setFocus()\n\n    def addMessage(self, lm, chumopen):\n        if chumopen:\n            self.textArea.addMessage(lm, self.chum, self.history)\n", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "       final String[] columnNames = new String[] { \"Benchmark\", \"Method\", \"Class\", \"Time\", \"Min\", \"Max\", \"Avg\", \"StdDev\", \"Count\" };\n        final String[][] data = new String[numberOfColumns][benchRes.getResults().", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "\n    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n        if (controller == null || componentController == null || fsmPlayer == null || adMedia == null) {", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "\tpublic static Frameset frameset(Attribute... attributes) {\n\t\treturn new Frameset(attributes);\n\t}\n\n\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "\n        self.plot_confusion_matrix(confusion_matrix, data_set.label_map.values())\n\n        if parsed_args.output is not None:\n            with open(parsed_args.output, \"w\") as f:\n                f.write(\"accur", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationPlanning(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.planning_date.GetValue", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "for platform in Platform.objects.all():\n    all_platform_slugs.append(platform.platform_slug)\n\nall_product_slugs = []\nfor product in Product.objects.all():\n    all_product_slugs.append(product.product_slug)\n", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "           _log.info('Initializing a %s prior for the parameters.', prior['name'])\n        else:\n            raise ValueError('Prior must be a dict, PriorSpec, or None.')\n        if isinstance(prior, dict):\n            prior = build_prior_specs", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_POWER_LEVELS.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room power levels.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tpublic List<AuthorWithBooks> findAll() {\n\t\tList<AuthorWithBooks> list = new ArrayList<>();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.*, BOOK.* FROM AUTHOR LEFT OUTER JOIN BOOK ON AUTHOR.ID = BOOK", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "     for edge in visitor.edges:\n        if edge.kind == ControlFlow.E_LOOP:\n          return edge.source\n      return None\n\n    def get_loop_targets(node):\n      class FwdEdges(EdgeVisitor):\n        def __init__(self", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n                Keyword('baz'),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_record_field():\n    inc_", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n            name.setText(queuedProjectResult.getName());\n            author.setText(queuedProjectResult.getAuthor());\n            gauge_description.setText(", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "           H += dot(crossmat(c - p), m * H_trans) + dot(I, H_rot)\n            H += dot(crosstens(H_trans), m * J_rot) + dot(crosstens(I), H_rot)\n       ", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer);\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer);\r\n\t\tregisterRenderer(Boolean.class, new DefaultBooleanRenderer);\r\n\t\tregisterRenderer(Character.class, new DefaultCharacterRenderer);\r\n\t\t", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "     return Const.fromName(arg)\n    elif op == LOAD_NAME:\n      return Ref.fromName(arg)\n    elif op == LOAD_FAST:\n      return Ref.fromName(arg)\n    elif op == LOAD_GLOBAL:\n      return Ref", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "   account = account_for_vimeo_id(access_token_data['user_id'])\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            random_name = ''.join(choice(string", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "\tprivate final PingPongEq pingPongEq;\n\tprivate final PingPongEq.PingPongEqListener pingPongEqListener = new PingPongEq.PingPongEqListener() {\n\t\t@Override\n\t\tpublic void onP", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoop = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\t// PostProcessing\n\t\n\tprivate NoopPostprocessor noopPostprocessor = new NoopPostprocessor();\n\t\n\tprivate", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, String rootName) {\n\t\tsuper();\n\t\tthis.schema = new Schema(rootClass, rootName);\n\t}\n\t\n\tpublic SQLQuery getRootQuery() {\n\t\treturn rootQuery;\n\t}\n", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       self.assertListEqual(list(etree_iter_paths(root)),\n                               [('a', 'Qa'),\n                                ('a/b1', 'Qb1'),\n                                ('a/b1/c1', 'Qc1'),\n                ", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       install_and_run(adb, app_info)\n        \n        # 开始自动化测试\n        auto_app_test(adb, app_info)\n        \n        # 下载日志\n        download_logs_thread(adb, download", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "       PreparedExecution pe = ds.getFirstPreparedStatement();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        // query with StringMatcher\n        assertThat(pe, query(is(\"...\")));\n        assertThat(pe, query(startsWith(\"...\")));", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "           EtsiResponse resp = this.client.sendRequest(req);\n            \n            // 5. Get the Signature\n            SignatureValue sig = this.service.getSignatureValue(resp);\n            \n            // 6. Construct ASiC file\n            this.service.", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) {\n\t\tFacet", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "       DeviceInfo deviceInfo = AndroidDeviceDetailsInfo.Companion.getDeviceInfo();\n        FeedbackUseCase feedbackUseCase = FeedbackUseCase.Companion.getInstance();\n        feedbackUseCase.sendFeedback(userFeedback, new Function1<Feedback, Unit", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "               new MigrateCommand(),\n                new RefreshCommand());\n        // Register the currency registry module\n        game.getServiceManager().setProvider(this, CurrencyRegistryModule.class, new CurrencyRegistryModule());\n        // Register the currency service\n        game.getServiceManager", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "   def ativar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.ativar_sat`.\n\n        :return: Uma resposta SAT padrão.\n        :rtype: sat", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMPERATURE:\n                    TempSensorView tview = new Temp", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "               #   x_mean, y_mean, mag_corr = xyToRaDecPP(platepar, x_mean, y_mean, test_px_sum, \\\n                #       vignetting_corr=True, extinction_corr", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   private final OAuth2Requester requester;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        Checks.check(clientId >= 0, \"Client ID", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   url(r'^new/(?P<ci_platform_id>[\\w\\-\\+]+)/(?P<ci_project_web_url>[\\w\\-\\+]+)$',\n        staff_member_required(AddCIPipeline.as_view(), login_url", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "   Genotype parseGenotype(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genome.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genome\n     */\n    Gen", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "       self.runner.add(self.rule, with_child=True)\n        self.runner.add(ContentSimhashSampling(), with_child=True)\n        self.runner.add(ContentSignature(), with_child=True)\n        self.runner.add(Reject", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   @Subscribe\n    public void onClick(GuiMouseEvent event) {\n        if (event.getButton() == 0 && event.getType() == GuiMouseEvent.MouseEvent.CLICK) {\n            channel.openSettings();\n        }\n    }\n\n    @Override", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "   grid = _gen_grid(options)\n    # Generate grid of values for parameters (force to be equal length)\n    grid = _gen_grid(options)\n    # Generate grid of values for parameters (force to be equal length)\n    grid = _gen_grid(options)", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": " public void init(MutableConfig config) {\n    config.set(\"packager.modules\", rawValues(config, ModuleFinder::modules));\n    config.set(\"packager.modules.list\", action(\"packager.modules\", config -> config.get(\"packager.modules\").map", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "                           return new NotFoundException(cause);\n                        case 405:\n                            return new APIIncorrectException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                } else {\n                    return new", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "   cfe = CFeCancelamento(\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n            numeroCaixa=_opcao('--numero-caixa'),\n            emitente", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "       LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key))\n            properties.addLore(key);\n\n        PacketSyncLore.updateLore((EntityPlayerMP) entityPlayer);\n\n        entity", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        /******/\n        if(type == 13", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "           request[table_name] = {\n                \"Key\": key,\n                \"ConsistentRead\": consistent,\n            }\n            object_index[obj] = request[table_name]\n            table_index[table_name] = request[table_name]\n\n", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "                       intent.putExtra(Extras.EXTRA_THUMBNAIL, mWallpapers.get(position).getThumbUrl());\n                        intent.putExtra(Extras.EXTRA_NAME, mWallpapers.get(position).getName());\n                        intent", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "       xml_test = '<A xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xml:base=\"http://www.w3.org/XML/1998/namespace\" />'\n        self.assertEqual(node_document_", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "               print(draw_art(fingerprint))\n            else:\n                print('{0} {1} {2}'.format(fingerprint, description, created_at))\n\n    async def list_vaults(self, with_art=False):\n       ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "   private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final Jobs jobs;\n    private final SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"Problem:\")\n        smart_print(problem)\n\n    if verbose_level >= 2:\n        smart_", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "       DATA[looptest], 1.0E-6, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), Next line of", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "   private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null\");\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList nodeList = element.getElementsByTagName", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "           Board.this.rollDices();\n          }\n        else {\n          Board.this.rollDices();\n          Board.this.doubleBtn.addAction(Actions.sequence(Actions.alpha(0.7f, 0.4f), Actions.alpha(1,", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "   private List<Expense> getExpensesFromCreditPeriod(int periodId) {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = new ArrayList<>();\n\n        Cursor cursor =  db.query(ExpenseManagerContract", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case START_DATE_DESC:\n                    Arrays.sort(sorted, new StartDateComparator(false));\n                    break;\n                case DURATION_", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a relative.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a relative\n     */", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "       auth_data=None,\n        no_prompt=False,\n        no_verify=False,\n        no_refresh=False,\n        no_prompt_login=False,\n        no_prompt_refresh=False,\n        no_prompt_verify=False", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tnew APP13Segment(aJPEG).encode(aOutput).log(aLog);\n\t\t}\n\n\t\tif (aJPEG.mColorSpaceTransform != null)\n\t\t{Next line of code:\n\t\t\t\tnew APP14", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "\tprivate List<PlayerOverview> playerOverview;\n\tprivate List<Game> games;\n\tprivate List<TeamLeadersResponse> teamLeaders;\n\tprivate List<TeamRosterResponse> teamRoster;\n\tprivate List<TeamSummaryResponse> teamSummaryResponse;\n\t", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "   public void sendMessage(ChatMessage message)\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.CONNECTED)\n            {\n                throw new IllegalStateException(\"Fitting session is not connected. Wait for CON", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new DrumStoreEntry<>(data, DrumOperation.UPDATE);\n    }\n\n    @Test\n    void testAppendUpdate2() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleDataStoreImpl<>(this.testDir + \"/cache", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "   private static final DateTimeFormatter SUMMARY_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\n    private static final DateTimeFormatter SUMMARY_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM\");\n    private static final DateTimeFormatter SUMMARY", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "\n    def test_run(self):\n        \"\"\"\n        Test :func:`~deployer.host.base.Host.run` on every host.\n        \"\"\"\n        hosts = self.get_hosts()\n        hosts = HostsContainer(hosts)\n\n        #", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           VotingModule.class\n    };\n\n\n    /**\n     * Map of module classes to their instances\n     */\n    private static HashMap<Class, Module> modules = new HashMap<Class, Module>();\n\n\n    /**\n     * Load all modules\n     */\n    public static", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "     f = freq2lag(v)\n      l = lag2freq(f)\n      assert almost_eq(v, l)\n      assert almost_eq(v, f)\n\n  def test_freq_lag_converters_are_inverses_with_", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "                       ExeSQL(sql)\n\n                        # update last_update_time\n                        clause = 'sid = {}'.format(S['sid'])\n                        sql = getUpdateSQL('last_update_time', time.strftime('%Y-%m-%d %H", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "   private MonthCalendarHelper monthCalendarHelper;\n\n    private MonthEventsProcessor monthEventsProcessor;\n\n    private OnMonthChangeListener onMonthChangeListener;\n    private OnDayChangeListener onDayChangeListener;\n\n    private DisplayEventCallback<Calendar> displayEventCallback;\n\n    private Sc", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "           self.logger.error(\n                f\"Error initializing training for {self.identifier}: {e}\"\n            )\n            self.logger.error(\n                f\"Error initializing training for {self.identifier}: {e}\"\n            )\n            self.logger.error", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "       welcomeString.setText(Constants.WELCOME_STRING);\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEventParents = new ArrayList<>();\n\n        mEvents.add(new Event(R.draw", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           if (sl == null) {\n                logger.severe(\"Keine Sammellastschrift ausgewählt.\");\n                return;\n            }\n\n            if (type == HibiscusExportType.SAMMEL) {\n                exportSammellast", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBlameCommand()\n    {Next line of code:\n        return new SvnJavaBlameCommand();\n    }\n\n    /**\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   public static DownloadQueue newDownloadQueue() {\n        return newDownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue.\n     *\n     * @param threadPoolSize handle the number of concurrent.\n     * @return {@link DownloadQueue}.\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": "\tprivate static final Logger logger = Logger.getLogger(Util.class);\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static Logger getLogger() {\n\t\treturn logger;\n\t}\n\n\tpublic static CloudUtil getCloudUtil", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "\t\t\tif isinstance(model_item.data, CalcTableAnalysis):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, CalcSheetAnalysis):\n\t\t\t\tdefault_flags = default", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "   public int readCodeInteger12() throws IOException {\n\t\tint d1 = in.read1();\n\t\tint tag = d1 & 0x07;\n\t\tif (tag == CODEINT12_TAG)\n\t\t\treturn readSmallIntValue(", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "           if command.startswith(\"tc\"):\n                return True\n\n            return False\n\n        return self.__tc_command_output.get_command_history(tc_command_filter)\n\n    def get_tc_command_output(self):\n        return self.__tc", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": "           left_foot_task = DOFTask(\n                self.robot, self.robot.left_foot, self.swing_foot.pose,\n                weight=swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "           self._probe = probe\n        else:\n            self._probe = _load_probe(**kwargs)\n        self._kwargs = kwargs\n        self._kwargs['tempdir'] = tempdir\n        self._kwargs['probe'] = self._probe\n        self._kwargs['channels_per", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\n    my_stream = white_noise(", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "\n  public void visit(final InExp inExp) throws QueryException {\n    final Column column = inExp.getColumn();\n    if (inExp.getValues().isEmpty())\n      throw new QueryGrammarException(\"Cannot apply IN with empty list\");\n\n    result.append(", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\n\ndef generate_pronunciations_arguments(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths: Dict[str, str],\n    word_boundary_paths: Dict[str, str],\n    ali", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "\n    self._varz.message_bytes_sent(buf.tell())\n    self._varz.deserialization_failures()\n    self.next_sink.AsyncProcessRequest(sink_stack, msg, buf, headers)\n\n  def AsyncProcessResponse(", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "           // Everything went fine\n            Log.d(this.getClass().getSimpleName(), \"Chat was created successfully\");\n            Toaster.getInstance().toast(R.string.chat_created, Toast.LENGTH_LONG);\n            // Notify the fragment that the chat was created\n           ", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "\n    self.mgmt = management.Management(self)\n\n    self.mgmt_clusters = management.MgmtClusters(self)\n\n    self.mgmt_flavors = management.MgmtFlavors(self)\n\n    self.mgmt", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "       return new RoxanaPropertiesMockBuilder()\n                .withLocale(Locale.CANADA)\n                .withBaseName(\"translator.messages\")\n                .withResponseCode(HttpStatus.INTERNAL_SERVER_ERROR)\n                .withSuppressFails(true", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.build", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "class ConfigCog(commands.Cog):\n\n    _cache = dict()\n    by_guild = dict()\n\n\n    def __init__(self, bot):\n        self.bot = bot\n        self.dbi = bot.dbi\n        self.utilities =", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "\tpublic void acceptString(final FixTag tag, final CharSequence value) {\n\t\tfinal Validity validity = validities.get(tag);\n\t\tif (validity != null) {\n\t\t\tif (validity.isRequired()) {\n\t\t\t\tif (", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "\t\t\tString basePath = \"src/test/resources/ddi-to-xforms\";\n\t\t\tString basePath = \"src/test/resources/ddi-to-xforms\";\n\t\t\tString basePath = \"src/test/resources/ddi-to", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\n        # Make sure we're not looking at abstract models\n        validate_not_abstract(model)\n\n        # Make sure we're not looking at abstract models\n        validate_", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1.NAME: False,", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "       self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e\", replace_blank_name(name=u\"\\u0906\\u092a\\u0915\\u093e", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        LOG.info(\"response: {}\", JSON.toJSONString(response));\n        Assert.assertTrue(response.isBizSuccess());\n    }\n\n    /**\n     * 扫码支付下单", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "\n    ['Verify instance command references --no, returns paths, explicit ns',\n     ['references', 'TST_Person.name=\"Mike\"', '--no', '-n', 'root/cimv2'],\n     {'stdout': ['\"root/cimv2:T", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "               isinstance(t2, RecordMeta)\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            else:\n                raise TypeCheckError", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "           MacOsPingParser,\n            AlpineLinuxPingParser,\n        )\n        for parser_class in parser_class_list:\n            try:\n                self.__parser = parser_class(ping_lines, self.__timezone)\n                break\n           ", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def consultar_ultima_sessao_fiscal(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.Fun", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "\tCall<ImgurResponseWrapper<List<GalleryItemProxy>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\t", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       // https://github.com/olivergondza/dumpling/issues/10\n        // https://github.com/olivergondza/dumpling/issues/11\n        // https://github.com/olivergondza/dumpling/", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def compute_conditions(self):\n    \"\"\"\n      Computes the conditions associated with each ``N_CONDITION`` node\n      in the CFG.\n    \"\"\"\n    self._conds", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "           vote_obj = VotePost.objects.filter(user=request.user, post=post).first()\n            if vote_obj:\n                vote_obj.value = vote_obj.value * -1\n                vote_obj.save()\n                post.up", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   self._ping_ar = AsyncResult()\n    self._ping_ar.SafeLink(self._PingCallback)\n    self._ping_ar.ContinueWith(self._PingTimeout)\n    self._ping_ar.ContinueWith(self._PingTimeoutCallback)", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "           self.RNG.randint(0, 2 ** 31 - 1),\n            self.RNG.randint(0, 2 ** 31 - 1),\n        )\n\n        # Test that the draws are independent\n        self.assertNotEqual(", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "       for (PlaySession playSession : stack.getPlaySessionList()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "                       expectLastCall().andThrow(new ExpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n                                    givenWhenThenDefinitionMock.", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "       // Load modules\n        loadModules();\n        // Load commands\n        loadCommands();\n        // Load listeners\n        loadListeners();\n        // Load listeners\n        loadListeners();\n        // Load listeners\n        loadListeners();\n        // Load listeners\n        loadListeners();\n        // Load listeners", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "   if self.symbol in ('eq', 'ne'):\n        return numeric_equal(operands[0], operands[1])\n    elif self.symbol in ('lt', 'le'):\n        return numeric_not_equal(operands[0], operands[1])\n", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "               section.nbits_encoded.value += bufr_message.length.nbits\n            )\n\n        if wire_template_data:\n            bufr_message.wire()\n\n        return bit_writer.get_bytes()\n\n    def process_section(self,", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       MessageTranslated messageTranslated = creator.create(KEY,\n                new MessageMapperEnumParameterFinder(new MockedMessageMapper(KEY),\n                        List.of(RANDOM_STRING_PARAMETER_VALUE_01, RANDOM_STRING_PARAMETER_VALUE_0", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   with pytest.raises(InvalidModel):\n        engine.bind(int)\n\n\ndef test_bind_model(engine):\n    \"\"\"Can bind models\"\"\"\n    engine.bind(User)\n\n\ndef test_bind_model_with_index(engine):\n   ", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "\t\ttropo.record(URL(\"http://www.example.com/record.php\"), BEEP(true), SEND_TONES(true), EXIT_TONE(\"beep\"));\n\t\ttropo.hangup();\n\t\ttropo.render(", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], 3)", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "       m.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\n        m.videoSetFrameRate.setEnabled(false);\r\n\r\n        // set width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 0)// set", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "   @GET(\"tags?platform=android&type=emoji\")\n    @NonNull\n    Call<EmojiResponse> getEmojis(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending gifs\n     *\n", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "       if index == -1:\n            if name is None:\n                self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(self._tags))\n            else:\n                self._call_fmod(\"FMOD_Sound_GetTag\", index", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "\t\t\t\t\tPlatform.exit();\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// load the settings\n\t\t\tString settingsFile = \"driveuploader-settings.xml\" ;\n\t\t\tif (!new java.io.File (settings", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "       ObservableRegistry.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        ObservableRegistry.getInstance().remove(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "   column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \"#n0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\n        \"#n0\": \"d_user\",", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::error);\n            wifiLog(\"ERROR CONNECTING: \" + connectionErrorCode);\n        }\n    };\n\n    @NonNull\n    private final WifiStateCallback mWifiStateCallback = new WifiStateCallback", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "       state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(VpaidState.class);", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "   if is_comment_node(elem) and context.parent_map.get(elem) is None:\n        return f'/comment()[{context.position}]'\n    elif is_etree_element(elem):\n        if elem.tag == 'xsl:template':\n", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "\n    def segment_vad(\n        self,\n        vad_path: str,\n        segmentation_options: Optional[Dict[str, Any]] = None,\n        num_workers: int = 1,\n        log_directory: str = None,\n    ):\n", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Jobs jobs;\n    private final Errands errands;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            comments = form.cleaned_data['comments']\n\n            # Log moderation event\n            log_moderator_event(msg_type=ModerationLogMsg.REPORT", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "       assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "   public void listenToResultSet(final AbstractResult paramResult) {\n        if (paramResult instanceof BenchmarkResult) {\n            final BenchmarkResult myResult = (BenchmarkResult) paramResult;\n            final NiceTable myTable = new NiceTable(myResult.getTotal", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       # map the rest bits\n        # TODO: check if we need to map the rest bits\n        # TODO: check if we need to map the rest bits\n        # TODO: check if we need to map the rest bits\n        # TODO: check if we need to map the rest bits\n       ", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       listaDeRespostas.getPropriedades().getEstado() == EstadoDaListaDeRespostas.CORRECAO) {\n            result.redirectTo(this).correcao(listaDeRespostas);\n            return;\n        }\n\t    \n", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "   u6 = Unit(\"Msun/pc**3\")\n    assert u6.dimensions == energy\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"Msun/pc**3\")\n    assert", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 200) {\n\t\t\t\t\tProgramManager.getInstance().parseTrack(connector.getResponse());\n\t\t\t\t\tadapter = new PageViewP", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "       self.tracerouter = Tracerouter.Tracerouter(self)\n        self.time_manager = TimeManager.TimeManager(self)\n        self.pcap_logger = PcapLogger.PcapLogger(self)\n        self.cleaner = Cleaner.Cleaner", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   String className = adapterName(type.getQualifiedName().toString(), INJECT_ADAPTER_SUFFIX);\n    String superclassName = \"dagger.internal.Binding\";\n    String superclassNameWithGenerics = \"dagger.internal.Binding<\" + rawTypeToString(type, '.", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n       \n         * 打开/关闭通知栏消息\r\n         * @param enable 打开/关闭\r\n         /******/\n        public static void enableReceiveNormal", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": "\n    def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def drop_nan(self):\n        \"\"\"Drop all the records where there is a NaN\"\"\"\n        dropnan_", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "                   public void startOrderEditActivity(Order order) {\n                        startActivity(OrderEditActivity.newIntent(MainActivity.this, order));\n                    }\n\n                    @Override\n                    public void startSettingsActivity() {\n                        startActivity(SettingsActivity.newIntent", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "           try:\n                non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n            except (ValueError, np.linalg", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "   def validation_error(exc_type):\n        def decorator(func):\n            @functools.wraps(func)\n            def wrapper(*args, **kwargs):\n                try:\n                    return func(*args, **kwargs)\n                except exc_type as", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                _isTyping = m.isTyping();\n            }\n            else if (message.getType() == MessageType.USER_INFO_REPLY)\n            {\n                SmartReplyMessage m = (", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "               DatePicker datePicker = new DatePicker(this, new DatePicker.OnDatePickedListener() {\n                    @Override\n                    public void onDatePicked(LunarCalendar calendar) {\n                        mTimeText.setText(calendar.toRecordTime());\n                       ", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0)", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "           Platform.runLater(new Runnable() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tAlert alert = new Alert(AlertType.INFORMATION, \"Error adding to queue:\\n\" + e.getD", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.d", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    def _get_resource(self, resource_class, resource_id):\n        if resource_id:\n            return resource_class", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 7 || type == 0) {\r", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_device(self, device):\n        if typepy.is_null_string(", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "\n    def __init__(self, with_options=True, **kwargs):\n        Layer3.__init__(self)\n        self.extend([\n            Str('MSCm1', Pt=MSCm1(), Len=1),\n            Str('IMSI', Pt=", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       if index == -1:\n            self._call_fmod(\"FMOD_Sound_GetTag\", byref(tag), name, None)\n        else:\n            self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name)\n", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "       // Checking ProtTest binary\n        if (!ProtTestFacade.checkBinary())\n        {\n        \tfinalize(1);\n        }\n\n        // Checking ProtTest binary\n        if (!ProtTestFacadeThread.checkBinary())\n        {\n        ", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "   @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    AdInterface adInterface;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    CuePointMonitor cuePointMonitor;\n\n", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 0\n\n\ndef test_parameters_msgtype3():\n  '''\n  C", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\t\t\tEXOG.append(dmy_leftvar)\n\n\t\t\tTvalues_A = glm_cosinor(data,\n\t\t\t\tEXOG,\n\t\t\t\tdmy_covariates=dmy_covariates,\n\t\t\t", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private ViewPager mViewPager;\n    private TabLayout mTabLayout;\n\n    private XpNavBarSetting mXpNavBarSetting;\n\n    @Override\n    protected void", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "   new ActivityLightLevelChanger.NightModeable() {\n      @Override\n      public void setNightMode(boolean nightMode) {\n        DynamicStarMapActivity.this.nightMode = nightMode;\n        activityLightLevelManager.setNightMode(nightMode);\n", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
